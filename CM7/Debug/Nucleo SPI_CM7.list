
Nucleo SPI_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000710c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080073ac  080073ac  000083ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007420  08007420  00009088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007420  08007420  00008420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007428  08007428  00009088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007428  08007428  00008428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800742c  0800742c  0000842c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  08007430  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  24000088  080074b8  00009088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002f4  080074b8  000092f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179fc  00000000  00000000  000090b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a1d  00000000  00000000  00020ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000234d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000def  00000000  00000000  000246c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bcb1  00000000  00000000  000254af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169a5  00000000  00000000  00061160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a363  00000000  00000000  00077b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00201e68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b0  00000000  00000000  00201eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0020725c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007394 	.word	0x08007394

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08007394 	.word	0x08007394

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <ExitRun0Mode+0x30>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	f023 0306 	bic.w	r3, r3, #6
 8000814:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <ExitRun0Mode+0x30>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800081c:	bf00      	nop
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <ExitRun0Mode+0x30>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0f9      	beq.n	800081e <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	58024800 	.word	0x58024800

0800083c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800084a:	2b00      	cmp	r3, #0
 800084c:	db0b      	blt.n	8000866 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	f003 021f 	and.w	r2, r3, #31
 8000854:	4907      	ldr	r1, [pc, #28]	@ (8000874 <__NVIC_EnableIRQ+0x38>)
 8000856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800085a:	095b      	lsrs	r3, r3, #5
 800085c:	2001      	movs	r0, #1
 800085e:	fa00 f202 	lsl.w	r2, r0, r2
 8000862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000e100 	.word	0xe000e100

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000884:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000888:	2b00      	cmp	r3, #0
 800088a:	db0a      	blt.n	80008a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	490c      	ldr	r1, [pc, #48]	@ (80008c4 <__NVIC_SetPriority+0x4c>)
 8000892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	440b      	add	r3, r1
 800089c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a0:	e00a      	b.n	80008b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4908      	ldr	r1, [pc, #32]	@ (80008c8 <__NVIC_SetPriority+0x50>)
 80008a8:	88fb      	ldrh	r3, [r7, #6]
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	3b04      	subs	r3, #4
 80008b0:	0112      	lsls	r2, r2, #4
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	440b      	add	r3, r1
 80008b6:	761a      	strb	r2, [r3, #24]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008d6:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008d8:	bf00      	nop
 80008da:	4b49      	ldr	r3, [pc, #292]	@ (8000a00 <main+0x134>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d004      	beq.n	80008f0 <main+0x24>
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	60fa      	str	r2, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	dcf4      	bgt.n	80008da <main+0xe>
  if ( timeout < 0 )
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	da01      	bge.n	80008fa <main+0x2e>
  {
  Error_Handler();
 80008f6:	f000 faa1 	bl	8000e3c <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f000 fdd9 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fe:	f000 f885 	bl	8000a0c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000902:	f000 f8fd 	bl	8000b00 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000906:	4b3e      	ldr	r3, [pc, #248]	@ (8000a00 <main+0x134>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090c:	4a3c      	ldr	r2, [pc, #240]	@ (8000a00 <main+0x134>)
 800090e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000916:	4b3a      	ldr	r3, [pc, #232]	@ (8000a00 <main+0x134>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000924:	2000      	movs	r0, #0
 8000926:	f001 f9bd 	bl	8001ca4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800092a:	2100      	movs	r1, #0
 800092c:	2000      	movs	r0, #0
 800092e:	f001 f9d3 	bl	8001cd8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000932:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000936:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000938:	bf00      	nop
 800093a:	4b31      	ldr	r3, [pc, #196]	@ (8000a00 <main+0x134>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000942:	2b00      	cmp	r3, #0
 8000944:	d104      	bne.n	8000950 <main+0x84>
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	60fa      	str	r2, [r7, #12]
 800094c:	2b00      	cmp	r3, #0
 800094e:	dcf4      	bgt.n	800093a <main+0x6e>
if ( timeout < 0 )
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2b00      	cmp	r3, #0
 8000954:	da01      	bge.n	800095a <main+0x8e>
{
Error_Handler();
 8000956:	f000 fa71 	bl	8000e3c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095a:	f000 f975 	bl	8000c48 <MX_GPIO_Init>
  MX_DMA_Init();
 800095e:	f000 f959 	bl	8000c14 <MX_DMA_Init>
  MX_TIM2_Init();
 8000962:	f000 f901 	bl	8000b68 <MX_TIM2_Init>
  MX_USB_OTG_FS_USB_Init();
 8000966:	f000 f94d 	bl	8000c04 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  /* HSEM as doorbell from CM4 */
__HAL_RCC_HSEM_CLK_ENABLE();
 800096a:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <main+0x134>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	4a23      	ldr	r2, [pc, #140]	@ (8000a00 <main+0x134>)
 8000972:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000976:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097a:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <main+0x134>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  NVIC_SetPriority(HSEM1_IRQn, 5);
 8000988:	2105      	movs	r1, #5
 800098a:	207d      	movs	r0, #125	@ 0x7d
 800098c:	f7ff ff74 	bl	8000878 <__NVIC_SetPriority>
  NVIC_EnableIRQ(HSEM1_IRQn);
 8000990:	207d      	movs	r0, #125	@ 0x7d
 8000992:	f7ff ff53 	bl	800083c <__NVIC_EnableIRQ>
  /* Notify on semaphore 0 release */
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(0));
 8000996:	2001      	movs	r0, #1
 8000998:	f001 f9b2 	bl	8001d00 <HAL_HSEM_ActivateNotification>

  /* Optional: make printf unbuffered so lines appear immediately on VCP */
  setvbuf(stdout, NULL, _IONBF, 0);
 800099c:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <main+0x138>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6898      	ldr	r0, [r3, #8]
 80009a2:	2300      	movs	r3, #0
 80009a4:	2202      	movs	r2, #2
 80009a6:	2100      	movs	r1, #0
 80009a8:	f005 fdde 	bl	8006568 <setvbuf>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 fb9b 	bl	80010e8 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f000 fb98 	bl	80010e8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80009b8:	2002      	movs	r0, #2
 80009ba:	f000 fb95 	bl	80010e8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80009be:	2101      	movs	r1, #1
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 fc07 	bl	80011d4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <main+0x13c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009cc:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <main+0x13c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <main+0x13c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <main+0x13c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <main+0x13c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80009e6:	4908      	ldr	r1, [pc, #32]	@ (8000a08 <main+0x13c>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 fc83 	bl	80012f4 <BSP_COM_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d002      	beq.n	80009fa <main+0x12e>
  {
    Error_Handler();
 80009f4:	f000 fa22 	bl	8000e3c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	e7fd      	b.n	80009fa <main+0x12e>
 80009fe:	bf00      	nop
 8000a00:	58024400 	.word	0x58024400
 8000a04:	24000038 	.word	0x24000038
 8000a08:	240000a4 	.word	0x240000a4

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	@ 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a16:	224c      	movs	r2, #76	@ 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f005 fe9b 	bl	8006756 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f005 fe95 	bl	8006756 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f001 f979 	bl	8001d24 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b30      	ldr	r3, [pc, #192]	@ (8000af8 <SystemClock_Config+0xec>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000af8 <SystemClock_Config+0xec>)
 8000a3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <SystemClock_Config+0xec>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <SystemClock_Config+0xf0>)
 8000a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a50:	4a2a      	ldr	r2, [pc, #168]	@ (8000afc <SystemClock_Config+0xf0>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a58:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <SystemClock_Config+0xf0>)
 8000a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a64:	bf00      	nop
 8000a66:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <SystemClock_Config+0xec>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a72:	d1f8      	bne.n	8000a66 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000a86:	2305      	movs	r3, #5
 8000a88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a8a:	23c0      	movs	r3, #192	@ 0xc0
 8000a8c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a92:	2303      	movs	r3, #3
 8000a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 f994 	bl	8001dd8 <HAL_RCC_OscConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ab6:	f000 f9c1 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aba:	233f      	movs	r3, #63	@ 0x3f
 8000abc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000aca:	2340      	movs	r3, #64	@ 0x40
 8000acc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ace:	2340      	movs	r3, #64	@ 0x40
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad8:	2340      	movs	r3, #64	@ 0x40
 8000ada:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2104      	movs	r1, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fdd3 	bl	800268c <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000aec:	f000 f9a6 	bl	8000e3c <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3770      	adds	r7, #112	@ 0x70
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58024800 	.word	0x58024800
 8000afc:	58000400 	.word	0x58000400

08000b00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b0b0      	sub	sp, #192	@ 0xc0
 8000b04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b06:	463b      	mov	r3, r7
 8000b08:	22c0      	movs	r2, #192	@ 0xc0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f005 fe22 	bl	8006756 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI1;
 8000b12:	f44f 2282 	mov.w	r2, #266240	@ 0x41000
 8000b16:	f04f 0300 	mov.w	r3, #0
 8000b1a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000b1e:	2305      	movs	r3, #5
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 50;
 8000b22:	2332      	movs	r3, #50	@ 0x32
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 10;
 8000b26:	230a      	movs	r3, #10
 8000b28:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8000b2a:	230a      	movs	r3, #10
 8000b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000b32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000b40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b44:	663b      	str	r3, [r7, #96]	@ 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000b46:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000b4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 f927 	bl	8002da4 <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8000b5c:	f000 f96e 	bl	8000e3c <Error_Handler>
  }
}
 8000b60:	bf00      	nop
 8000b62:	37c0      	adds	r7, #192	@ 0xc0
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	@ (8000c00 <MX_TIM2_Init+0x98>)
 8000b88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <MX_TIM2_Init+0x98>)
 8000b90:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <MX_TIM2_Init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <MX_TIM2_Init+0x98>)
 8000b9e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ba2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <MX_TIM2_Init+0x98>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <MX_TIM2_Init+0x98>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bb0:	4813      	ldr	r0, [pc, #76]	@ (8000c00 <MX_TIM2_Init+0x98>)
 8000bb2:	f003 ff23 	bl	80049fc <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000bbc:	f000 f93e 	bl	8000e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <MX_TIM2_Init+0x98>)
 8000bce:	f004 f873 	bl	8004cb8 <HAL_TIM_ConfigClockSource>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000bd8:	f000 f930 	bl	8000e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <MX_TIM2_Init+0x98>)
 8000bea:	f004 facd 	bl	8005188 <HAL_TIMEx_MasterConfigSynchronization>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000bf4:	f000 f922 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	240000b4 	.word	0x240000b4

08000c04 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <MX_DMA_Init+0x30>)
 8000c1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c20:	4a08      	ldr	r2, [pc, #32]	@ (8000c44 <MX_DMA_Init+0x30>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_DMA_Init+0x30>)
 8000c2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	58024400 	.word	0x58024400

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	@ 0x28
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b49      	ldr	r3, [pc, #292]	@ (8000d84 <MX_GPIO_Init+0x13c>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c64:	4a47      	ldr	r2, [pc, #284]	@ (8000d84 <MX_GPIO_Init+0x13c>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c6e:	4b45      	ldr	r3, [pc, #276]	@ (8000d84 <MX_GPIO_Init+0x13c>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b41      	ldr	r3, [pc, #260]	@ (8000d84 <MX_GPIO_Init+0x13c>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c82:	4a40      	ldr	r2, [pc, #256]	@ (8000d84 <MX_GPIO_Init+0x13c>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d84 <MX_GPIO_Init+0x13c>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d84 <MX_GPIO_Init+0x13c>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca0:	4a38      	ldr	r2, [pc, #224]	@ (8000d84 <MX_GPIO_Init+0x13c>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000caa:	4b36      	ldr	r3, [pc, #216]	@ (8000d84 <MX_GPIO_Init+0x13c>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb8:	4b32      	ldr	r3, [pc, #200]	@ (8000d84 <MX_GPIO_Init+0x13c>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbe:	4a31      	ldr	r2, [pc, #196]	@ (8000d84 <MX_GPIO_Init+0x13c>)
 8000cc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d84 <MX_GPIO_Init+0x13c>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cd6:	2332      	movs	r3, #50	@ 0x32
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce6:	230b      	movs	r3, #11
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4825      	ldr	r0, [pc, #148]	@ (8000d88 <MX_GPIO_Init+0x140>)
 8000cf2:	f000 fe0d 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000cf6:	2386      	movs	r3, #134	@ 0x86
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d06:	230b      	movs	r3, #11
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	481e      	ldr	r0, [pc, #120]	@ (8000d8c <MX_GPIO_Init+0x144>)
 8000d12:	f000 fdfd 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d28:	230b      	movs	r3, #11
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	4817      	ldr	r0, [pc, #92]	@ (8000d90 <MX_GPIO_Init+0x148>)
 8000d34:	f000 fdec 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d38:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	480d      	ldr	r0, [pc, #52]	@ (8000d8c <MX_GPIO_Init+0x144>)
 8000d56:	f000 fddb 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d5a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d6c:	230b      	movs	r3, #11
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <MX_GPIO_Init+0x14c>)
 8000d78:	f000 fdca 	bl	8001910 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	@ 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58020800 	.word	0x58020800
 8000d8c:	58020000 	.word	0x58020000
 8000d90:	58020400 	.word	0x58020400
 8000d94:	58021800 	.word	0x58021800

08000d98 <HAL_HSEM_FreeCallback>:

/* USER CODE BEGIN 4 */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if (SemMask & __HAL_HSEM_SEMID_TO_MASK(0)) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d006      	beq.n	8000db8 <HAL_HSEM_FreeCallback+0x20>
    uint32_t v = SHM->seq;               // read the value CM4 wrote
 8000daa:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_HSEM_FreeCallback+0x28>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	60fb      	str	r3, [r7, #12]
    printf("seq=%lu\r\n", (unsigned long)v);
 8000db0:	68f9      	ldr	r1, [r7, #12]
 8000db2:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <HAL_HSEM_FreeCallback+0x2c>)
 8000db4:	f005 fbc6 	bl	8006544 <iprintf>
    /* do any other processing here */
  }
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	30040000 	.word	0x30040000
 8000dc4:	080073ac 	.word	0x080073ac

08000dc8 <HSEM1_IRQHandler>:

void HSEM1_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  uint32_t pending = __HAL_HSEM_GET_FLAG(__HAL_HSEM_SEMID_TO_MASK(0));
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <HSEM1_IRQHandler+0x6c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000dd6:	2b70      	cmp	r3, #112	@ 0x70
 8000dd8:	d105      	bne.n	8000de6 <HSEM1_IRQHandler+0x1e>
 8000dda:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <HSEM1_IRQHandler+0x70>)
 8000ddc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	e004      	b.n	8000df0 <HSEM1_IRQHandler+0x28>
 8000de6:	4b14      	ldr	r3, [pc, #80]	@ (8000e38 <HSEM1_IRQHandler+0x70>)
 8000de8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(0));
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <HSEM1_IRQHandler+0x6c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000dfa:	2b70      	cmp	r3, #112	@ 0x70
 8000dfc:	d108      	bne.n	8000e10 <HSEM1_IRQHandler+0x48>
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000e38 <HSEM1_IRQHandler+0x70>)
 8000e00:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8000e04:	4a0c      	ldr	r2, [pc, #48]	@ (8000e38 <HSEM1_IRQHandler+0x70>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8000e0e:	e007      	b.n	8000e20 <HSEM1_IRQHandler+0x58>
 8000e10:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <HSEM1_IRQHandler+0x70>)
 8000e12:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8000e16:	4a08      	ldr	r2, [pc, #32]	@ (8000e38 <HSEM1_IRQHandler+0x70>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  if (pending) HAL_HSEM_FreeCallback(pending);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <HSEM1_IRQHandler+0x64>
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffb6 	bl	8000d98 <HAL_HSEM_FreeCallback>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	e000ed00 	.word	0xe000ed00
 8000e38:	58026400 	.word	0x58026400

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <Error_Handler+0x8>

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_MspInit+0x30>)
 8000e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e54:	4a08      	ldr	r2, [pc, #32]	@ (8000e78 <HAL_MspInit+0x30>)
 8000e56:	f043 0302 	orr.w	r3, r3, #2
 8000e5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_MspInit+0x30>)
 8000e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	58024400 	.word	0x58024400

08000e7c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e8c:	d116      	bne.n	8000ebc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x48>)
 8000e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e94:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x48>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_TIM_Base_MspInit+0x48>)
 8000ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	201c      	movs	r0, #28
 8000eb2:	f000 fc76 	bl	80017a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eb6:	201c      	movs	r0, #28
 8000eb8:	f000 fc8d 	bl	80017d6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	58024400 	.word	0x58024400

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <NMI_Handler+0x4>

08000ed0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <MemManage_Handler+0x4>

08000ee0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <UsageFault_Handler+0x4>

08000ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1e:	f000 fb39 	bl	8001594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f2c:	4802      	ldr	r0, [pc, #8]	@ (8000f38 <TIM2_IRQHandler+0x10>)
 8000f2e:	f003 fdbc 	bl	8004aaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	240000b4 	.word	0x240000b4

08000f3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 f9b9 	bl	80012b8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e00a      	b.n	8000f72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5c:	f3af 8000 	nop.w
 8000f60:	4601      	mov	r1, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	60ba      	str	r2, [r7, #8]
 8000f68:	b2ca      	uxtb	r2, r1
 8000f6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dbf0      	blt.n	8000f5c <_read+0x12>
  }

  return len;
 8000f7a:	687b      	ldr	r3, [r7, #4]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e009      	b.n	8000faa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	60ba      	str	r2, [r7, #8]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fa0a 	bl	80013b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dbf1      	blt.n	8000f96 <_write+0x12>
  }
  return len;
 8000fb2:	687b      	ldr	r3, [r7, #4]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_close>:

int _close(int file)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe4:	605a      	str	r2, [r3, #4]
  return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_isatty>:

int _isatty(int file)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ffc:	2301      	movs	r3, #1
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800100a:	b480      	push	{r7}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800102c:	4a14      	ldr	r2, [pc, #80]	@ (8001080 <_sbrk+0x5c>)
 800102e:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <_sbrk+0x60>)
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001038:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <_sbrk+0x64>)
 8001042:	4a12      	ldr	r2, [pc, #72]	@ (800108c <_sbrk+0x68>)
 8001044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	429a      	cmp	r2, r3
 8001052:	d207      	bcs.n	8001064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001054:	f005 fbce 	bl	80067f4 <__errno>
 8001058:	4603      	mov	r3, r0
 800105a:	220c      	movs	r2, #12
 800105c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	e009      	b.n	8001078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001064:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106a:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <_sbrk+0x64>)
 8001074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	24080000 	.word	0x24080000
 8001084:	00000400 	.word	0x00000400
 8001088:	24000100 	.word	0x24000100
 800108c:	240002f8 	.word	0x240002f8

08001090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80010cc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001094:	f7ff fbb8 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001098:	f7ff fb08 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109e:	490d      	ldr	r1, [pc, #52]	@ (80010d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b4:	4c0a      	ldr	r4, [pc, #40]	@ (80010e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010c2:	f005 fb9d 	bl	8006800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010c6:	f7ff fc01 	bl	80008cc <main>
  bx  lr
 80010ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010d4:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80010d8:	08007430 	.word	0x08007430
  ldr r2, =_sbss
 80010dc:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80010e0:	240002f4 	.word	0x240002f4

080010e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e4:	e7fe      	b.n	80010e4 <ADC3_IRQHandler>
	...

080010e8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	@ 0x30
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d009      	beq.n	8001110 <BSP_LED_Init+0x28>
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d006      	beq.n	8001110 <BSP_LED_Init+0x28>
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d003      	beq.n	8001110 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001108:	f06f 0301 	mvn.w	r3, #1
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800110e:	e055      	b.n	80011bc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10f      	bne.n	8001136 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001116:	4b2c      	ldr	r3, [pc, #176]	@ (80011c8 <BSP_LED_Init+0xe0>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111c:	4a2a      	ldr	r2, [pc, #168]	@ (80011c8 <BSP_LED_Init+0xe0>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001126:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <BSP_LED_Init+0xe0>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	e021      	b.n	800117a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d10f      	bne.n	800115c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 800113c:	4b22      	ldr	r3, [pc, #136]	@ (80011c8 <BSP_LED_Init+0xe0>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001142:	4a21      	ldr	r2, [pc, #132]	@ (80011c8 <BSP_LED_Init+0xe0>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800114c:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <BSP_LED_Init+0xe0>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	e00e      	b.n	800117a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800115c:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <BSP_LED_Init+0xe0>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001162:	4a19      	ldr	r2, [pc, #100]	@ (80011c8 <BSP_LED_Init+0xe0>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800116c:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <BSP_LED_Init+0xe0>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4a13      	ldr	r2, [pc, #76]	@ (80011cc <BSP_LED_Init+0xe4>)
 800117e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001182:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4a0f      	ldr	r2, [pc, #60]	@ (80011d0 <BSP_LED_Init+0xe8>)
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	f107 0218 	add.w	r2, r7, #24
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fbb6 	bl	8001910 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <BSP_LED_Init+0xe8>)
 80011a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <BSP_LED_Init+0xe4>)
 80011b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	f000 fd5a 	bl	8001c70 <HAL_GPIO_WritePin>
  }

  return ret;
 80011bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3730      	adds	r7, #48	@ 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	58024400 	.word	0x58024400
 80011cc:	080073c8 	.word	0x080073c8
 80011d0:	2400000c 	.word	0x2400000c

080011d4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	460a      	mov	r2, r1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	4613      	mov	r3, r2
 80011e2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80011e4:	4b2e      	ldr	r3, [pc, #184]	@ (80012a0 <BSP_PB_Init+0xcc>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ea:	4a2d      	ldr	r2, [pc, #180]	@ (80012a0 <BSP_PB_Init+0xcc>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f4:	4b2a      	ldr	r3, [pc, #168]	@ (80012a0 <BSP_PB_Init+0xcc>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001202:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001206:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001208:	2302      	movs	r3, #2
 800120a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10c      	bne.n	8001230 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4a21      	ldr	r2, [pc, #132]	@ (80012a4 <BSP_PB_Init+0xd0>)
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	f107 020c 	add.w	r2, r7, #12
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fb71 	bl	8001910 <HAL_GPIO_Init>
 800122e:	e031      	b.n	8001294 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001230:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001234:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4a1a      	ldr	r2, [pc, #104]	@ (80012a4 <BSP_PB_Init+0xd0>)
 800123a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123e:	f107 020c 	add.w	r2, r7, #12
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fb63 	bl	8001910 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4a16      	ldr	r2, [pc, #88]	@ (80012a8 <BSP_PB_Init+0xd4>)
 8001250:	441a      	add	r2, r3
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4915      	ldr	r1, [pc, #84]	@ (80012ac <BSP_PB_Init+0xd8>)
 8001256:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800125a:	4619      	mov	r1, r3
 800125c:	4610      	mov	r0, r2
 800125e:	f000 fb06 	bl	800186e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4a10      	ldr	r2, [pc, #64]	@ (80012a8 <BSP_PB_Init+0xd4>)
 8001268:	1898      	adds	r0, r3, r2
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4a10      	ldr	r2, [pc, #64]	@ (80012b0 <BSP_PB_Init+0xdc>)
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	461a      	mov	r2, r3
 8001274:	2100      	movs	r1, #0
 8001276:	f000 fadb 	bl	8001830 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800127a:	2028      	movs	r0, #40	@ 0x28
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <BSP_PB_Init+0xe0>)
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	2200      	movs	r2, #0
 8001286:	4619      	mov	r1, r3
 8001288:	f000 fa8b 	bl	80017a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800128c:	2328      	movs	r3, #40	@ 0x28
 800128e:	4618      	mov	r0, r3
 8001290:	f000 faa1 	bl	80017d6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3720      	adds	r7, #32
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	58024400 	.word	0x58024400
 80012a4:	24000018 	.word	0x24000018
 80012a8:	24000104 	.word	0x24000104
 80012ac:	080073d0 	.word	0x080073d0
 80012b0:	2400001c 	.word	0x2400001c
 80012b4:	24000020 	.word	0x24000020

080012b8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <BSP_PB_IRQHandler+0x20>)
 80012c8:	4413      	add	r3, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fae4 	bl	8001898 <HAL_EXTI_IRQHandler>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	24000104 	.word	0x24000104

080012dc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800130a:	f06f 0301 	mvn.w	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	e018      	b.n	8001344 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2294      	movs	r2, #148	@ 0x94
 8001316:	fb02 f303 	mul.w	r3, r2, r3
 800131a:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <BSP_COM_Init+0x5c>)
 800131c:	4413      	add	r3, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f86e 	bl	8001400 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2294      	movs	r2, #148	@ 0x94
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <BSP_COM_Init+0x5c>)
 800132e:	4413      	add	r3, r2
 8001330:	6839      	ldr	r1, [r7, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f80e 	bl	8001354 <MX_USART3_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800133e:	f06f 0303 	mvn.w	r3, #3
 8001342:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001344:	68fb      	ldr	r3, [r7, #12]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2400010c 	.word	0x2400010c

08001354 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <MX_USART3_Init+0x60>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	220c      	movs	r2, #12
 8001372:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	895b      	ldrh	r3, [r3, #10]
 8001378:	461a      	mov	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	891b      	ldrh	r3, [r3, #8]
 800138a:	461a      	mov	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	899b      	ldrh	r3, [r3, #12]
 8001394:	461a      	mov	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013a0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f003 ff9c 	bl	80052e0 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	24000008 	.word	0x24000008

080013b8 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80013c0:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <__io_putchar+0x30>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	2394      	movs	r3, #148	@ 0x94
 80013c8:	fb02 f303 	mul.w	r3, r2, r3
 80013cc:	4a07      	ldr	r2, [pc, #28]	@ (80013ec <__io_putchar+0x34>)
 80013ce:	1898      	adds	r0, r3, r2
 80013d0:	1d39      	adds	r1, r7, #4
 80013d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013d6:	2201      	movs	r2, #1
 80013d8:	f003 ffdc 	bl	8005394 <HAL_UART_Transmit>
  return ch;
 80013dc:	687b      	ldr	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	240001a0 	.word	0x240001a0
 80013ec:	2400010c 	.word	0x2400010c

080013f0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80013f4:	2000      	movs	r0, #0
 80013f6:	f7ff ff71 	bl	80012dc <BSP_PB_Callback>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <COM1_MspInit+0xa8>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140e:	4a26      	ldr	r2, [pc, #152]	@ (80014a8 <COM1_MspInit+0xa8>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <COM1_MspInit+0xa8>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001426:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <COM1_MspInit+0xa8>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142c:	4a1e      	ldr	r2, [pc, #120]	@ (80014a8 <COM1_MspInit+0xa8>)
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001436:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <COM1_MspInit+0xa8>)
 8001438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <COM1_MspInit+0xa8>)
 8001446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800144a:	4a17      	ldr	r2, [pc, #92]	@ (80014a8 <COM1_MspInit+0xa8>)
 800144c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001450:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <COM1_MspInit+0xa8>)
 8001456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800145a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001462:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001466:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800146c:	2302      	movs	r3, #2
 800146e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001470:	2301      	movs	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001474:	2307      	movs	r3, #7
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	480b      	ldr	r0, [pc, #44]	@ (80014ac <COM1_MspInit+0xac>)
 8001480:	f000 fa46 	bl	8001910 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001484:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001488:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800148e:	2307      	movs	r3, #7
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4804      	ldr	r0, [pc, #16]	@ (80014ac <COM1_MspInit+0xac>)
 800149a:	f000 fa39 	bl	8001910 <HAL_GPIO_Init>
}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	@ 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58020c00 	.word	0x58020c00

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b6:	2003      	movs	r0, #3
 80014b8:	f000 f968 	bl	800178c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014bc:	f001 fa9c 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <HAL_Init+0x68>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	f003 030f 	and.w	r3, r3, #15
 80014cc:	4913      	ldr	r1, [pc, #76]	@ (800151c <HAL_Init+0x6c>)
 80014ce:	5ccb      	ldrb	r3, [r1, r3]
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
 80014d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <HAL_Init+0x68>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <HAL_Init+0x6c>)
 80014e4:	5cd3      	ldrb	r3, [r2, r3]
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
 80014f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <HAL_Init+0x70>)
 80014f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001524 <HAL_Init+0x74>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014fa:	2000      	movs	r0, #0
 80014fc:	f000 f814 	bl	8001528 <HAL_InitTick>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e002      	b.n	8001510 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800150a:	f7ff fc9d 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	58024400 	.word	0x58024400
 800151c:	080073b8 	.word	0x080073b8
 8001520:	24000004 	.word	0x24000004
 8001524:	24000000 	.word	0x24000000

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_InitTick+0x60>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e021      	b.n	8001580 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <HAL_InitTick+0x64>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <HAL_InitTick+0x60>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154a:	fbb3 f3f1 	udiv	r3, r3, r1
 800154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f94d 	bl	80017f2 <HAL_SYSTICK_Config>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e00e      	b.n	8001580 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d80a      	bhi.n	800157e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f000 f917 	bl	80017a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001574:	4a06      	ldr	r2, [pc, #24]	@ (8001590 <HAL_InitTick+0x68>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e000      	b.n	8001580 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	24000028 	.word	0x24000028
 800158c:	24000000 	.word	0x24000000
 8001590:	24000024 	.word	0x24000024

08001594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_IncTick+0x20>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_IncTick+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a04      	ldr	r2, [pc, #16]	@ (80015b8 <HAL_IncTick+0x24>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	24000028 	.word	0x24000028
 80015b8:	240001a4 	.word	0x240001a4

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	@ (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	240001a4 	.word	0x240001a4

080015d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015d8:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <HAL_GetREVID+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0c1b      	lsrs	r3, r3, #16
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	5c001000 	.word	0x5c001000

080015ec <__NVIC_SetPriorityGrouping>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015fc:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <__NVIC_SetPriorityGrouping+0x40>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	4313      	orrs	r3, r2
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	@ (800162c <__NVIC_SetPriorityGrouping+0x40>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00
 8001630:	05fa0000 	.word	0x05fa0000

08001634 <__NVIC_GetPriorityGrouping>:
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001638:	4b04      	ldr	r3, [pc, #16]	@ (800164c <__NVIC_GetPriorityGrouping+0x18>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f003 0307 	and.w	r3, r3, #7
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_EnableIRQ>:
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800165a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db0b      	blt.n	800167a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	f003 021f 	and.w	r2, r3, #31
 8001668:	4907      	ldr	r1, [pc, #28]	@ (8001688 <__NVIC_EnableIRQ+0x38>)
 800166a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2001      	movs	r0, #1
 8001672:	fa00 f202 	lsl.w	r2, r0, r2
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e100 	.word	0xe000e100

0800168c <__NVIC_SetPriority>:
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169c:	2b00      	cmp	r3, #0
 800169e:	db0a      	blt.n	80016b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	490c      	ldr	r1, [pc, #48]	@ (80016d8 <__NVIC_SetPriority+0x4c>)
 80016a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016aa:	0112      	lsls	r2, r2, #4
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80016b4:	e00a      	b.n	80016cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4908      	ldr	r1, [pc, #32]	@ (80016dc <__NVIC_SetPriority+0x50>)
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	3b04      	subs	r3, #4
 80016c4:	0112      	lsls	r2, r2, #4
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	440b      	add	r3, r1
 80016ca:	761a      	strb	r2, [r3, #24]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000e100 	.word	0xe000e100
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	@ 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f1c3 0307 	rsb	r3, r3, #7
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	bf28      	it	cs
 80016fe:	2304      	movcs	r3, #4
 8001700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3304      	adds	r3, #4
 8001706:	2b06      	cmp	r3, #6
 8001708:	d902      	bls.n	8001710 <NVIC_EncodePriority+0x30>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3b03      	subs	r3, #3
 800170e:	e000      	b.n	8001712 <NVIC_EncodePriority+0x32>
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	f04f 32ff 	mov.w	r2, #4294967295
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	401a      	ands	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001728:	f04f 31ff 	mov.w	r1, #4294967295
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43d9      	mvns	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	4313      	orrs	r3, r2
         );
}
 800173a:	4618      	mov	r0, r3
 800173c:	3724      	adds	r7, #36	@ 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001758:	d301      	bcc.n	800175e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175a:	2301      	movs	r3, #1
 800175c:	e00f      	b.n	800177e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175e:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <SysTick_Config+0x40>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001766:	210f      	movs	r1, #15
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f7ff ff8e 	bl	800168c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001770:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <SysTick_Config+0x40>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001776:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <SysTick_Config+0x40>)
 8001778:	2207      	movs	r2, #7
 800177a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	e000e010 	.word	0xe000e010

0800178c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ff29 	bl	80015ec <__NVIC_SetPriorityGrouping>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b0:	f7ff ff40 	bl	8001634 <__NVIC_GetPriorityGrouping>
 80017b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff ff90 	bl	80016e0 <NVIC_EncodePriority>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff5f 	bl	800168c <__NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff33 	bl	8001650 <__NVIC_EnableIRQ>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffa4 	bl	8001748 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_GetCurrentCPUID+0x20>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001818:	2b70      	cmp	r3, #112	@ 0x70
 800181a:	d101      	bne.n	8001820 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 800181c:	2303      	movs	r3, #3
 800181e:	e000      	b.n	8001822 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8001820:	2301      	movs	r3, #1
  }
}
 8001822:	4618      	mov	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	460b      	mov	r3, r1
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e00a      	b.n	8001862 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d103      	bne.n	800185a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	605a      	str	r2, [r3, #4]
      break;
 8001858:	e002      	b.n	8001860 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	75fb      	strb	r3, [r7, #23]
      break;
 800185e:	bf00      	nop
  }

  return status;
 8001860:	7dfb      	ldrb	r3, [r7, #23]
}
 8001862:	4618      	mov	r0, r3
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e003      	b.n	800188a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001888:	2300      	movs	r3, #0
  }
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	2201      	movs	r2, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80018bc:	f7ff ffa6 	bl	800180c <HAL_GetCurrentCPUID>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d105      	bne.n	80018d2 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	011a      	lsls	r2, r3, #4
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <HAL_EXTI_IRQHandler+0x70>)
 80018cc:	4413      	add	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e004      	b.n	80018dc <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	011a      	lsls	r2, r3, #4
 80018d6:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <HAL_EXTI_IRQHandler+0x74>)
 80018d8:	4413      	add	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4013      	ands	r3, r2
 80018e4:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4798      	blx	r3
    }
  }
}
 8001900:	bf00      	nop
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	58000088 	.word	0x58000088
 800190c:	580000c8 	.word	0x580000c8

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800191e:	4b89      	ldr	r3, [pc, #548]	@ (8001b44 <HAL_GPIO_Init+0x234>)
 8001920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001922:	e194      	b.n	8001c4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8186 	beq.w	8001c48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d005      	beq.n	8001954 <HAL_GPIO_Init+0x44>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d130      	bne.n	80019b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800198a:	2201      	movs	r2, #1
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 0201 	and.w	r2, r3, #1
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d017      	beq.n	80019f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d123      	bne.n	8001a46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	08da      	lsrs	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3208      	adds	r2, #8
 8001a40:	69b9      	ldr	r1, [r7, #24]
 8001a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0203 	and.w	r2, r3, #3
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80e0 	beq.w	8001c48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a88:	4b2f      	ldr	r3, [pc, #188]	@ (8001b48 <HAL_GPIO_Init+0x238>)
 8001a8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a8e:	4a2e      	ldr	r2, [pc, #184]	@ (8001b48 <HAL_GPIO_Init+0x238>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a98:	4b2b      	ldr	r3, [pc, #172]	@ (8001b48 <HAL_GPIO_Init+0x238>)
 8001a9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa6:	4a29      	ldr	r2, [pc, #164]	@ (8001b4c <HAL_GPIO_Init+0x23c>)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a20      	ldr	r2, [pc, #128]	@ (8001b50 <HAL_GPIO_Init+0x240>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d052      	beq.n	8001b78 <HAL_GPIO_Init+0x268>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b54 <HAL_GPIO_Init+0x244>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d031      	beq.n	8001b3e <HAL_GPIO_Init+0x22e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b58 <HAL_GPIO_Init+0x248>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d02b      	beq.n	8001b3a <HAL_GPIO_Init+0x22a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <HAL_GPIO_Init+0x24c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d025      	beq.n	8001b36 <HAL_GPIO_Init+0x226>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a1c      	ldr	r2, [pc, #112]	@ (8001b60 <HAL_GPIO_Init+0x250>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01f      	beq.n	8001b32 <HAL_GPIO_Init+0x222>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b64 <HAL_GPIO_Init+0x254>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x21e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b68 <HAL_GPIO_Init+0x258>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x21a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a19      	ldr	r2, [pc, #100]	@ (8001b6c <HAL_GPIO_Init+0x25c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x216>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a18      	ldr	r2, [pc, #96]	@ (8001b70 <HAL_GPIO_Init+0x260>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x212>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a17      	ldr	r2, [pc, #92]	@ (8001b74 <HAL_GPIO_Init+0x264>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x20e>
 8001b1a:	2309      	movs	r3, #9
 8001b1c:	e02d      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b1e:	230a      	movs	r3, #10
 8001b20:	e02b      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b22:	2308      	movs	r3, #8
 8001b24:	e029      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b26:	2307      	movs	r3, #7
 8001b28:	e027      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	e025      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e023      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b32:	2304      	movs	r3, #4
 8001b34:	e021      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b36:	2303      	movs	r3, #3
 8001b38:	e01f      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e01d      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e01b      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b42:	bf00      	nop
 8001b44:	58000080 	.word	0x58000080
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	58000400 	.word	0x58000400
 8001b50:	58020000 	.word	0x58020000
 8001b54:	58020400 	.word	0x58020400
 8001b58:	58020800 	.word	0x58020800
 8001b5c:	58020c00 	.word	0x58020c00
 8001b60:	58021000 	.word	0x58021000
 8001b64:	58021400 	.word	0x58021400
 8001b68:	58021800 	.word	0x58021800
 8001b6c:	58021c00 	.word	0x58021c00
 8001b70:	58022000 	.word	0x58022000
 8001b74:	58022400 	.word	0x58022400
 8001b78:	2300      	movs	r3, #0
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	f002 0203 	and.w	r2, r2, #3
 8001b80:	0092      	lsls	r2, r2, #2
 8001b82:	4093      	lsls	r3, r2
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b8a:	4938      	ldr	r1, [pc, #224]	@ (8001c6c <HAL_GPIO_Init+0x35c>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001bec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f47f ae63 	bne.w	8001924 <HAL_GPIO_Init+0x14>
  }
}
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
 8001c62:	3724      	adds	r7, #36	@ 0x24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	58000400 	.word	0x58000400

08001c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c8c:	e003      	b.n	8001c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	041a      	lsls	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	619a      	str	r2, [r3, #24]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001cac:	4a08      	ldr	r2, [pc, #32]	@ (8001cd0 <HAL_HSEM_FastTake+0x2c>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3320      	adds	r3, #32
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	4a07      	ldr	r2, [pc, #28]	@ (8001cd4 <HAL_HSEM_FastTake+0x30>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d101      	bne.n	8001cc0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e000      	b.n	8001cc2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	58026400 	.word	0x58026400
 8001cd4:	80000300 	.word	0x80000300

08001cd8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001ce2:	4906      	ldr	r1, [pc, #24]	@ (8001cfc <HAL_HSEM_Release+0x24>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	58026400 	.word	0x58026400

08001d00 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8001d08:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <HAL_HSEM_ActivateNotification+0x20>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4904      	ldr	r1, [pc, #16]	@ (8001d20 <HAL_HSEM_ActivateNotification+0x20>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
#endif
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	58026500 	.word	0x58026500

08001d24 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001d2c:	4b29      	ldr	r3, [pc, #164]	@ (8001dd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	2b06      	cmp	r3, #6
 8001d36:	d00a      	beq.n	8001d4e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d38:	4b26      	ldr	r3, [pc, #152]	@ (8001dd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d001      	beq.n	8001d4a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e040      	b.n	8001dcc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e03e      	b.n	8001dcc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d4e:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001d56:	491f      	ldr	r1, [pc, #124]	@ (8001dd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d5e:	f7ff fc2d 	bl	80015bc <HAL_GetTick>
 8001d62:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d64:	e009      	b.n	8001d7a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d66:	f7ff fc29 	bl	80015bc <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d74:	d901      	bls.n	8001d7a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e028      	b.n	8001dcc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d7a:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d86:	d1ee      	bne.n	8001d66 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b1e      	cmp	r3, #30
 8001d8c:	d008      	beq.n	8001da0 <HAL_PWREx_ConfigSupply+0x7c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d92:	d005      	beq.n	8001da0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b1d      	cmp	r3, #29
 8001d98:	d002      	beq.n	8001da0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b2d      	cmp	r3, #45	@ 0x2d
 8001d9e:	d114      	bne.n	8001dca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001da0:	f7ff fc0c 	bl	80015bc <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001da6:	e009      	b.n	8001dbc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001da8:	f7ff fc08 	bl	80015bc <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001db6:	d901      	bls.n	8001dbc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e007      	b.n	8001dcc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc8:	d1ee      	bne.n	8001da8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	58024800 	.word	0x58024800

08001dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	@ 0x30
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	f000 bc48 	b.w	800267c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 8088 	beq.w	8001f0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfa:	4b99      	ldr	r3, [pc, #612]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e04:	4b96      	ldr	r3, [pc, #600]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e08:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e0c:	2b10      	cmp	r3, #16
 8001e0e:	d007      	beq.n	8001e20 <HAL_RCC_OscConfig+0x48>
 8001e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e12:	2b18      	cmp	r3, #24
 8001e14:	d111      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62>
 8001e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d10c      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	4b8f      	ldr	r3, [pc, #572]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d06d      	beq.n	8001f08 <HAL_RCC_OscConfig+0x130>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d169      	bne.n	8001f08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f000 bc21 	b.w	800267c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x7a>
 8001e44:	4b86      	ldr	r3, [pc, #536]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a85      	ldr	r2, [pc, #532]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e02e      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd8>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x9c>
 8001e5a:	4b81      	ldr	r3, [pc, #516]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a80      	ldr	r2, [pc, #512]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b7e      	ldr	r3, [pc, #504]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a7d      	ldr	r2, [pc, #500]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e01d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0xc0>
 8001e7e:	4b78      	ldr	r3, [pc, #480]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a77      	ldr	r2, [pc, #476]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b75      	ldr	r3, [pc, #468]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a74      	ldr	r2, [pc, #464]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd8>
 8001e98:	4b71      	ldr	r3, [pc, #452]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a70      	ldr	r2, [pc, #448]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b6e      	ldr	r3, [pc, #440]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a6d      	ldr	r2, [pc, #436]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fb80 	bl	80015bc <HAL_GetTick>
 8001ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fb7c 	bl	80015bc <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	@ 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e3d4      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ed2:	4b63      	ldr	r3, [pc, #396]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xe8>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fb6c 	bl	80015bc <HAL_GetTick>
 8001ee4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fb68 	bl	80015bc <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	@ 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e3c0      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001efa:	4b59      	ldr	r3, [pc, #356]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x110>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80ca 	beq.w	80020ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f18:	4b51      	ldr	r3, [pc, #324]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f22:	4b4f      	ldr	r3, [pc, #316]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_RCC_OscConfig+0x166>
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	2b18      	cmp	r3, #24
 8001f32:	d156      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x20a>
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d151      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f3e:	4b48      	ldr	r3, [pc, #288]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_RCC_OscConfig+0x17e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e392      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f56:	4b42      	ldr	r3, [pc, #264]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 0219 	bic.w	r2, r3, #25
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	493f      	ldr	r1, [pc, #252]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff fb28 	bl	80015bc <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f70:	f7ff fb24 	bl	80015bc <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e37c      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f82:	4b37      	ldr	r3, [pc, #220]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8e:	f7ff fb21 	bl	80015d4 <HAL_GetREVID>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d817      	bhi.n	8001fcc <HAL_RCC_OscConfig+0x1f4>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b40      	cmp	r3, #64	@ 0x40
 8001fa2:	d108      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x1de>
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001fac:	4a2c      	ldr	r2, [pc, #176]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001fae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fb4:	e07a      	b.n	80020ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	031b      	lsls	r3, r3, #12
 8001fc4:	4926      	ldr	r1, [pc, #152]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fca:	e06f      	b.n	80020ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fcc:	4b24      	ldr	r3, [pc, #144]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	4921      	ldr	r1, [pc, #132]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe0:	e064      	b.n	80020ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d047      	beq.n	800207a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fea:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0219 	bic.w	r2, r3, #25
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	491a      	ldr	r1, [pc, #104]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fade 	bl	80015bc <HAL_GetTick>
 8002000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002004:	f7ff fada 	bl	80015bc <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e332      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002016:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	f7ff fad7 	bl	80015d4 <HAL_GetREVID>
 8002026:	4603      	mov	r3, r0
 8002028:	f241 0203 	movw	r2, #4099	@ 0x1003
 800202c:	4293      	cmp	r3, r2
 800202e:	d819      	bhi.n	8002064 <HAL_RCC_OscConfig+0x28c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b40      	cmp	r3, #64	@ 0x40
 8002036:	d108      	bne.n	800204a <HAL_RCC_OscConfig+0x272>
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002040:	4a07      	ldr	r2, [pc, #28]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 8002042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002046:	6053      	str	r3, [r2, #4]
 8002048:	e030      	b.n	80020ac <HAL_RCC_OscConfig+0x2d4>
 800204a:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	031b      	lsls	r3, r3, #12
 8002058:	4901      	ldr	r1, [pc, #4]	@ (8002060 <HAL_RCC_OscConfig+0x288>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
 800205e:	e025      	b.n	80020ac <HAL_RCC_OscConfig+0x2d4>
 8002060:	58024400 	.word	0x58024400
 8002064:	4b9a      	ldr	r3, [pc, #616]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	061b      	lsls	r3, r3, #24
 8002072:	4997      	ldr	r1, [pc, #604]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
 8002078:	e018      	b.n	80020ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207a:	4b95      	ldr	r3, [pc, #596]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a94      	ldr	r2, [pc, #592]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7ff fa99 	bl	80015bc <HAL_GetTick>
 800208a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208e:	f7ff fa95 	bl	80015bc <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e2ed      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020a0:	4b8b      	ldr	r3, [pc, #556]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80a9 	beq.w	800220c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ba:	4b85      	ldr	r3, [pc, #532]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020c4:	4b82      	ldr	r3, [pc, #520]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d007      	beq.n	80020e0 <HAL_RCC_OscConfig+0x308>
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b18      	cmp	r3, #24
 80020d4:	d13a      	bne.n	800214c <HAL_RCC_OscConfig+0x374>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d135      	bne.n	800214c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020e0:	4b7b      	ldr	r3, [pc, #492]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_OscConfig+0x320>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b80      	cmp	r3, #128	@ 0x80
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e2c1      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020f8:	f7ff fa6c 	bl	80015d4 <HAL_GetREVID>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002102:	4293      	cmp	r3, r2
 8002104:	d817      	bhi.n	8002136 <HAL_RCC_OscConfig+0x35e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	2b20      	cmp	r3, #32
 800210c:	d108      	bne.n	8002120 <HAL_RCC_OscConfig+0x348>
 800210e:	4b70      	ldr	r3, [pc, #448]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002116:	4a6e      	ldr	r2, [pc, #440]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002118:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800211c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800211e:	e075      	b.n	800220c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002120:	4b6b      	ldr	r3, [pc, #428]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	069b      	lsls	r3, r3, #26
 800212e:	4968      	ldr	r1, [pc, #416]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002134:	e06a      	b.n	800220c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002136:	4b66      	ldr	r3, [pc, #408]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	061b      	lsls	r3, r3, #24
 8002144:	4962      	ldr	r1, [pc, #392]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002146:	4313      	orrs	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800214a:	e05f      	b.n	800220c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d042      	beq.n	80021da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002154:	4b5e      	ldr	r3, [pc, #376]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a5d      	ldr	r2, [pc, #372]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 800215a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800215e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff fa2c 	bl	80015bc <HAL_GetTick>
 8002164:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002168:	f7ff fa28 	bl	80015bc <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e280      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800217a:	4b55      	ldr	r3, [pc, #340]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002186:	f7ff fa25 	bl	80015d4 <HAL_GetREVID>
 800218a:	4603      	mov	r3, r0
 800218c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002190:	4293      	cmp	r3, r2
 8002192:	d817      	bhi.n	80021c4 <HAL_RCC_OscConfig+0x3ec>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	2b20      	cmp	r3, #32
 800219a:	d108      	bne.n	80021ae <HAL_RCC_OscConfig+0x3d6>
 800219c:	4b4c      	ldr	r3, [pc, #304]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80021a4:	4a4a      	ldr	r2, [pc, #296]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80021a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80021aa:	6053      	str	r3, [r2, #4]
 80021ac:	e02e      	b.n	800220c <HAL_RCC_OscConfig+0x434>
 80021ae:	4b48      	ldr	r3, [pc, #288]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	069b      	lsls	r3, r3, #26
 80021bc:	4944      	ldr	r1, [pc, #272]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
 80021c2:	e023      	b.n	800220c <HAL_RCC_OscConfig+0x434>
 80021c4:	4b42      	ldr	r3, [pc, #264]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	061b      	lsls	r3, r3, #24
 80021d2:	493f      	ldr	r1, [pc, #252]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60cb      	str	r3, [r1, #12]
 80021d8:	e018      	b.n	800220c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80021da:	4b3d      	ldr	r3, [pc, #244]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a3c      	ldr	r2, [pc, #240]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80021e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7ff f9e9 	bl	80015bc <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021ee:	f7ff f9e5 	bl	80015bc <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e23d      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002200:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f0      	bne.n	80021ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d036      	beq.n	8002286 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d019      	beq.n	8002254 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002220:	4b2b      	ldr	r3, [pc, #172]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002224:	4a2a      	ldr	r2, [pc, #168]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff f9c6 	bl	80015bc <HAL_GetTick>
 8002230:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002234:	f7ff f9c2 	bl	80015bc <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e21a      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002246:	4b22      	ldr	r3, [pc, #136]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x45c>
 8002252:	e018      	b.n	8002286 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002254:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 8002256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002258:	4a1d      	ldr	r2, [pc, #116]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002260:	f7ff f9ac 	bl	80015bc <HAL_GetTick>
 8002264:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002268:	f7ff f9a8 	bl	80015bc <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e200      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 800227c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	2b00      	cmp	r3, #0
 8002290:	d039      	beq.n	8002306 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800229a:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a0c      	ldr	r2, [pc, #48]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80022a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022a6:	f7ff f989 	bl	80015bc <HAL_GetTick>
 80022aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ae:	f7ff f985 	bl	80015bc <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1dd      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <HAL_RCC_OscConfig+0x4f8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x4d6>
 80022cc:	e01b      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
 80022ce:	bf00      	nop
 80022d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022d4:	4b9b      	ldr	r3, [pc, #620]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a9a      	ldr	r2, [pc, #616]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80022da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022e0:	f7ff f96c 	bl	80015bc <HAL_GetTick>
 80022e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022e8:	f7ff f968 	bl	80015bc <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1c0      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022fa:	4b92      	ldr	r3, [pc, #584]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8081 	beq.w	8002416 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002314:	4b8c      	ldr	r3, [pc, #560]	@ (8002548 <HAL_RCC_OscConfig+0x770>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a8b      	ldr	r2, [pc, #556]	@ (8002548 <HAL_RCC_OscConfig+0x770>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002320:	f7ff f94c 	bl	80015bc <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002328:	f7ff f948 	bl	80015bc <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	@ 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1a0      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800233a:	4b83      	ldr	r3, [pc, #524]	@ (8002548 <HAL_RCC_OscConfig+0x770>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x584>
 800234e:	4b7d      	ldr	r3, [pc, #500]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002352:	4a7c      	ldr	r2, [pc, #496]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6713      	str	r3, [r2, #112]	@ 0x70
 800235a:	e02d      	b.n	80023b8 <HAL_RCC_OscConfig+0x5e0>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10c      	bne.n	800237e <HAL_RCC_OscConfig+0x5a6>
 8002364:	4b77      	ldr	r3, [pc, #476]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002368:	4a76      	ldr	r2, [pc, #472]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002370:	4b74      	ldr	r3, [pc, #464]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002374:	4a73      	ldr	r2, [pc, #460]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002376:	f023 0304 	bic.w	r3, r3, #4
 800237a:	6713      	str	r3, [r2, #112]	@ 0x70
 800237c:	e01c      	b.n	80023b8 <HAL_RCC_OscConfig+0x5e0>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b05      	cmp	r3, #5
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x5c8>
 8002386:	4b6f      	ldr	r3, [pc, #444]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238a:	4a6e      	ldr	r2, [pc, #440]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	6713      	str	r3, [r2, #112]	@ 0x70
 8002392:	4b6c      	ldr	r3, [pc, #432]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002396:	4a6b      	ldr	r2, [pc, #428]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6713      	str	r3, [r2, #112]	@ 0x70
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0x5e0>
 80023a0:	4b68      	ldr	r3, [pc, #416]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a4:	4a67      	ldr	r2, [pc, #412]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ac:	4b65      	ldr	r3, [pc, #404]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b0:	4a64      	ldr	r2, [pc, #400]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80023b2:	f023 0304 	bic.w	r3, r3, #4
 80023b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d015      	beq.n	80023ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c0:	f7ff f8fc 	bl	80015bc <HAL_GetTick>
 80023c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023c6:	e00a      	b.n	80023de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c8:	f7ff f8f8 	bl	80015bc <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e14e      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023de:	4b59      	ldr	r3, [pc, #356]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0ee      	beq.n	80023c8 <HAL_RCC_OscConfig+0x5f0>
 80023ea:	e014      	b.n	8002416 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7ff f8e6 	bl	80015bc <HAL_GetTick>
 80023f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023f2:	e00a      	b.n	800240a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f4:	f7ff f8e2 	bl	80015bc <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e138      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800240a:	4b4e      	ldr	r3, [pc, #312]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1ee      	bne.n	80023f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 812d 	beq.w	800267a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002420:	4b48      	ldr	r3, [pc, #288]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002428:	2b18      	cmp	r3, #24
 800242a:	f000 80bd 	beq.w	80025a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	2b02      	cmp	r3, #2
 8002434:	f040 809e 	bne.w	8002574 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b42      	ldr	r3, [pc, #264]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a41      	ldr	r2, [pc, #260]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 800243e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff f8ba 	bl	80015bc <HAL_GetTick>
 8002448:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7ff f8b6 	bl	80015bc <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e10e      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800245e:	4b39      	ldr	r3, [pc, #228]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246a:	4b36      	ldr	r3, [pc, #216]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 800246c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800246e:	4b37      	ldr	r3, [pc, #220]	@ (800254c <HAL_RCC_OscConfig+0x774>)
 8002470:	4013      	ands	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	430a      	orrs	r2, r1
 800247e:	4931      	ldr	r1, [pc, #196]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002480:	4313      	orrs	r3, r2
 8002482:	628b      	str	r3, [r1, #40]	@ 0x28
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002488:	3b01      	subs	r3, #1
 800248a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002492:	3b01      	subs	r3, #1
 8002494:	025b      	lsls	r3, r3, #9
 8002496:	b29b      	uxth	r3, r3
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800249e:	3b01      	subs	r3, #1
 80024a0:	041b      	lsls	r3, r3, #16
 80024a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ac:	3b01      	subs	r3, #1
 80024ae:	061b      	lsls	r3, r3, #24
 80024b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80024b4:	4923      	ldr	r1, [pc, #140]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80024ba:	4b22      	ldr	r3, [pc, #136]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	4a21      	ldr	r2, [pc, #132]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80024c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ca:	4b21      	ldr	r3, [pc, #132]	@ (8002550 <HAL_RCC_OscConfig+0x778>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024d2:	00d2      	lsls	r2, r2, #3
 80024d4:	491b      	ldr	r1, [pc, #108]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80024da:	4b1a      	ldr	r3, [pc, #104]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80024dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024de:	f023 020c 	bic.w	r2, r3, #12
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	4917      	ldr	r1, [pc, #92]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80024ec:	4b15      	ldr	r3, [pc, #84]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	f023 0202 	bic.w	r2, r3, #2
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f8:	4912      	ldr	r1, [pc, #72]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80024fe:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	4a10      	ldr	r2, [pc, #64]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002508:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800250a:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 800250c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250e:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002514:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002516:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	4a0a      	ldr	r2, [pc, #40]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002520:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002522:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	4a07      	ldr	r2, [pc, #28]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252e:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a04      	ldr	r2, [pc, #16]	@ (8002544 <HAL_RCC_OscConfig+0x76c>)
 8002534:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7ff f83f 	bl	80015bc <HAL_GetTick>
 800253e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002540:	e011      	b.n	8002566 <HAL_RCC_OscConfig+0x78e>
 8002542:	bf00      	nop
 8002544:	58024400 	.word	0x58024400
 8002548:	58024800 	.word	0x58024800
 800254c:	fffffc0c 	.word	0xfffffc0c
 8002550:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7ff f832 	bl	80015bc <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e08a      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002566:	4b47      	ldr	r3, [pc, #284]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x77c>
 8002572:	e082      	b.n	800267a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b43      	ldr	r3, [pc, #268]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a42      	ldr	r2, [pc, #264]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 800257a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800257e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7ff f81c 	bl	80015bc <HAL_GetTick>
 8002584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7ff f818 	bl	80015bc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e070      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800259a:	4b3a      	ldr	r3, [pc, #232]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x7b0>
 80025a6:	e068      	b.n	800267a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80025a8:	4b36      	ldr	r3, [pc, #216]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 80025aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025ae:	4b35      	ldr	r3, [pc, #212]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d031      	beq.n	8002620 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f003 0203 	and.w	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d12a      	bne.n	8002620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d122      	bne.n	8002620 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d11a      	bne.n	8002620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	0a5b      	lsrs	r3, r3, #9
 80025ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d111      	bne.n	8002620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	0c1b      	lsrs	r3, r3, #16
 8002600:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002608:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d108      	bne.n	8002620 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	0e1b      	lsrs	r3, r3, #24
 8002612:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e02b      	b.n	800267c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002624:	4b17      	ldr	r3, [pc, #92]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 8002626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002628:	08db      	lsrs	r3, r3, #3
 800262a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800262e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	429a      	cmp	r2, r3
 8002638:	d01f      	beq.n	800267a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800263a:	4b12      	ldr	r3, [pc, #72]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 800263c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263e:	4a11      	ldr	r2, [pc, #68]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002646:	f7fe ffb9 	bl	80015bc <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800264c:	bf00      	nop
 800264e:	f7fe ffb5 	bl	80015bc <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	4293      	cmp	r3, r2
 8002658:	d0f9      	beq.n	800264e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800265a:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 800265c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800265e:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <HAL_RCC_OscConfig+0x8b0>)
 8002660:	4013      	ands	r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002666:	00d2      	lsls	r2, r2, #3
 8002668:	4906      	ldr	r1, [pc, #24]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 800266a:	4313      	orrs	r3, r2
 800266c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800266e:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 8002670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002672:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <HAL_RCC_OscConfig+0x8ac>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3730      	adds	r7, #48	@ 0x30
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	58024400 	.word	0x58024400
 8002688:	ffff0007 	.word	0xffff0007

0800268c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e19c      	b.n	80029da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a0:	4b8a      	ldr	r3, [pc, #552]	@ (80028cc <HAL_RCC_ClockConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d910      	bls.n	80026d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b87      	ldr	r3, [pc, #540]	@ (80028cc <HAL_RCC_ClockConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 020f 	bic.w	r2, r3, #15
 80026b6:	4985      	ldr	r1, [pc, #532]	@ (80028cc <HAL_RCC_ClockConfig+0x240>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b83      	ldr	r3, [pc, #524]	@ (80028cc <HAL_RCC_ClockConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e184      	b.n	80029da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d010      	beq.n	80026fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	4b7b      	ldr	r3, [pc, #492]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d908      	bls.n	80026fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026ec:	4b78      	ldr	r3, [pc, #480]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	4975      	ldr	r1, [pc, #468]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d010      	beq.n	800272c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	4b70      	ldr	r3, [pc, #448]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002716:	429a      	cmp	r2, r3
 8002718:	d908      	bls.n	800272c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800271a:	4b6d      	ldr	r3, [pc, #436]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	496a      	ldr	r1, [pc, #424]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 8002728:	4313      	orrs	r3, r2
 800272a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d010      	beq.n	800275a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699a      	ldr	r2, [r3, #24]
 800273c:	4b64      	ldr	r3, [pc, #400]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002744:	429a      	cmp	r2, r3
 8002746:	d908      	bls.n	800275a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002748:	4b61      	ldr	r3, [pc, #388]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	495e      	ldr	r1, [pc, #376]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 8002756:	4313      	orrs	r3, r2
 8002758:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	d010      	beq.n	8002788 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	4b59      	ldr	r3, [pc, #356]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002772:	429a      	cmp	r2, r3
 8002774:	d908      	bls.n	8002788 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002776:	4b56      	ldr	r3, [pc, #344]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4953      	ldr	r1, [pc, #332]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 8002784:	4313      	orrs	r3, r2
 8002786:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d010      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	4b4d      	ldr	r3, [pc, #308]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d908      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b4a      	ldr	r3, [pc, #296]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f023 020f 	bic.w	r2, r3, #15
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4947      	ldr	r1, [pc, #284]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d055      	beq.n	800286e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80027c2:	4b43      	ldr	r3, [pc, #268]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	4940      	ldr	r1, [pc, #256]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d107      	bne.n	80027ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027dc:	4b3c      	ldr	r3, [pc, #240]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d121      	bne.n	800282c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0f6      	b.n	80029da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027f4:	4b36      	ldr	r3, [pc, #216]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d115      	bne.n	800282c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0ea      	b.n	80029da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d107      	bne.n	800281c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800280c:	4b30      	ldr	r3, [pc, #192]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d109      	bne.n	800282c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0de      	b.n	80029da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800281c:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0d6      	b.n	80029da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800282c:	4b28      	ldr	r3, [pc, #160]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f023 0207 	bic.w	r2, r3, #7
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4925      	ldr	r1, [pc, #148]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 800283a:	4313      	orrs	r3, r2
 800283c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800283e:	f7fe febd 	bl	80015bc <HAL_GetTick>
 8002842:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002844:	e00a      	b.n	800285c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002846:	f7fe feb9 	bl	80015bc <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e0be      	b.n	80029da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285c:	4b1c      	ldr	r3, [pc, #112]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	429a      	cmp	r2, r3
 800286c:	d1eb      	bne.n	8002846 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d010      	beq.n	800289c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	429a      	cmp	r2, r3
 8002888:	d208      	bcs.n	800289c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288a:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f023 020f 	bic.w	r2, r3, #15
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	490e      	ldr	r1, [pc, #56]	@ (80028d0 <HAL_RCC_ClockConfig+0x244>)
 8002898:	4313      	orrs	r3, r2
 800289a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_RCC_ClockConfig+0x240>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d214      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <HAL_RCC_ClockConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 020f 	bic.w	r2, r3, #15
 80028b2:	4906      	ldr	r1, [pc, #24]	@ (80028cc <HAL_RCC_ClockConfig+0x240>)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b04      	ldr	r3, [pc, #16]	@ (80028cc <HAL_RCC_ClockConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e086      	b.n	80029da <HAL_RCC_ClockConfig+0x34e>
 80028cc:	52002000 	.word	0x52002000
 80028d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d010      	beq.n	8002902 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	4b3f      	ldr	r3, [pc, #252]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d208      	bcs.n	8002902 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028f0:	4b3c      	ldr	r3, [pc, #240]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	4939      	ldr	r1, [pc, #228]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d010      	beq.n	8002930 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	4b34      	ldr	r3, [pc, #208]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800291a:	429a      	cmp	r2, r3
 800291c:	d208      	bcs.n	8002930 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800291e:	4b31      	ldr	r3, [pc, #196]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	492e      	ldr	r1, [pc, #184]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 800292c:	4313      	orrs	r3, r2
 800292e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	d010      	beq.n	800295e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699a      	ldr	r2, [r3, #24]
 8002940:	4b28      	ldr	r3, [pc, #160]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002948:	429a      	cmp	r2, r3
 800294a:	d208      	bcs.n	800295e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800294c:	4b25      	ldr	r3, [pc, #148]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	4922      	ldr	r1, [pc, #136]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 800295a:	4313      	orrs	r3, r2
 800295c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b00      	cmp	r3, #0
 8002968:	d010      	beq.n	800298c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	4b1d      	ldr	r3, [pc, #116]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002976:	429a      	cmp	r2, r3
 8002978:	d208      	bcs.n	800298c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800297a:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4917      	ldr	r1, [pc, #92]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 8002988:	4313      	orrs	r3, r2
 800298a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800298c:	f000 f834 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b14      	ldr	r3, [pc, #80]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	4912      	ldr	r1, [pc, #72]	@ (80029e8 <HAL_RCC_ClockConfig+0x35c>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029aa:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <HAL_RCC_ClockConfig+0x358>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	4a0d      	ldr	r2, [pc, #52]	@ (80029e8 <HAL_RCC_ClockConfig+0x35c>)
 80029b4:	5cd3      	ldrb	r3, [r2, r3]
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
 80029c0:	4a0a      	ldr	r2, [pc, #40]	@ (80029ec <HAL_RCC_ClockConfig+0x360>)
 80029c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029c4:	4a0a      	ldr	r2, [pc, #40]	@ (80029f0 <HAL_RCC_ClockConfig+0x364>)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80029ca:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <HAL_RCC_ClockConfig+0x368>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fdaa 	bl	8001528 <HAL_InitTick>
 80029d4:	4603      	mov	r3, r0
 80029d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	58024400 	.word	0x58024400
 80029e8:	080073b8 	.word	0x080073b8
 80029ec:	24000004 	.word	0x24000004
 80029f0:	24000000 	.word	0x24000000
 80029f4:	24000024 	.word	0x24000024

080029f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029fe:	4bb3      	ldr	r3, [pc, #716]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a06:	2b18      	cmp	r3, #24
 8002a08:	f200 8155 	bhi.w	8002cb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a79 	.word	0x08002a79
 8002a18:	08002cb7 	.word	0x08002cb7
 8002a1c:	08002cb7 	.word	0x08002cb7
 8002a20:	08002cb7 	.word	0x08002cb7
 8002a24:	08002cb7 	.word	0x08002cb7
 8002a28:	08002cb7 	.word	0x08002cb7
 8002a2c:	08002cb7 	.word	0x08002cb7
 8002a30:	08002cb7 	.word	0x08002cb7
 8002a34:	08002a9f 	.word	0x08002a9f
 8002a38:	08002cb7 	.word	0x08002cb7
 8002a3c:	08002cb7 	.word	0x08002cb7
 8002a40:	08002cb7 	.word	0x08002cb7
 8002a44:	08002cb7 	.word	0x08002cb7
 8002a48:	08002cb7 	.word	0x08002cb7
 8002a4c:	08002cb7 	.word	0x08002cb7
 8002a50:	08002cb7 	.word	0x08002cb7
 8002a54:	08002aa5 	.word	0x08002aa5
 8002a58:	08002cb7 	.word	0x08002cb7
 8002a5c:	08002cb7 	.word	0x08002cb7
 8002a60:	08002cb7 	.word	0x08002cb7
 8002a64:	08002cb7 	.word	0x08002cb7
 8002a68:	08002cb7 	.word	0x08002cb7
 8002a6c:	08002cb7 	.word	0x08002cb7
 8002a70:	08002cb7 	.word	0x08002cb7
 8002a74:	08002aab 	.word	0x08002aab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a78:	4b94      	ldr	r3, [pc, #592]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a84:	4b91      	ldr	r3, [pc, #580]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	08db      	lsrs	r3, r3, #3
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	4a90      	ldr	r2, [pc, #576]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
 8002a94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a96:	e111      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a98:	4b8d      	ldr	r3, [pc, #564]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a9a:	61bb      	str	r3, [r7, #24]
      break;
 8002a9c:	e10e      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a9e:	4b8d      	ldr	r3, [pc, #564]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002aa0:	61bb      	str	r3, [r7, #24]
      break;
 8002aa2:	e10b      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002aa6:	61bb      	str	r3, [r7, #24]
      break;
 8002aa8:	e108      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002aaa:	4b88      	ldr	r3, [pc, #544]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ab4:	4b85      	ldr	r3, [pc, #532]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002abe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ac0:	4b82      	ldr	r3, [pc, #520]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002aca:	4b80      	ldr	r3, [pc, #512]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ace:	08db      	lsrs	r3, r3, #3
 8002ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80e1 	beq.w	8002cb0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	f000 8083 	beq.w	8002bfc <HAL_RCC_GetSysClockFreq+0x204>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	f200 80a1 	bhi.w	8002c40 <HAL_RCC_GetSysClockFreq+0x248>
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x114>
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d056      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b0a:	e099      	b.n	8002c40 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d02d      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b18:	4b6c      	ldr	r3, [pc, #432]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	08db      	lsrs	r3, r3, #3
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	4a6b      	ldr	r2, [pc, #428]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
 8002b28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	ee07 3a90 	vmov	s15, r3
 8002b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b42:	4b62      	ldr	r3, [pc, #392]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002b72:	e087      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ce0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b86:	4b51      	ldr	r3, [pc, #324]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bb6:	e065      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bca:	4b40      	ldr	r3, [pc, #256]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bde:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bfa:	e043      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ce8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c3e:	e021      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ce4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c52:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002cdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002c84:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	0a5b      	lsrs	r3, r3, #9
 8002c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c8e:	3301      	adds	r3, #1
 8002c90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca8:	ee17 3a90 	vmov	r3, s15
 8002cac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002cae:	e005      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
      break;
 8002cb4:	e002      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002cb6:	4b07      	ldr	r3, [pc, #28]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cb8:	61bb      	str	r3, [r7, #24]
      break;
 8002cba:	bf00      	nop
  }

  return sysclockfreq;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3724      	adds	r7, #36	@ 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	03d09000 	.word	0x03d09000
 8002cd4:	003d0900 	.word	0x003d0900
 8002cd8:	017d7840 	.word	0x017d7840
 8002cdc:	46000000 	.word	0x46000000
 8002ce0:	4c742400 	.word	0x4c742400
 8002ce4:	4a742400 	.word	0x4a742400
 8002ce8:	4bbebc20 	.word	0x4bbebc20

08002cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002cf2:	f7ff fe81 	bl	80029f8 <HAL_RCC_GetSysClockFreq>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <HAL_RCC_GetHCLKFreq+0x50>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	490f      	ldr	r1, [pc, #60]	@ (8002d40 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d04:	5ccb      	ldrb	r3, [r1, r3]
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d10:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <HAL_RCC_GetHCLKFreq+0x50>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	4a09      	ldr	r2, [pc, #36]	@ (8002d40 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d1a:	5cd3      	ldrb	r3, [r2, r3]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	4a07      	ldr	r2, [pc, #28]	@ (8002d44 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d2a:	4a07      	ldr	r2, [pc, #28]	@ (8002d48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d30:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	58024400 	.word	0x58024400
 8002d40:	080073b8 	.word	0x080073b8
 8002d44:	24000004 	.word	0x24000004
 8002d48:	24000000 	.word	0x24000000

08002d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d50:	f7ff ffcc 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4904      	ldr	r1, [pc, #16]	@ (8002d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	58024400 	.word	0x58024400
 8002d74:	080073b8 	.word	0x080073b8

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002d7c:	f7ff ffb6 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4904      	ldr	r1, [pc, #16]	@ (8002da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	58024400 	.word	0x58024400
 8002da0:	080073b8 	.word	0x080073b8

08002da4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da8:	b0ca      	sub	sp, #296	@ 0x128
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002dc8:	2500      	movs	r5, #0
 8002dca:	ea54 0305 	orrs.w	r3, r4, r5
 8002dce:	d049      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002dda:	d02f      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002ddc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002de0:	d828      	bhi.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002de2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002de6:	d01a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002de8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dec:	d822      	bhi.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002df6:	d007      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002df8:	e01c      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dfa:	4bb8      	ldr	r3, [pc, #736]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfe:	4ab7      	ldr	r2, [pc, #732]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e06:	e01a      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	2102      	movs	r1, #2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f001 fc8f 	bl	8004734 <RCCEx_PLL2_Config>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e1c:	e00f      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e22:	3328      	adds	r3, #40	@ 0x28
 8002e24:	2102      	movs	r1, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 fd36 	bl	8004898 <RCCEx_PLL3_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002e32:	e004      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e3a:	e000      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10a      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e46:	4ba5      	ldr	r3, [pc, #660]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e54:	4aa1      	ldr	r2, [pc, #644]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e56:	430b      	orrs	r3, r1
 8002e58:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e5a:	e003      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002e70:	f04f 0900 	mov.w	r9, #0
 8002e74:	ea58 0309 	orrs.w	r3, r8, r9
 8002e78:	d047      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d82a      	bhi.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e84:	a201      	add	r2, pc, #4	@ (adr r2, 8002e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8a:	bf00      	nop
 8002e8c:	08002ea1 	.word	0x08002ea1
 8002e90:	08002eaf 	.word	0x08002eaf
 8002e94:	08002ec5 	.word	0x08002ec5
 8002e98:	08002ee3 	.word	0x08002ee3
 8002e9c:	08002ee3 	.word	0x08002ee3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ea0:	4b8e      	ldr	r3, [pc, #568]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea4:	4a8d      	ldr	r2, [pc, #564]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002eac:	e01a      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 fc3c 	bl	8004734 <RCCEx_PLL2_Config>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ec2:	e00f      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec8:	3328      	adds	r3, #40	@ 0x28
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 fce3 	bl	8004898 <RCCEx_PLL3_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ed8:	e004      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ee0:	e000      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10a      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eec:	4b7b      	ldr	r3, [pc, #492]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef0:	f023 0107 	bic.w	r1, r3, #7
 8002ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	4a78      	ldr	r2, [pc, #480]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002efc:	430b      	orrs	r3, r1
 8002efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f00:	e003      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002f16:	f04f 0b00 	mov.w	fp, #0
 8002f1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f1e:	d04c      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f2a:	d030      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f30:	d829      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f32:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f34:	d02d      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002f36:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f38:	d825      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f3a:	2b80      	cmp	r3, #128	@ 0x80
 8002f3c:	d018      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002f3e:	2b80      	cmp	r3, #128	@ 0x80
 8002f40:	d821      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002f46:	2b40      	cmp	r3, #64	@ 0x40
 8002f48:	d007      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002f4a:	e01c      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f4c:	4b63      	ldr	r3, [pc, #396]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f50:	4a62      	ldr	r2, [pc, #392]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f58:	e01c      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5e:	3308      	adds	r3, #8
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 fbe6 	bl	8004734 <RCCEx_PLL2_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f6e:	e011      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f74:	3328      	adds	r3, #40	@ 0x28
 8002f76:	2100      	movs	r1, #0
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f001 fc8d 	bl	8004898 <RCCEx_PLL3_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f84:	e006      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f8c:	e002      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f8e:	bf00      	nop
 8002f90:	e000      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002faa:	4a4c      	ldr	r2, [pc, #304]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fb0:	e003      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002fc6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002fd0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	d053      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002fe2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fe6:	d035      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002fe8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fec:	d82e      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002fee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ff2:	d031      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002ff4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002ff8:	d828      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002ffa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ffe:	d01a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003004:	d822      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800300a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800300e:	d007      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003010:	e01c      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003012:	4b32      	ldr	r3, [pc, #200]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003016:	4a31      	ldr	r2, [pc, #196]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800301c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800301e:	e01c      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003024:	3308      	adds	r3, #8
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f001 fb83 	bl	8004734 <RCCEx_PLL2_Config>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003034:	e011      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303a:	3328      	adds	r3, #40	@ 0x28
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f001 fc2a 	bl	8004898 <RCCEx_PLL3_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800304a:	e006      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003052:	e002      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003054:	bf00      	nop
 8003056:	e000      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800305a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10b      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003062:	4b1e      	ldr	r3, [pc, #120]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003066:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800306a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003072:	4a1a      	ldr	r2, [pc, #104]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003074:	430b      	orrs	r3, r1
 8003076:	6593      	str	r3, [r2, #88]	@ 0x58
 8003078:	e003      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800307e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800308e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003092:	2300      	movs	r3, #0
 8003094:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003098:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800309c:	460b      	mov	r3, r1
 800309e:	4313      	orrs	r3, r2
 80030a0:	d056      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80030a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80030aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030ae:	d038      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80030b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030b4:	d831      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80030b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030ba:	d034      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80030bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030c0:	d82b      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80030c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030c6:	d01d      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80030c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030cc:	d825      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d006      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80030d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80030d8:	e01f      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80030da:	bf00      	nop
 80030dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030e0:	4ba2      	ldr	r3, [pc, #648]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	4aa1      	ldr	r2, [pc, #644]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030ec:	e01c      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f2:	3308      	adds	r3, #8
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f001 fb1c 	bl	8004734 <RCCEx_PLL2_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003102:	e011      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003108:	3328      	adds	r3, #40	@ 0x28
 800310a:	2100      	movs	r1, #0
 800310c:	4618      	mov	r0, r3
 800310e:	f001 fbc3 	bl	8004898 <RCCEx_PLL3_Config>
 8003112:	4603      	mov	r3, r0
 8003114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003118:	e006      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003120:	e002      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10b      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003130:	4b8e      	ldr	r3, [pc, #568]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003134:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800313c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003140:	4a8a      	ldr	r2, [pc, #552]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003142:	430b      	orrs	r3, r1
 8003144:	6593      	str	r3, [r2, #88]	@ 0x58
 8003146:	e003      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800314c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800315c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003166:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800316a:	460b      	mov	r3, r1
 800316c:	4313      	orrs	r3, r2
 800316e:	d03a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003176:	2b30      	cmp	r3, #48	@ 0x30
 8003178:	d01f      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800317a:	2b30      	cmp	r3, #48	@ 0x30
 800317c:	d819      	bhi.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800317e:	2b20      	cmp	r3, #32
 8003180:	d00c      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003182:	2b20      	cmp	r3, #32
 8003184:	d815      	bhi.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d019      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800318a:	2b10      	cmp	r3, #16
 800318c:	d111      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800318e:	4b77      	ldr	r3, [pc, #476]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	4a76      	ldr	r2, [pc, #472]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003198:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800319a:	e011      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800319c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a0:	3308      	adds	r3, #8
 80031a2:	2102      	movs	r1, #2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f001 fac5 	bl	8004734 <RCCEx_PLL2_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80031b0:	e006      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031b8:	e002      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80031ba:	bf00      	nop
 80031bc:	e000      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80031be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10a      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80031c8:	4b68      	ldr	r3, [pc, #416]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031cc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80031d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d6:	4a65      	ldr	r2, [pc, #404]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031d8:	430b      	orrs	r3, r1
 80031da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031dc:	e003      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80031e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80031f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80031fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003200:	460b      	mov	r3, r1
 8003202:	4313      	orrs	r3, r2
 8003204:	d051      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800320a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003210:	d035      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003212:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003216:	d82e      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003218:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800321c:	d031      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800321e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003222:	d828      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003228:	d01a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800322a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800322e:	d822      	bhi.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003238:	d007      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800323a:	e01c      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800323c:	4b4b      	ldr	r3, [pc, #300]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800323e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003240:	4a4a      	ldr	r2, [pc, #296]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003246:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003248:	e01c      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324e:	3308      	adds	r3, #8
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f001 fa6e 	bl	8004734 <RCCEx_PLL2_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800325e:	e011      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003264:	3328      	adds	r3, #40	@ 0x28
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f001 fb15 	bl	8004898 <RCCEx_PLL3_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003274:	e006      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800327c:	e002      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800328c:	4b37      	ldr	r3, [pc, #220]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800328e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003290:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329a:	4a34      	ldr	r2, [pc, #208]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800329c:	430b      	orrs	r3, r1
 800329e:	6513      	str	r3, [r2, #80]	@ 0x50
 80032a0:	e003      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80032b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032ba:	2300      	movs	r3, #0
 80032bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80032c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80032c4:	460b      	mov	r3, r1
 80032c6:	4313      	orrs	r3, r2
 80032c8:	d056      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d4:	d033      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80032d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032da:	d82c      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80032dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032e0:	d02f      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80032e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032e6:	d826      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80032e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032ec:	d02b      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80032ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80032f2:	d820      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80032f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032f8:	d012      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80032fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032fe:	d81a      	bhi.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d022      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003308:	d115      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800330a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330e:	3308      	adds	r3, #8
 8003310:	2101      	movs	r1, #1
 8003312:	4618      	mov	r0, r3
 8003314:	f001 fa0e 	bl	8004734 <RCCEx_PLL2_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800331e:	e015      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003324:	3328      	adds	r3, #40	@ 0x28
 8003326:	2101      	movs	r1, #1
 8003328:	4618      	mov	r0, r3
 800332a:	f001 fab5 	bl	8004898 <RCCEx_PLL3_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003334:	e00a      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800333c:	e006      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800333e:	bf00      	nop
 8003340:	e004      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003342:	bf00      	nop
 8003344:	e002      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003346:	bf00      	nop
 8003348:	e000      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800334a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003354:	4b05      	ldr	r3, [pc, #20]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003358:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003362:	4a02      	ldr	r2, [pc, #8]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003364:	430b      	orrs	r3, r1
 8003366:	6513      	str	r3, [r2, #80]	@ 0x50
 8003368:	e006      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800336a:	bf00      	nop
 800336c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003374:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003384:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800338e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003392:	460b      	mov	r3, r1
 8003394:	4313      	orrs	r3, r2
 8003396:	d055      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033a4:	d033      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80033a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033aa:	d82c      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b0:	d02f      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80033b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b6:	d826      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80033b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80033bc:	d02b      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80033be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80033c2:	d820      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80033c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033c8:	d012      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80033ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ce:	d81a      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d022      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80033d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033d8:	d115      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033de:	3308      	adds	r3, #8
 80033e0:	2101      	movs	r1, #1
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 f9a6 	bl	8004734 <RCCEx_PLL2_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80033ee:	e015      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f4:	3328      	adds	r3, #40	@ 0x28
 80033f6:	2101      	movs	r1, #1
 80033f8:	4618      	mov	r0, r3
 80033fa:	f001 fa4d 	bl	8004898 <RCCEx_PLL3_Config>
 80033fe:	4603      	mov	r3, r0
 8003400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003404:	e00a      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800340c:	e006      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800340e:	bf00      	nop
 8003410:	e004      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003412:	bf00      	nop
 8003414:	e002      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003416:	bf00      	nop
 8003418:	e000      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800341a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10b      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003424:	4ba3      	ldr	r3, [pc, #652]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003428:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003434:	4a9f      	ldr	r2, [pc, #636]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003436:	430b      	orrs	r3, r1
 8003438:	6593      	str	r3, [r2, #88]	@ 0x58
 800343a:	e003      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003440:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800345a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800345e:	460b      	mov	r3, r1
 8003460:	4313      	orrs	r3, r2
 8003462:	d037      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800346e:	d00e      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003474:	d816      	bhi.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d018      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800347a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800347e:	d111      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003480:	4b8c      	ldr	r3, [pc, #560]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	4a8b      	ldr	r2, [pc, #556]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800348a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800348c:	e00f      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003492:	3308      	adds	r3, #8
 8003494:	2101      	movs	r1, #1
 8003496:	4618      	mov	r0, r3
 8003498:	f001 f94c 	bl	8004734 <RCCEx_PLL2_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034a2:	e004      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034aa:	e000      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80034ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034b6:	4b7f      	ldr	r3, [pc, #508]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80034be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c4:	4a7b      	ldr	r2, [pc, #492]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034c6:	430b      	orrs	r3, r1
 80034c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80034ca:	e003      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80034d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80034e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4313      	orrs	r3, r2
 80034f2:	d039      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d81c      	bhi.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80034fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003504 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003541 	.word	0x08003541
 8003508:	08003515 	.word	0x08003515
 800350c:	08003523 	.word	0x08003523
 8003510:	08003541 	.word	0x08003541
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003514:	4b67      	ldr	r3, [pc, #412]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003518:	4a66      	ldr	r2, [pc, #408]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800351a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800351e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003520:	e00f      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003526:	3308      	adds	r3, #8
 8003528:	2102      	movs	r1, #2
 800352a:	4618      	mov	r0, r3
 800352c:	f001 f902 	bl	8004734 <RCCEx_PLL2_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003536:	e004      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800353e:	e000      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800354a:	4b5a      	ldr	r3, [pc, #360]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800354c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354e:	f023 0103 	bic.w	r1, r3, #3
 8003552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003558:	4a56      	ldr	r2, [pc, #344]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800355a:	430b      	orrs	r3, r1
 800355c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800355e:	e003      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003564:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003574:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003578:	2300      	movs	r3, #0
 800357a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800357e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003582:	460b      	mov	r3, r1
 8003584:	4313      	orrs	r3, r2
 8003586:	f000 809f 	beq.w	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800358a:	4b4b      	ldr	r3, [pc, #300]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a4a      	ldr	r2, [pc, #296]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003594:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003596:	f7fe f811 	bl	80015bc <HAL_GetTick>
 800359a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800359e:	e00b      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a0:	f7fe f80c 	bl	80015bc <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b64      	cmp	r3, #100	@ 0x64
 80035ae:	d903      	bls.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035b6:	e005      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035b8:	4b3f      	ldr	r3, [pc, #252]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ed      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80035c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d179      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80035cc:	4b39      	ldr	r3, [pc, #228]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035d8:	4053      	eors	r3, r2
 80035da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d015      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035e2:	4b34      	ldr	r3, [pc, #208]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035ee:	4b31      	ldr	r3, [pc, #196]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f2:	4a30      	ldr	r2, [pc, #192]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035fa:	4b2e      	ldr	r3, [pc, #184]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fe:	4a2d      	ldr	r2, [pc, #180]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003604:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003606:	4a2b      	ldr	r2, [pc, #172]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003608:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800360c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003612:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800361a:	d118      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fd ffce 	bl	80015bc <HAL_GetTick>
 8003620:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003624:	e00d      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fd ffc9 	bl	80015bc <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003630:	1ad2      	subs	r2, r2, r3
 8003632:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003636:	429a      	cmp	r2, r3
 8003638:	d903      	bls.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003640:	e005      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003642:	4b1c      	ldr	r3, [pc, #112]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0eb      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800364e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003652:	2b00      	cmp	r3, #0
 8003654:	d129      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800365e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003662:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003666:	d10e      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003668:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003674:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003678:	091a      	lsrs	r2, r3, #4
 800367a:	4b10      	ldr	r3, [pc, #64]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800367c:	4013      	ands	r3, r2
 800367e:	4a0d      	ldr	r2, [pc, #52]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003680:	430b      	orrs	r3, r1
 8003682:	6113      	str	r3, [r2, #16]
 8003684:	e005      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003686:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	4a0a      	ldr	r2, [pc, #40]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800368c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003690:	6113      	str	r3, [r2, #16]
 8003692:	4b08      	ldr	r3, [pc, #32]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003694:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800369e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a2:	4a04      	ldr	r2, [pc, #16]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a8:	e00e      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80036b2:	e009      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80036b4:	58024400 	.word	0x58024400
 80036b8:	58024800 	.word	0x58024800
 80036bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80036c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f002 0301 	and.w	r3, r2, #1
 80036d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f000 8089 	beq.w	80037fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036f0:	2b28      	cmp	r3, #40	@ 0x28
 80036f2:	d86b      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80036f4:	a201      	add	r2, pc, #4	@ (adr r2, 80036fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fa:	bf00      	nop
 80036fc:	080037d5 	.word	0x080037d5
 8003700:	080037cd 	.word	0x080037cd
 8003704:	080037cd 	.word	0x080037cd
 8003708:	080037cd 	.word	0x080037cd
 800370c:	080037cd 	.word	0x080037cd
 8003710:	080037cd 	.word	0x080037cd
 8003714:	080037cd 	.word	0x080037cd
 8003718:	080037cd 	.word	0x080037cd
 800371c:	080037a1 	.word	0x080037a1
 8003720:	080037cd 	.word	0x080037cd
 8003724:	080037cd 	.word	0x080037cd
 8003728:	080037cd 	.word	0x080037cd
 800372c:	080037cd 	.word	0x080037cd
 8003730:	080037cd 	.word	0x080037cd
 8003734:	080037cd 	.word	0x080037cd
 8003738:	080037cd 	.word	0x080037cd
 800373c:	080037b7 	.word	0x080037b7
 8003740:	080037cd 	.word	0x080037cd
 8003744:	080037cd 	.word	0x080037cd
 8003748:	080037cd 	.word	0x080037cd
 800374c:	080037cd 	.word	0x080037cd
 8003750:	080037cd 	.word	0x080037cd
 8003754:	080037cd 	.word	0x080037cd
 8003758:	080037cd 	.word	0x080037cd
 800375c:	080037d5 	.word	0x080037d5
 8003760:	080037cd 	.word	0x080037cd
 8003764:	080037cd 	.word	0x080037cd
 8003768:	080037cd 	.word	0x080037cd
 800376c:	080037cd 	.word	0x080037cd
 8003770:	080037cd 	.word	0x080037cd
 8003774:	080037cd 	.word	0x080037cd
 8003778:	080037cd 	.word	0x080037cd
 800377c:	080037d5 	.word	0x080037d5
 8003780:	080037cd 	.word	0x080037cd
 8003784:	080037cd 	.word	0x080037cd
 8003788:	080037cd 	.word	0x080037cd
 800378c:	080037cd 	.word	0x080037cd
 8003790:	080037cd 	.word	0x080037cd
 8003794:	080037cd 	.word	0x080037cd
 8003798:	080037cd 	.word	0x080037cd
 800379c:	080037d5 	.word	0x080037d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a4:	3308      	adds	r3, #8
 80037a6:	2101      	movs	r1, #1
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 ffc3 	bl	8004734 <RCCEx_PLL2_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037b4:	e00f      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ba:	3328      	adds	r3, #40	@ 0x28
 80037bc:	2101      	movs	r1, #1
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 f86a 	bl	8004898 <RCCEx_PLL3_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037ca:	e004      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80037d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80037de:	4bbf      	ldr	r3, [pc, #764]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80037e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ec:	4abb      	ldr	r2, [pc, #748]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037ee:	430b      	orrs	r3, r1
 80037f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80037f2:	e003      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f002 0302 	and.w	r3, r2, #2
 8003808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800380c:	2300      	movs	r3, #0
 800380e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003812:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003816:	460b      	mov	r3, r1
 8003818:	4313      	orrs	r3, r2
 800381a:	d041      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003822:	2b05      	cmp	r3, #5
 8003824:	d824      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003826:	a201      	add	r2, pc, #4	@ (adr r2, 800382c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382c:	08003879 	.word	0x08003879
 8003830:	08003845 	.word	0x08003845
 8003834:	0800385b 	.word	0x0800385b
 8003838:	08003879 	.word	0x08003879
 800383c:	08003879 	.word	0x08003879
 8003840:	08003879 	.word	0x08003879
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003848:	3308      	adds	r3, #8
 800384a:	2101      	movs	r1, #1
 800384c:	4618      	mov	r0, r3
 800384e:	f000 ff71 	bl	8004734 <RCCEx_PLL2_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003858:	e00f      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800385a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385e:	3328      	adds	r3, #40	@ 0x28
 8003860:	2101      	movs	r1, #1
 8003862:	4618      	mov	r0, r3
 8003864:	f001 f818 	bl	8004898 <RCCEx_PLL3_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800386e:	e004      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003876:	e000      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003882:	4b96      	ldr	r3, [pc, #600]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003886:	f023 0107 	bic.w	r1, r3, #7
 800388a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003890:	4a92      	ldr	r2, [pc, #584]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003892:	430b      	orrs	r3, r1
 8003894:	6553      	str	r3, [r2, #84]	@ 0x54
 8003896:	e003      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f002 0304 	and.w	r3, r2, #4
 80038ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4313      	orrs	r3, r2
 80038be:	d044      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d825      	bhi.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80038cc:	a201      	add	r2, pc, #4	@ (adr r2, 80038d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	08003921 	.word	0x08003921
 80038d8:	080038ed 	.word	0x080038ed
 80038dc:	08003903 	.word	0x08003903
 80038e0:	08003921 	.word	0x08003921
 80038e4:	08003921 	.word	0x08003921
 80038e8:	08003921 	.word	0x08003921
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f0:	3308      	adds	r3, #8
 80038f2:	2101      	movs	r1, #1
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 ff1d 	bl	8004734 <RCCEx_PLL2_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003900:	e00f      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003906:	3328      	adds	r3, #40	@ 0x28
 8003908:	2101      	movs	r1, #1
 800390a:	4618      	mov	r0, r3
 800390c:	f000 ffc4 	bl	8004898 <RCCEx_PLL3_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003916:	e004      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800391e:	e000      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800392a:	4b6c      	ldr	r3, [pc, #432]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392e:	f023 0107 	bic.w	r1, r3, #7
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393a:	4a68      	ldr	r2, [pc, #416]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800393c:	430b      	orrs	r3, r1
 800393e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003940:	e003      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003952:	f002 0320 	and.w	r3, r2, #32
 8003956:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003960:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003964:	460b      	mov	r3, r1
 8003966:	4313      	orrs	r3, r2
 8003968:	d055      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003972:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003976:	d033      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800397c:	d82c      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800397e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003982:	d02f      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003988:	d826      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800398a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800398e:	d02b      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003990:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003994:	d820      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800399a:	d012      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800399c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a0:	d81a      	bhi.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d022      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80039a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039aa:	d115      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b0:	3308      	adds	r3, #8
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 febd 	bl	8004734 <RCCEx_PLL2_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039c0:	e015      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c6:	3328      	adds	r3, #40	@ 0x28
 80039c8:	2102      	movs	r1, #2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 ff64 	bl	8004898 <RCCEx_PLL3_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039d6:	e00a      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039de:	e006      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039e0:	bf00      	nop
 80039e2:	e004      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039e4:	bf00      	nop
 80039e6:	e002      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039e8:	bf00      	nop
 80039ea:	e000      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80039ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f6:	4b39      	ldr	r3, [pc, #228]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a06:	4a35      	ldr	r2, [pc, #212]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a0c:	e003      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4313      	orrs	r3, r2
 8003a34:	d058      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a3e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a42:	d033      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003a44:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a48:	d82c      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a4e:	d02f      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a54:	d826      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a5a:	d02b      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003a5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a60:	d820      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a66:	d012      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a6c:	d81a      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d022      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fe57 	bl	8004734 <RCCEx_PLL2_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a8c:	e015      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a92:	3328      	adds	r3, #40	@ 0x28
 8003a94:	2102      	movs	r1, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fefe 	bl	8004898 <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003aa2:	e00a      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aaa:	e006      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003aac:	bf00      	nop
 8003aae:	e004      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ab0:	bf00      	nop
 8003ab2:	e002      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ab4:	bf00      	nop
 8003ab6:	e000      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ac2:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ad2:	4a02      	ldr	r2, [pc, #8]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad8:	e006      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003ada:	bf00      	nop
 8003adc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003afe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003b02:	460b      	mov	r3, r1
 8003b04:	4313      	orrs	r3, r2
 8003b06:	d055      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b10:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b14:	d033      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003b16:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b1a:	d82c      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b20:	d02f      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b26:	d826      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b28:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b2c:	d02b      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003b2e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b32:	d820      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b38:	d012      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003b3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b3e:	d81a      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d022      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b48:	d115      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4e:	3308      	adds	r3, #8
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fdee 	bl	8004734 <RCCEx_PLL2_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b5e:	e015      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b64:	3328      	adds	r3, #40	@ 0x28
 8003b66:	2102      	movs	r1, #2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fe95 	bl	8004898 <RCCEx_PLL3_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b74:	e00a      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b7c:	e006      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b7e:	bf00      	nop
 8003b80:	e004      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b82:	bf00      	nop
 8003b84:	e002      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b86:	bf00      	nop
 8003b88:	e000      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b94:	4ba1      	ldr	r3, [pc, #644]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b98:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ba4:	4a9d      	ldr	r2, [pc, #628]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003baa:	e003      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f002 0308 	and.w	r3, r2, #8
 8003bc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	d01e      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	3328      	adds	r3, #40	@ 0x28
 8003be8:	2102      	movs	r1, #2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fe54 	bl	8004898 <RCCEx_PLL3_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003bfc:	4b87      	ldr	r3, [pc, #540]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c00:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c0c:	4a83      	ldr	r2, [pc, #524]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	f002 0310 	and.w	r3, r2, #16
 8003c1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003c28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	d01e      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c3e:	d10c      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c44:	3328      	adds	r3, #40	@ 0x28
 8003c46:	2102      	movs	r1, #2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fe25 	bl	8004898 <RCCEx_PLL3_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c5a:	4b70      	ldr	r3, [pc, #448]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c6a:	4a6c      	ldr	r2, [pc, #432]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003c7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c80:	2300      	movs	r3, #0
 8003c82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	d03e      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c9c:	d022      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003c9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ca2:	d81b      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cac:	d00b      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003cae:	e015      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fd3b 	bl	8004734 <RCCEx_PLL2_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003cc4:	e00f      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cca:	3328      	adds	r3, #40	@ 0x28
 8003ccc:	2102      	movs	r1, #2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fde2 	bl	8004898 <RCCEx_PLL3_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003cda:	e004      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10b      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cee:	4b4b      	ldr	r3, [pc, #300]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cfe:	4a47      	ldr	r2, [pc, #284]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d04:	e003      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003d1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003d24:	460b      	mov	r3, r1
 8003d26:	4313      	orrs	r3, r2
 8003d28:	d03b      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d36:	d01f      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003d38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d3c:	d818      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d42:	d003      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003d44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d48:	d007      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003d4a:	e011      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d4c:	4b33      	ldr	r3, [pc, #204]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d50:	4a32      	ldr	r2, [pc, #200]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d58:	e00f      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5e:	3328      	adds	r3, #40	@ 0x28
 8003d60:	2101      	movs	r1, #1
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fd98 	bl	8004898 <RCCEx_PLL3_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d6e:	e004      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d76:	e000      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003d78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10b      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d82:	4b26      	ldr	r3, [pc, #152]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d92:	4a22      	ldr	r2, [pc, #136]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d98:	e003      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003daa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003dae:	673b      	str	r3, [r7, #112]	@ 0x70
 8003db0:	2300      	movs	r3, #0
 8003db2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003db4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003db8:	460b      	mov	r3, r1
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	d034      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dcc:	d007      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003dce:	e011      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd0:	4b12      	ldr	r3, [pc, #72]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	4a11      	ldr	r2, [pc, #68]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ddc:	e00e      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de2:	3308      	adds	r3, #8
 8003de4:	2102      	movs	r1, #2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fca4 	bl	8004734 <RCCEx_PLL2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003df2:	e003      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10d      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e04:	4b05      	ldr	r3, [pc, #20]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e12:	4a02      	ldr	r2, [pc, #8]	@ (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e14:	430b      	orrs	r3, r1
 8003e16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e18:	e006      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003e1a:	bf00      	nop
 8003e1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e36:	2300      	movs	r3, #0
 8003e38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4313      	orrs	r3, r2
 8003e42:	d00c      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e48:	3328      	adds	r3, #40	@ 0x28
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fd23 	bl	8004898 <RCCEx_PLL3_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e70:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e74:	460b      	mov	r3, r1
 8003e76:	4313      	orrs	r3, r2
 8003e78:	d038      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e86:	d018      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003e88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e8c:	d811      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e92:	d014      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e98:	d80b      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d011      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea4:	4bc3      	ldr	r3, [pc, #780]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	4ac2      	ldr	r2, [pc, #776]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eb8:	e004      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003eba:	bf00      	nop
 8003ebc:	e002      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ecc:	4bb9      	ldr	r3, [pc, #740]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003edc:	4ab5      	ldr	r2, [pc, #724]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ee2:	e003      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003ef8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003efa:	2300      	movs	r3, #0
 8003efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003efe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003f02:	460b      	mov	r3, r1
 8003f04:	4313      	orrs	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f08:	4baa      	ldr	r3, [pc, #680]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f16:	4aa7      	ldr	r2, [pc, #668]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003f28:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003f32:	460b      	mov	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f38:	4b9e      	ldr	r3, [pc, #632]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003f48:	4a9a      	ldr	r2, [pc, #616]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f4a:	430b      	orrs	r3, r1
 8003f4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003f64:	460b      	mov	r3, r1
 8003f66:	4313      	orrs	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f6a:	4b92      	ldr	r3, [pc, #584]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f6e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f78:	4a8e      	ldr	r2, [pc, #568]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003f8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f94:	460b      	mov	r3, r1
 8003f96:	4313      	orrs	r3, r2
 8003f98:	d00e      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f9a:	4b86      	ldr	r3, [pc, #536]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	4a85      	ldr	r2, [pc, #532]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fa0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003fa4:	6113      	str	r3, [r2, #16]
 8003fa6:	4b83      	ldr	r3, [pc, #524]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fa8:	6919      	ldr	r1, [r3, #16]
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003fb2:	4a80      	ldr	r2, [pc, #512]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	d009      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003fd4:	4b77      	ldr	r3, [pc, #476]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe2:	4a74      	ldr	r2, [pc, #464]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ffa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003ffe:	460b      	mov	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004004:	4b6b      	ldr	r3, [pc, #428]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004008:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004014:	4a67      	ldr	r2, [pc, #412]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004016:	430b      	orrs	r3, r1
 8004018:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800401a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	2100      	movs	r1, #0
 8004024:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800402c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004030:	460b      	mov	r3, r1
 8004032:	4313      	orrs	r3, r2
 8004034:	d011      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403a:	3308      	adds	r3, #8
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fb78 	bl	8004734 <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800404a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	2100      	movs	r1, #0
 8004064:	6239      	str	r1, [r7, #32]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
 800406c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004070:	460b      	mov	r3, r1
 8004072:	4313      	orrs	r3, r2
 8004074:	d011      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407a:	3308      	adds	r3, #8
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fb58 	bl	8004734 <RCCEx_PLL2_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800408a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	2100      	movs	r1, #0
 80040a4:	61b9      	str	r1, [r7, #24]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	61fb      	str	r3, [r7, #28]
 80040ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80040b0:	460b      	mov	r3, r1
 80040b2:	4313      	orrs	r3, r2
 80040b4:	d011      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ba:	3308      	adds	r3, #8
 80040bc:	2102      	movs	r1, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fb38 	bl	8004734 <RCCEx_PLL2_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80040ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	2100      	movs	r1, #0
 80040e4:	6139      	str	r1, [r7, #16]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040f0:	460b      	mov	r3, r1
 80040f2:	4313      	orrs	r3, r2
 80040f4:	d011      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fa:	3328      	adds	r3, #40	@ 0x28
 80040fc:	2100      	movs	r1, #0
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fbca 	bl	8004898 <RCCEx_PLL3_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800410a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800411a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	2100      	movs	r1, #0
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004130:	460b      	mov	r3, r1
 8004132:	4313      	orrs	r3, r2
 8004134:	d011      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413a:	3328      	adds	r3, #40	@ 0x28
 800413c:	2101      	movs	r1, #1
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fbaa 	bl	8004898 <RCCEx_PLL3_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800414a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800415a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	2100      	movs	r1, #0
 8004164:	6039      	str	r1, [r7, #0]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004170:	460b      	mov	r3, r1
 8004172:	4313      	orrs	r3, r2
 8004174:	d011      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	3328      	adds	r3, #40	@ 0x28
 800417c:	2102      	movs	r1, #2
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fb8a 	bl	8004898 <RCCEx_PLL3_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800418a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800419a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80041ae:	46bd      	mov	sp, r7
 80041b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b4:	58024400 	.word	0x58024400

080041b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80041bc:	f7fe fd96 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 80041c0:	4602      	mov	r2, r0
 80041c2:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	4904      	ldr	r1, [pc, #16]	@ (80041e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80041ce:	5ccb      	ldrb	r3, [r1, r3]
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80041d8:	4618      	mov	r0, r3
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	58024400 	.word	0x58024400
 80041e0:	080073b8 	.word	0x080073b8

080041e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b089      	sub	sp, #36	@ 0x24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041ec:	4ba1      	ldr	r3, [pc, #644]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f0:	f003 0303 	and.w	r3, r3, #3
 80041f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80041f6:	4b9f      	ldr	r3, [pc, #636]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	0b1b      	lsrs	r3, r3, #12
 80041fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004200:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004202:	4b9c      	ldr	r3, [pc, #624]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800420e:	4b99      	ldr	r3, [pc, #612]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004212:	08db      	lsrs	r3, r3, #3
 8004214:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8111 	beq.w	8004454 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b02      	cmp	r3, #2
 8004236:	f000 8083 	beq.w	8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b02      	cmp	r3, #2
 800423e:	f200 80a1 	bhi.w	8004384 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d056      	beq.n	80042fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800424e:	e099      	b.n	8004384 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004250:	4b88      	ldr	r3, [pc, #544]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d02d      	beq.n	80042b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800425c:	4b85      	ldr	r3, [pc, #532]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	08db      	lsrs	r3, r3, #3
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	4a84      	ldr	r2, [pc, #528]	@ (8004478 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	ee07 3a90 	vmov	s15, r3
 8004274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004286:	4b7b      	ldr	r3, [pc, #492]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428e:	ee07 3a90 	vmov	s15, r3
 8004292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004296:	ed97 6a03 	vldr	s12, [r7, #12]
 800429a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800447c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800429e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80042b6:	e087      	b.n	80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	ee07 3a90 	vmov	s15, r3
 80042be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004480 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80042c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042da:	ed97 6a03 	vldr	s12, [r7, #12]
 80042de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800447c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042fa:	e065      	b.n	80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800430a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800430e:	4b59      	ldr	r3, [pc, #356]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800431e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004322:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800447c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800432a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800432e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800433a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800433e:	e043      	b.n	80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	ee07 3a90 	vmov	s15, r3
 8004346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004488 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800434e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004352:	4b48      	ldr	r3, [pc, #288]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	ed97 6a03 	vldr	s12, [r7, #12]
 8004366:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800447c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800436a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800436e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004382:	e021      	b.n	80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	ee07 3a90 	vmov	s15, r3
 800438a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004484 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b37      	ldr	r3, [pc, #220]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800447c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80043c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043cc:	0a5b      	lsrs	r3, r3, #9
 80043ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80043e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ee:	ee17 2a90 	vmov	r2, s15
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80043f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004400:	ee07 3a90 	vmov	s15, r3
 8004404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004408:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800440c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004410:	edd7 6a07 	vldr	s13, [r7, #28]
 8004414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441c:	ee17 2a90 	vmov	r2, s15
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004424:	4b13      	ldr	r3, [pc, #76]	@ (8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004428:	0e1b      	lsrs	r3, r3, #24
 800442a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004436:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800443a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800443e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800444a:	ee17 2a90 	vmov	r2, s15
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004452:	e008      	b.n	8004466 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
}
 8004466:	bf00      	nop
 8004468:	3724      	adds	r7, #36	@ 0x24
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	58024400 	.word	0x58024400
 8004478:	03d09000 	.word	0x03d09000
 800447c:	46000000 	.word	0x46000000
 8004480:	4c742400 	.word	0x4c742400
 8004484:	4a742400 	.word	0x4a742400
 8004488:	4bbebc20 	.word	0x4bbebc20

0800448c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	@ 0x24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004494:	4ba1      	ldr	r3, [pc, #644]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800449e:	4b9f      	ldr	r3, [pc, #636]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	0d1b      	lsrs	r3, r3, #20
 80044a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80044aa:	4b9c      	ldr	r3, [pc, #624]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80044b6:	4b99      	ldr	r3, [pc, #612]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ba:	08db      	lsrs	r3, r3, #3
 80044bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8111 	beq.w	80046fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	f000 8083 	beq.w	80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f200 80a1 	bhi.w	800462c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d056      	beq.n	80045a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80044f6:	e099      	b.n	800462c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044f8:	4b88      	ldr	r3, [pc, #544]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d02d      	beq.n	8004560 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004504:	4b85      	ldr	r3, [pc, #532]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	08db      	lsrs	r3, r3, #3
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	4a84      	ldr	r2, [pc, #528]	@ (8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
 8004514:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452e:	4b7b      	ldr	r3, [pc, #492]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004542:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800454e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800455e:	e087      	b.n	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004728 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800456e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004572:	4b6a      	ldr	r3, [pc, #424]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004582:	ed97 6a03 	vldr	s12, [r7, #12]
 8004586:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800458a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045a2:	e065      	b.n	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800472c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b6:	4b59      	ldr	r3, [pc, #356]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045e6:	e043      	b.n	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004730 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80045f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fa:	4b48      	ldr	r3, [pc, #288]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460a:	ed97 6a03 	vldr	s12, [r7, #12]
 800460e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800462a:	e021      	b.n	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004636:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800472c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b37      	ldr	r3, [pc, #220]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004652:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004724 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800466e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004670:	4b2a      	ldr	r3, [pc, #168]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	0a5b      	lsrs	r3, r3, #9
 8004676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800468a:	edd7 6a07 	vldr	s13, [r7, #28]
 800468e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004696:	ee17 2a90 	vmov	r2, s15
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800469e:	4b1f      	ldr	r3, [pc, #124]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a8:	ee07 3a90 	vmov	s15, r3
 80046ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80046bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c4:	ee17 2a90 	vmov	r2, s15
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80046cc:	4b13      	ldr	r3, [pc, #76]	@ (800471c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d0:	0e1b      	lsrs	r3, r3, #24
 80046d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80046ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f2:	ee17 2a90 	vmov	r2, s15
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80046fa:	e008      	b.n	800470e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	609a      	str	r2, [r3, #8]
}
 800470e:	bf00      	nop
 8004710:	3724      	adds	r7, #36	@ 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	58024400 	.word	0x58024400
 8004720:	03d09000 	.word	0x03d09000
 8004724:	46000000 	.word	0x46000000
 8004728:	4c742400 	.word	0x4c742400
 800472c:	4a742400 	.word	0x4a742400
 8004730:	4bbebc20 	.word	0x4bbebc20

08004734 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004742:	4b53      	ldr	r3, [pc, #332]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 8004744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b03      	cmp	r3, #3
 800474c:	d101      	bne.n	8004752 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e099      	b.n	8004886 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004752:	4b4f      	ldr	r3, [pc, #316]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a4e      	ldr	r2, [pc, #312]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 8004758:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800475c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800475e:	f7fc ff2d 	bl	80015bc <HAL_GetTick>
 8004762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004764:	e008      	b.n	8004778 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004766:	f7fc ff29 	bl	80015bc <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e086      	b.n	8004886 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004778:	4b45      	ldr	r3, [pc, #276]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f0      	bne.n	8004766 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004784:	4b42      	ldr	r3, [pc, #264]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 8004786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004788:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	031b      	lsls	r3, r3, #12
 8004792:	493f      	ldr	r1, [pc, #252]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 8004794:	4313      	orrs	r3, r2
 8004796:	628b      	str	r3, [r1, #40]	@ 0x28
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	3b01      	subs	r3, #1
 800479e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	025b      	lsls	r3, r3, #9
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	041b      	lsls	r3, r3, #16
 80047b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	061b      	lsls	r3, r3, #24
 80047c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80047c8:	4931      	ldr	r1, [pc, #196]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80047ce:	4b30      	ldr	r3, [pc, #192]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	492d      	ldr	r1, [pc, #180]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80047e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 80047e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e4:	f023 0220 	bic.w	r2, r3, #32
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	4928      	ldr	r1, [pc, #160]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80047f2:	4b27      	ldr	r3, [pc, #156]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f6:	4a26      	ldr	r2, [pc, #152]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 80047f8:	f023 0310 	bic.w	r3, r3, #16
 80047fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047fe:	4b24      	ldr	r3, [pc, #144]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 8004800:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004802:	4b24      	ldr	r3, [pc, #144]	@ (8004894 <RCCEx_PLL2_Config+0x160>)
 8004804:	4013      	ands	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	69d2      	ldr	r2, [r2, #28]
 800480a:	00d2      	lsls	r2, r2, #3
 800480c:	4920      	ldr	r1, [pc, #128]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004812:	4b1f      	ldr	r3, [pc, #124]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	4a1e      	ldr	r2, [pc, #120]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 8004818:	f043 0310 	orr.w	r3, r3, #16
 800481c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d106      	bne.n	8004832 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004824:	4b1a      	ldr	r3, [pc, #104]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	4a19      	ldr	r2, [pc, #100]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 800482a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800482e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004830:	e00f      	b.n	8004852 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d106      	bne.n	8004846 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004838:	4b15      	ldr	r3, [pc, #84]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 800483a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483c:	4a14      	ldr	r2, [pc, #80]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 800483e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004842:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004844:	e005      	b.n	8004852 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004846:	4b12      	ldr	r3, [pc, #72]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 8004848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484a:	4a11      	ldr	r2, [pc, #68]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 800484c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004850:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004852:	4b0f      	ldr	r3, [pc, #60]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a0e      	ldr	r2, [pc, #56]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 8004858:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800485c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485e:	f7fc fead 	bl	80015bc <HAL_GetTick>
 8004862:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004864:	e008      	b.n	8004878 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004866:	f7fc fea9 	bl	80015bc <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e006      	b.n	8004886 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004878:	4b05      	ldr	r3, [pc, #20]	@ (8004890 <RCCEx_PLL2_Config+0x15c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	58024400 	.word	0x58024400
 8004894:	ffff0007 	.word	0xffff0007

08004898 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048a6:	4b53      	ldr	r3, [pc, #332]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 80048a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d101      	bne.n	80048b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e099      	b.n	80049ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048b6:	4b4f      	ldr	r3, [pc, #316]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a4e      	ldr	r2, [pc, #312]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 80048bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c2:	f7fc fe7b 	bl	80015bc <HAL_GetTick>
 80048c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048c8:	e008      	b.n	80048dc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048ca:	f7fc fe77 	bl	80015bc <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e086      	b.n	80049ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048dc:	4b45      	ldr	r3, [pc, #276]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1f0      	bne.n	80048ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048e8:	4b42      	ldr	r3, [pc, #264]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 80048ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	051b      	lsls	r3, r3, #20
 80048f6:	493f      	ldr	r1, [pc, #252]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	3b01      	subs	r3, #1
 8004902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	3b01      	subs	r3, #1
 800490c:	025b      	lsls	r3, r3, #9
 800490e:	b29b      	uxth	r3, r3
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	3b01      	subs	r3, #1
 8004918:	041b      	lsls	r3, r3, #16
 800491a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	3b01      	subs	r3, #1
 8004926:	061b      	lsls	r3, r3, #24
 8004928:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800492c:	4931      	ldr	r1, [pc, #196]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 800492e:	4313      	orrs	r3, r2
 8004930:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004932:	4b30      	ldr	r3, [pc, #192]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 8004934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004936:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	492d      	ldr	r1, [pc, #180]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 8004940:	4313      	orrs	r3, r2
 8004942:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004944:	4b2b      	ldr	r3, [pc, #172]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	4928      	ldr	r1, [pc, #160]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 8004952:	4313      	orrs	r3, r2
 8004954:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004956:	4b27      	ldr	r3, [pc, #156]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	4a26      	ldr	r2, [pc, #152]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 800495c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004960:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004962:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 8004964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004966:	4b24      	ldr	r3, [pc, #144]	@ (80049f8 <RCCEx_PLL3_Config+0x160>)
 8004968:	4013      	ands	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	69d2      	ldr	r2, [r2, #28]
 800496e:	00d2      	lsls	r2, r2, #3
 8004970:	4920      	ldr	r1, [pc, #128]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004976:	4b1f      	ldr	r3, [pc, #124]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 800497c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004980:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004988:	4b1a      	ldr	r3, [pc, #104]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	4a19      	ldr	r2, [pc, #100]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 800498e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004992:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004994:	e00f      	b.n	80049b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d106      	bne.n	80049aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800499c:	4b15      	ldr	r3, [pc, #84]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 800499e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a0:	4a14      	ldr	r2, [pc, #80]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 80049a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80049a8:	e005      	b.n	80049b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049aa:	4b12      	ldr	r3, [pc, #72]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ae:	4a11      	ldr	r2, [pc, #68]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 80049b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049b6:	4b0f      	ldr	r3, [pc, #60]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a0e      	ldr	r2, [pc, #56]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c2:	f7fc fdfb 	bl	80015bc <HAL_GetTick>
 80049c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049c8:	e008      	b.n	80049dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80049ca:	f7fc fdf7 	bl	80015bc <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e006      	b.n	80049ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049dc:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <RCCEx_PLL3_Config+0x15c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0f0      	beq.n	80049ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	58024400 	.word	0x58024400
 80049f8:	ffff0007 	.word	0xffff0007

080049fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e049      	b.n	8004aa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fc fa2a 	bl	8000e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f000 fa66 	bl	8004f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d020      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d01b      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f06f 0202 	mvn.w	r2, #2
 8004ade:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f9eb 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8004afa:	e005      	b.n	8004b08 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f9dd 	bl	8004ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f9ee 	bl	8004ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d020      	beq.n	8004b5a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01b      	beq.n	8004b5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0204 	mvn.w	r2, #4
 8004b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f9c5 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8004b46:	e005      	b.n	8004b54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f9b7 	bl	8004ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f9c8 	bl	8004ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d020      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01b      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f06f 0208 	mvn.w	r2, #8
 8004b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f99f 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8004b92:	e005      	b.n	8004ba0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f991 	bl	8004ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f9a2 	bl	8004ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d020      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01b      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f06f 0210 	mvn.w	r2, #16
 8004bc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2208      	movs	r2, #8
 8004bc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f979 	bl	8004ed0 <HAL_TIM_IC_CaptureCallback>
 8004bde:	e005      	b.n	8004bec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f96b 	bl	8004ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f97c 	bl	8004ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00c      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0201 	mvn.w	r2, #1
 8004c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f949 	bl	8004ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00c      	beq.n	8004c44 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fb3a 	bl	80052b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00c      	beq.n	8004c68 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fb32 	bl	80052cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f936 	bl	8004ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00c      	beq.n	8004cb0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0220 	mvn.w	r2, #32
 8004ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fafa 	bl	80052a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e0dc      	b.n	8004e8e <HAL_TIM_ConfigClockSource+0x1d6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	4b6a      	ldr	r3, [pc, #424]	@ (8004e98 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a64      	ldr	r2, [pc, #400]	@ (8004e9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	f000 80a9 	beq.w	8004e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8004d10:	4a62      	ldr	r2, [pc, #392]	@ (8004e9c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	f200 80ae 	bhi.w	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d18:	4a61      	ldr	r2, [pc, #388]	@ (8004ea0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	f000 80a1 	beq.w	8004e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8004d20:	4a5f      	ldr	r2, [pc, #380]	@ (8004ea0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	f200 80a6 	bhi.w	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d28:	4a5e      	ldr	r2, [pc, #376]	@ (8004ea4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	f000 8099 	beq.w	8004e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8004d30:	4a5c      	ldr	r2, [pc, #368]	@ (8004ea4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	f200 809e 	bhi.w	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d3c:	f000 8091 	beq.w	8004e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8004d40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004d44:	f200 8096 	bhi.w	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d4c:	f000 8089 	beq.w	8004e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8004d50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d54:	f200 808e 	bhi.w	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d5c:	d03e      	beq.n	8004ddc <HAL_TIM_ConfigClockSource+0x124>
 8004d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d62:	f200 8087 	bhi.w	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d6a:	f000 8086 	beq.w	8004e7a <HAL_TIM_ConfigClockSource+0x1c2>
 8004d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d72:	d87f      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d74:	2b70      	cmp	r3, #112	@ 0x70
 8004d76:	d01a      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0xf6>
 8004d78:	2b70      	cmp	r3, #112	@ 0x70
 8004d7a:	d87b      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d7c:	2b60      	cmp	r3, #96	@ 0x60
 8004d7e:	d050      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x16a>
 8004d80:	2b60      	cmp	r3, #96	@ 0x60
 8004d82:	d877      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d84:	2b50      	cmp	r3, #80	@ 0x50
 8004d86:	d03c      	beq.n	8004e02 <HAL_TIM_ConfigClockSource+0x14a>
 8004d88:	2b50      	cmp	r3, #80	@ 0x50
 8004d8a:	d873      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d8c:	2b40      	cmp	r3, #64	@ 0x40
 8004d8e:	d058      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x18a>
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	d86f      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d94:	2b30      	cmp	r3, #48	@ 0x30
 8004d96:	d064      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8004d98:	2b30      	cmp	r3, #48	@ 0x30
 8004d9a:	d86b      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d060      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d867      	bhi.n	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d05c      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d05a      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8004dac:	e062      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dbe:	f000 f9c3 	bl	8005148 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	609a      	str	r2, [r3, #8]
      break;
 8004dda:	e04f      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dec:	f000 f9ac 	bl	8005148 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dfe:	609a      	str	r2, [r3, #8]
      break;
 8004e00:	e03c      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f000 f91c 	bl	800504c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2150      	movs	r1, #80	@ 0x50
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f976 	bl	800510c <TIM_ITRx_SetConfig>
      break;
 8004e20:	e02c      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f000 f93b 	bl	80050aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2160      	movs	r1, #96	@ 0x60
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f966 	bl	800510c <TIM_ITRx_SetConfig>
      break;
 8004e40:	e01c      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f000 f8fc 	bl	800504c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2140      	movs	r1, #64	@ 0x40
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f956 	bl	800510c <TIM_ITRx_SetConfig>
      break;
 8004e60:	e00c      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f000 f94d 	bl	800510c <TIM_ITRx_SetConfig>
      break;
 8004e72:	e003      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
      break;
 8004e78:	e000      	b.n	8004e7c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	ffceff88 	.word	0xffceff88
 8004e9c:	00100040 	.word	0x00100040
 8004ea0:	00100030 	.word	0x00100030
 8004ea4:	00100020 	.word	0x00100020

08004ea8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a43      	ldr	r2, [pc, #268]	@ (800502c <TIM_Base_SetConfig+0x120>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d013      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2a:	d00f      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a40      	ldr	r2, [pc, #256]	@ (8005030 <TIM_Base_SetConfig+0x124>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a3f      	ldr	r2, [pc, #252]	@ (8005034 <TIM_Base_SetConfig+0x128>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a3e      	ldr	r2, [pc, #248]	@ (8005038 <TIM_Base_SetConfig+0x12c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_Base_SetConfig+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3d      	ldr	r2, [pc, #244]	@ (800503c <TIM_Base_SetConfig+0x130>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d108      	bne.n	8004f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a32      	ldr	r2, [pc, #200]	@ (800502c <TIM_Base_SetConfig+0x120>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01f      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6c:	d01b      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a2f      	ldr	r2, [pc, #188]	@ (8005030 <TIM_Base_SetConfig+0x124>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d017      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2e      	ldr	r2, [pc, #184]	@ (8005034 <TIM_Base_SetConfig+0x128>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a2d      	ldr	r2, [pc, #180]	@ (8005038 <TIM_Base_SetConfig+0x12c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00f      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2c      	ldr	r2, [pc, #176]	@ (800503c <TIM_Base_SetConfig+0x130>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00b      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a2b      	ldr	r2, [pc, #172]	@ (8005040 <TIM_Base_SetConfig+0x134>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	@ (8005044 <TIM_Base_SetConfig+0x138>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <TIM_Base_SetConfig+0x9a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a29      	ldr	r2, [pc, #164]	@ (8005048 <TIM_Base_SetConfig+0x13c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d108      	bne.n	8004fb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a14      	ldr	r2, [pc, #80]	@ (800502c <TIM_Base_SetConfig+0x120>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00f      	beq.n	8004ffe <TIM_Base_SetConfig+0xf2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a16      	ldr	r2, [pc, #88]	@ (800503c <TIM_Base_SetConfig+0x130>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <TIM_Base_SetConfig+0xf2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a15      	ldr	r2, [pc, #84]	@ (8005040 <TIM_Base_SetConfig+0x134>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d007      	beq.n	8004ffe <TIM_Base_SetConfig+0xf2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a14      	ldr	r2, [pc, #80]	@ (8005044 <TIM_Base_SetConfig+0x138>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_Base_SetConfig+0xf2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a13      	ldr	r2, [pc, #76]	@ (8005048 <TIM_Base_SetConfig+0x13c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d103      	bne.n	8005006 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f043 0204 	orr.w	r2, r3, #4
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	601a      	str	r2, [r3, #0]
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40010400 	.word	0x40010400
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800

0800504c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f023 0201 	bic.w	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f023 030a 	bic.w	r3, r3, #10
 8005088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b087      	sub	sp, #28
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f023 0210 	bic.w	r2, r3, #16
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	031b      	lsls	r3, r3, #12
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
	...

0800510c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4b09      	ldr	r3, [pc, #36]	@ (8005144 <TIM_ITRx_SetConfig+0x38>)
 8005120:	4013      	ands	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	f043 0307 	orr.w	r3, r3, #7
 800512e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	609a      	str	r2, [r3, #8]
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	ffcfff8f 	.word	0xffcfff8f

08005148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	021a      	lsls	r2, r3, #8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	431a      	orrs	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4313      	orrs	r3, r2
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	609a      	str	r2, [r3, #8]
}
 800517c:	bf00      	nop
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800519c:	2302      	movs	r3, #2
 800519e:	e06d      	b.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a30      	ldr	r2, [pc, #192]	@ (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2f      	ldr	r2, [pc, #188]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d108      	bne.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80051da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a20      	ldr	r2, [pc, #128]	@ (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d022      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005212:	d01d      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1d      	ldr	r2, [pc, #116]	@ (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d018      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1c      	ldr	r2, [pc, #112]	@ (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d013      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1a      	ldr	r2, [pc, #104]	@ (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a15      	ldr	r2, [pc, #84]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d009      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a16      	ldr	r2, [pc, #88]	@ (800529c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a15      	ldr	r2, [pc, #84]	@ (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10c      	bne.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005256:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	4313      	orrs	r3, r2
 8005260:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40010000 	.word	0x40010000
 800528c:	40010400 	.word	0x40010400
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40001800 	.word	0x40001800
 80052a0:	40014000 	.word	0x40014000

080052a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e042      	b.n	8005378 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f83b 	bl	8005380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2224      	movs	r2, #36	@ 0x24
 800530e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fe28 	bl	8005f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f8bd 	bl	80054b0 <UART_SetConfig>
 8005336:	4603      	mov	r3, r0
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e01b      	b.n	8005378 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800534e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800535e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fea7 	bl	80060c4 <UART_CheckIdleState>
 8005376:	4603      	mov	r3, r0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	@ 0x28
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d17b      	bne.n	80054a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_UART_Transmit+0x26>
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e074      	b.n	80054a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2221      	movs	r2, #33	@ 0x21
 80053ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ce:	f7fc f8f5 	bl	80015bc <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ec:	d108      	bne.n	8005400 <HAL_UART_Transmit+0x6c>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e003      	b.n	8005408 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005408:	e030      	b.n	800546c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	2180      	movs	r1, #128	@ 0x80
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 feff 	bl	8006218 <UART_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e03d      	b.n	80054a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10b      	bne.n	800544a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005440:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	3302      	adds	r3, #2
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	e007      	b.n	800545a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	781a      	ldrb	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	3301      	adds	r3, #1
 8005458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1c8      	bne.n	800540a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2200      	movs	r2, #0
 8005480:	2140      	movs	r1, #64	@ 0x40
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fec8 	bl	8006218 <UART_WaitOnFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e006      	b.n	80054a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e000      	b.n	80054a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80054a6:	2302      	movs	r3, #2
  }
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3720      	adds	r7, #32
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054b4:	b092      	sub	sp, #72	@ 0x48
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	431a      	orrs	r2, r3
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	431a      	orrs	r2, r3
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4bbe      	ldr	r3, [pc, #760]	@ (80057d8 <UART_SetConfig+0x328>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	6812      	ldr	r2, [r2, #0]
 80054e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80054e8:	430b      	orrs	r3, r1
 80054ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4ab3      	ldr	r2, [pc, #716]	@ (80057dc <UART_SetConfig+0x32c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d004      	beq.n	800551c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005518:	4313      	orrs	r3, r2
 800551a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	4baf      	ldr	r3, [pc, #700]	@ (80057e0 <UART_SetConfig+0x330>)
 8005524:	4013      	ands	r3, r2
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800552c:	430b      	orrs	r3, r1
 800552e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	f023 010f 	bic.w	r1, r3, #15
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4aa6      	ldr	r2, [pc, #664]	@ (80057e4 <UART_SetConfig+0x334>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d177      	bne.n	8005640 <UART_SetConfig+0x190>
 8005550:	4ba5      	ldr	r3, [pc, #660]	@ (80057e8 <UART_SetConfig+0x338>)
 8005552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005554:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005558:	2b28      	cmp	r3, #40	@ 0x28
 800555a:	d86d      	bhi.n	8005638 <UART_SetConfig+0x188>
 800555c:	a201      	add	r2, pc, #4	@ (adr r2, 8005564 <UART_SetConfig+0xb4>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005609 	.word	0x08005609
 8005568:	08005639 	.word	0x08005639
 800556c:	08005639 	.word	0x08005639
 8005570:	08005639 	.word	0x08005639
 8005574:	08005639 	.word	0x08005639
 8005578:	08005639 	.word	0x08005639
 800557c:	08005639 	.word	0x08005639
 8005580:	08005639 	.word	0x08005639
 8005584:	08005611 	.word	0x08005611
 8005588:	08005639 	.word	0x08005639
 800558c:	08005639 	.word	0x08005639
 8005590:	08005639 	.word	0x08005639
 8005594:	08005639 	.word	0x08005639
 8005598:	08005639 	.word	0x08005639
 800559c:	08005639 	.word	0x08005639
 80055a0:	08005639 	.word	0x08005639
 80055a4:	08005619 	.word	0x08005619
 80055a8:	08005639 	.word	0x08005639
 80055ac:	08005639 	.word	0x08005639
 80055b0:	08005639 	.word	0x08005639
 80055b4:	08005639 	.word	0x08005639
 80055b8:	08005639 	.word	0x08005639
 80055bc:	08005639 	.word	0x08005639
 80055c0:	08005639 	.word	0x08005639
 80055c4:	08005621 	.word	0x08005621
 80055c8:	08005639 	.word	0x08005639
 80055cc:	08005639 	.word	0x08005639
 80055d0:	08005639 	.word	0x08005639
 80055d4:	08005639 	.word	0x08005639
 80055d8:	08005639 	.word	0x08005639
 80055dc:	08005639 	.word	0x08005639
 80055e0:	08005639 	.word	0x08005639
 80055e4:	08005629 	.word	0x08005629
 80055e8:	08005639 	.word	0x08005639
 80055ec:	08005639 	.word	0x08005639
 80055f0:	08005639 	.word	0x08005639
 80055f4:	08005639 	.word	0x08005639
 80055f8:	08005639 	.word	0x08005639
 80055fc:	08005639 	.word	0x08005639
 8005600:	08005639 	.word	0x08005639
 8005604:	08005631 	.word	0x08005631
 8005608:	2301      	movs	r3, #1
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560e:	e222      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005610:	2304      	movs	r3, #4
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005616:	e21e      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005618:	2308      	movs	r3, #8
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561e:	e21a      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005620:	2310      	movs	r3, #16
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005626:	e216      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005628:	2320      	movs	r3, #32
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562e:	e212      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005630:	2340      	movs	r3, #64	@ 0x40
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005636:	e20e      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005638:	2380      	movs	r3, #128	@ 0x80
 800563a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563e:	e20a      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a69      	ldr	r2, [pc, #420]	@ (80057ec <UART_SetConfig+0x33c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d130      	bne.n	80056ac <UART_SetConfig+0x1fc>
 800564a:	4b67      	ldr	r3, [pc, #412]	@ (80057e8 <UART_SetConfig+0x338>)
 800564c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	2b05      	cmp	r3, #5
 8005654:	d826      	bhi.n	80056a4 <UART_SetConfig+0x1f4>
 8005656:	a201      	add	r2, pc, #4	@ (adr r2, 800565c <UART_SetConfig+0x1ac>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	08005675 	.word	0x08005675
 8005660:	0800567d 	.word	0x0800567d
 8005664:	08005685 	.word	0x08005685
 8005668:	0800568d 	.word	0x0800568d
 800566c:	08005695 	.word	0x08005695
 8005670:	0800569d 	.word	0x0800569d
 8005674:	2300      	movs	r3, #0
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e1ec      	b.n	8005a56 <UART_SetConfig+0x5a6>
 800567c:	2304      	movs	r3, #4
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005682:	e1e8      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005684:	2308      	movs	r3, #8
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568a:	e1e4      	b.n	8005a56 <UART_SetConfig+0x5a6>
 800568c:	2310      	movs	r3, #16
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005692:	e1e0      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005694:	2320      	movs	r3, #32
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569a:	e1dc      	b.n	8005a56 <UART_SetConfig+0x5a6>
 800569c:	2340      	movs	r3, #64	@ 0x40
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a2:	e1d8      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80056a4:	2380      	movs	r3, #128	@ 0x80
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056aa:	e1d4      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a4f      	ldr	r2, [pc, #316]	@ (80057f0 <UART_SetConfig+0x340>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d130      	bne.n	8005718 <UART_SetConfig+0x268>
 80056b6:	4b4c      	ldr	r3, [pc, #304]	@ (80057e8 <UART_SetConfig+0x338>)
 80056b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d826      	bhi.n	8005710 <UART_SetConfig+0x260>
 80056c2:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <UART_SetConfig+0x218>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	080056e1 	.word	0x080056e1
 80056cc:	080056e9 	.word	0x080056e9
 80056d0:	080056f1 	.word	0x080056f1
 80056d4:	080056f9 	.word	0x080056f9
 80056d8:	08005701 	.word	0x08005701
 80056dc:	08005709 	.word	0x08005709
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e6:	e1b6      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80056e8:	2304      	movs	r3, #4
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ee:	e1b2      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80056f0:	2308      	movs	r3, #8
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f6:	e1ae      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80056f8:	2310      	movs	r3, #16
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fe:	e1aa      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005700:	2320      	movs	r3, #32
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005706:	e1a6      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005708:	2340      	movs	r3, #64	@ 0x40
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570e:	e1a2      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005710:	2380      	movs	r3, #128	@ 0x80
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005716:	e19e      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a35      	ldr	r2, [pc, #212]	@ (80057f4 <UART_SetConfig+0x344>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d130      	bne.n	8005784 <UART_SetConfig+0x2d4>
 8005722:	4b31      	ldr	r3, [pc, #196]	@ (80057e8 <UART_SetConfig+0x338>)
 8005724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	2b05      	cmp	r3, #5
 800572c:	d826      	bhi.n	800577c <UART_SetConfig+0x2cc>
 800572e:	a201      	add	r2, pc, #4	@ (adr r2, 8005734 <UART_SetConfig+0x284>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	0800574d 	.word	0x0800574d
 8005738:	08005755 	.word	0x08005755
 800573c:	0800575d 	.word	0x0800575d
 8005740:	08005765 	.word	0x08005765
 8005744:	0800576d 	.word	0x0800576d
 8005748:	08005775 	.word	0x08005775
 800574c:	2300      	movs	r3, #0
 800574e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005752:	e180      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005754:	2304      	movs	r3, #4
 8005756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575a:	e17c      	b.n	8005a56 <UART_SetConfig+0x5a6>
 800575c:	2308      	movs	r3, #8
 800575e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005762:	e178      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005764:	2310      	movs	r3, #16
 8005766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576a:	e174      	b.n	8005a56 <UART_SetConfig+0x5a6>
 800576c:	2320      	movs	r3, #32
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005772:	e170      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005774:	2340      	movs	r3, #64	@ 0x40
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577a:	e16c      	b.n	8005a56 <UART_SetConfig+0x5a6>
 800577c:	2380      	movs	r3, #128	@ 0x80
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005782:	e168      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1b      	ldr	r2, [pc, #108]	@ (80057f8 <UART_SetConfig+0x348>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d142      	bne.n	8005814 <UART_SetConfig+0x364>
 800578e:	4b16      	ldr	r3, [pc, #88]	@ (80057e8 <UART_SetConfig+0x338>)
 8005790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	2b05      	cmp	r3, #5
 8005798:	d838      	bhi.n	800580c <UART_SetConfig+0x35c>
 800579a:	a201      	add	r2, pc, #4	@ (adr r2, 80057a0 <UART_SetConfig+0x2f0>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	080057b9 	.word	0x080057b9
 80057a4:	080057c1 	.word	0x080057c1
 80057a8:	080057c9 	.word	0x080057c9
 80057ac:	080057d1 	.word	0x080057d1
 80057b0:	080057fd 	.word	0x080057fd
 80057b4:	08005805 	.word	0x08005805
 80057b8:	2300      	movs	r3, #0
 80057ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057be:	e14a      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80057c0:	2304      	movs	r3, #4
 80057c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057c6:	e146      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80057c8:	2308      	movs	r3, #8
 80057ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ce:	e142      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80057d0:	2310      	movs	r3, #16
 80057d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d6:	e13e      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80057d8:	cfff69f3 	.word	0xcfff69f3
 80057dc:	58000c00 	.word	0x58000c00
 80057e0:	11fff4ff 	.word	0x11fff4ff
 80057e4:	40011000 	.word	0x40011000
 80057e8:	58024400 	.word	0x58024400
 80057ec:	40004400 	.word	0x40004400
 80057f0:	40004800 	.word	0x40004800
 80057f4:	40004c00 	.word	0x40004c00
 80057f8:	40005000 	.word	0x40005000
 80057fc:	2320      	movs	r3, #32
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005802:	e128      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005804:	2340      	movs	r3, #64	@ 0x40
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800580a:	e124      	b.n	8005a56 <UART_SetConfig+0x5a6>
 800580c:	2380      	movs	r3, #128	@ 0x80
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005812:	e120      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4acb      	ldr	r2, [pc, #812]	@ (8005b48 <UART_SetConfig+0x698>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d176      	bne.n	800590c <UART_SetConfig+0x45c>
 800581e:	4bcb      	ldr	r3, [pc, #812]	@ (8005b4c <UART_SetConfig+0x69c>)
 8005820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005822:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005826:	2b28      	cmp	r3, #40	@ 0x28
 8005828:	d86c      	bhi.n	8005904 <UART_SetConfig+0x454>
 800582a:	a201      	add	r2, pc, #4	@ (adr r2, 8005830 <UART_SetConfig+0x380>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	080058d5 	.word	0x080058d5
 8005834:	08005905 	.word	0x08005905
 8005838:	08005905 	.word	0x08005905
 800583c:	08005905 	.word	0x08005905
 8005840:	08005905 	.word	0x08005905
 8005844:	08005905 	.word	0x08005905
 8005848:	08005905 	.word	0x08005905
 800584c:	08005905 	.word	0x08005905
 8005850:	080058dd 	.word	0x080058dd
 8005854:	08005905 	.word	0x08005905
 8005858:	08005905 	.word	0x08005905
 800585c:	08005905 	.word	0x08005905
 8005860:	08005905 	.word	0x08005905
 8005864:	08005905 	.word	0x08005905
 8005868:	08005905 	.word	0x08005905
 800586c:	08005905 	.word	0x08005905
 8005870:	080058e5 	.word	0x080058e5
 8005874:	08005905 	.word	0x08005905
 8005878:	08005905 	.word	0x08005905
 800587c:	08005905 	.word	0x08005905
 8005880:	08005905 	.word	0x08005905
 8005884:	08005905 	.word	0x08005905
 8005888:	08005905 	.word	0x08005905
 800588c:	08005905 	.word	0x08005905
 8005890:	080058ed 	.word	0x080058ed
 8005894:	08005905 	.word	0x08005905
 8005898:	08005905 	.word	0x08005905
 800589c:	08005905 	.word	0x08005905
 80058a0:	08005905 	.word	0x08005905
 80058a4:	08005905 	.word	0x08005905
 80058a8:	08005905 	.word	0x08005905
 80058ac:	08005905 	.word	0x08005905
 80058b0:	080058f5 	.word	0x080058f5
 80058b4:	08005905 	.word	0x08005905
 80058b8:	08005905 	.word	0x08005905
 80058bc:	08005905 	.word	0x08005905
 80058c0:	08005905 	.word	0x08005905
 80058c4:	08005905 	.word	0x08005905
 80058c8:	08005905 	.word	0x08005905
 80058cc:	08005905 	.word	0x08005905
 80058d0:	080058fd 	.word	0x080058fd
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058da:	e0bc      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80058dc:	2304      	movs	r3, #4
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e2:	e0b8      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80058e4:	2308      	movs	r3, #8
 80058e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ea:	e0b4      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80058ec:	2310      	movs	r3, #16
 80058ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f2:	e0b0      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80058f4:	2320      	movs	r3, #32
 80058f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fa:	e0ac      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80058fc:	2340      	movs	r3, #64	@ 0x40
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005902:	e0a8      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005904:	2380      	movs	r3, #128	@ 0x80
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590a:	e0a4      	b.n	8005a56 <UART_SetConfig+0x5a6>
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a8f      	ldr	r2, [pc, #572]	@ (8005b50 <UART_SetConfig+0x6a0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d130      	bne.n	8005978 <UART_SetConfig+0x4c8>
 8005916:	4b8d      	ldr	r3, [pc, #564]	@ (8005b4c <UART_SetConfig+0x69c>)
 8005918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	2b05      	cmp	r3, #5
 8005920:	d826      	bhi.n	8005970 <UART_SetConfig+0x4c0>
 8005922:	a201      	add	r2, pc, #4	@ (adr r2, 8005928 <UART_SetConfig+0x478>)
 8005924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005928:	08005941 	.word	0x08005941
 800592c:	08005949 	.word	0x08005949
 8005930:	08005951 	.word	0x08005951
 8005934:	08005959 	.word	0x08005959
 8005938:	08005961 	.word	0x08005961
 800593c:	08005969 	.word	0x08005969
 8005940:	2300      	movs	r3, #0
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e086      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005948:	2304      	movs	r3, #4
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594e:	e082      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005950:	2308      	movs	r3, #8
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005956:	e07e      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005958:	2310      	movs	r3, #16
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595e:	e07a      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005960:	2320      	movs	r3, #32
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005966:	e076      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005968:	2340      	movs	r3, #64	@ 0x40
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596e:	e072      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005970:	2380      	movs	r3, #128	@ 0x80
 8005972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005976:	e06e      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a75      	ldr	r2, [pc, #468]	@ (8005b54 <UART_SetConfig+0x6a4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d130      	bne.n	80059e4 <UART_SetConfig+0x534>
 8005982:	4b72      	ldr	r3, [pc, #456]	@ (8005b4c <UART_SetConfig+0x69c>)
 8005984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2b05      	cmp	r3, #5
 800598c:	d826      	bhi.n	80059dc <UART_SetConfig+0x52c>
 800598e:	a201      	add	r2, pc, #4	@ (adr r2, 8005994 <UART_SetConfig+0x4e4>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	080059ad 	.word	0x080059ad
 8005998:	080059b5 	.word	0x080059b5
 800599c:	080059bd 	.word	0x080059bd
 80059a0:	080059c5 	.word	0x080059c5
 80059a4:	080059cd 	.word	0x080059cd
 80059a8:	080059d5 	.word	0x080059d5
 80059ac:	2300      	movs	r3, #0
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b2:	e050      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80059b4:	2304      	movs	r3, #4
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ba:	e04c      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80059bc:	2308      	movs	r3, #8
 80059be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c2:	e048      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80059c4:	2310      	movs	r3, #16
 80059c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ca:	e044      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80059cc:	2320      	movs	r3, #32
 80059ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d2:	e040      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80059d4:	2340      	movs	r3, #64	@ 0x40
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059da:	e03c      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80059dc:	2380      	movs	r3, #128	@ 0x80
 80059de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e2:	e038      	b.n	8005a56 <UART_SetConfig+0x5a6>
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a5b      	ldr	r2, [pc, #364]	@ (8005b58 <UART_SetConfig+0x6a8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d130      	bne.n	8005a50 <UART_SetConfig+0x5a0>
 80059ee:	4b57      	ldr	r3, [pc, #348]	@ (8005b4c <UART_SetConfig+0x69c>)
 80059f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	2b05      	cmp	r3, #5
 80059f8:	d826      	bhi.n	8005a48 <UART_SetConfig+0x598>
 80059fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005a00 <UART_SetConfig+0x550>)
 80059fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a00:	08005a19 	.word	0x08005a19
 8005a04:	08005a21 	.word	0x08005a21
 8005a08:	08005a29 	.word	0x08005a29
 8005a0c:	08005a31 	.word	0x08005a31
 8005a10:	08005a39 	.word	0x08005a39
 8005a14:	08005a41 	.word	0x08005a41
 8005a18:	2302      	movs	r3, #2
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1e:	e01a      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005a20:	2304      	movs	r3, #4
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a26:	e016      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005a28:	2308      	movs	r3, #8
 8005a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2e:	e012      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005a30:	2310      	movs	r3, #16
 8005a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a36:	e00e      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005a38:	2320      	movs	r3, #32
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3e:	e00a      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005a40:	2340      	movs	r3, #64	@ 0x40
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a46:	e006      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005a48:	2380      	movs	r3, #128	@ 0x80
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4e:	e002      	b.n	8005a56 <UART_SetConfig+0x5a6>
 8005a50:	2380      	movs	r3, #128	@ 0x80
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8005b58 <UART_SetConfig+0x6a8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	f040 80f8 	bne.w	8005c52 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	dc46      	bgt.n	8005af8 <UART_SetConfig+0x648>
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	f2c0 8082 	blt.w	8005b74 <UART_SetConfig+0x6c4>
 8005a70:	3b02      	subs	r3, #2
 8005a72:	2b1e      	cmp	r3, #30
 8005a74:	d87e      	bhi.n	8005b74 <UART_SetConfig+0x6c4>
 8005a76:	a201      	add	r2, pc, #4	@ (adr r2, 8005a7c <UART_SetConfig+0x5cc>)
 8005a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7c:	08005aff 	.word	0x08005aff
 8005a80:	08005b75 	.word	0x08005b75
 8005a84:	08005b07 	.word	0x08005b07
 8005a88:	08005b75 	.word	0x08005b75
 8005a8c:	08005b75 	.word	0x08005b75
 8005a90:	08005b75 	.word	0x08005b75
 8005a94:	08005b17 	.word	0x08005b17
 8005a98:	08005b75 	.word	0x08005b75
 8005a9c:	08005b75 	.word	0x08005b75
 8005aa0:	08005b75 	.word	0x08005b75
 8005aa4:	08005b75 	.word	0x08005b75
 8005aa8:	08005b75 	.word	0x08005b75
 8005aac:	08005b75 	.word	0x08005b75
 8005ab0:	08005b75 	.word	0x08005b75
 8005ab4:	08005b27 	.word	0x08005b27
 8005ab8:	08005b75 	.word	0x08005b75
 8005abc:	08005b75 	.word	0x08005b75
 8005ac0:	08005b75 	.word	0x08005b75
 8005ac4:	08005b75 	.word	0x08005b75
 8005ac8:	08005b75 	.word	0x08005b75
 8005acc:	08005b75 	.word	0x08005b75
 8005ad0:	08005b75 	.word	0x08005b75
 8005ad4:	08005b75 	.word	0x08005b75
 8005ad8:	08005b75 	.word	0x08005b75
 8005adc:	08005b75 	.word	0x08005b75
 8005ae0:	08005b75 	.word	0x08005b75
 8005ae4:	08005b75 	.word	0x08005b75
 8005ae8:	08005b75 	.word	0x08005b75
 8005aec:	08005b75 	.word	0x08005b75
 8005af0:	08005b75 	.word	0x08005b75
 8005af4:	08005b67 	.word	0x08005b67
 8005af8:	2b40      	cmp	r3, #64	@ 0x40
 8005afa:	d037      	beq.n	8005b6c <UART_SetConfig+0x6bc>
 8005afc:	e03a      	b.n	8005b74 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005afe:	f7fe fb5b 	bl	80041b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b04:	e03c      	b.n	8005b80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fe fb6a 	bl	80041e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b14:	e034      	b.n	8005b80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b16:	f107 0318 	add.w	r3, r7, #24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe fcb6 	bl	800448c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b24:	e02c      	b.n	8005b80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b26:	4b09      	ldr	r3, [pc, #36]	@ (8005b4c <UART_SetConfig+0x69c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d016      	beq.n	8005b60 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b32:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <UART_SetConfig+0x69c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	08db      	lsrs	r3, r3, #3
 8005b38:	f003 0303 	and.w	r3, r3, #3
 8005b3c:	4a07      	ldr	r2, [pc, #28]	@ (8005b5c <UART_SetConfig+0x6ac>)
 8005b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b44:	e01c      	b.n	8005b80 <UART_SetConfig+0x6d0>
 8005b46:	bf00      	nop
 8005b48:	40011400 	.word	0x40011400
 8005b4c:	58024400 	.word	0x58024400
 8005b50:	40007800 	.word	0x40007800
 8005b54:	40007c00 	.word	0x40007c00
 8005b58:	58000c00 	.word	0x58000c00
 8005b5c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005b60:	4b9d      	ldr	r3, [pc, #628]	@ (8005dd8 <UART_SetConfig+0x928>)
 8005b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b64:	e00c      	b.n	8005b80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b66:	4b9d      	ldr	r3, [pc, #628]	@ (8005ddc <UART_SetConfig+0x92c>)
 8005b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b6a:	e009      	b.n	8005b80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b72:	e005      	b.n	8005b80 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005b7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 81de 	beq.w	8005f44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	4a94      	ldr	r2, [pc, #592]	@ (8005de0 <UART_SetConfig+0x930>)
 8005b8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b96:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b9a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	4413      	add	r3, r2
 8005ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d305      	bcc.n	8005bb8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d903      	bls.n	8005bc0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005bbe:	e1c1      	b.n	8005f44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	60fa      	str	r2, [r7, #12]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	4a84      	ldr	r2, [pc, #528]	@ (8005de0 <UART_SetConfig+0x930>)
 8005bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	607a      	str	r2, [r7, #4]
 8005bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005be2:	f7fa fbcd 	bl	8000380 <__aeabi_uldivmod>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4610      	mov	r0, r2
 8005bec:	4619      	mov	r1, r3
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	020b      	lsls	r3, r1, #8
 8005bf8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bfc:	0202      	lsls	r2, r0, #8
 8005bfe:	6979      	ldr	r1, [r7, #20]
 8005c00:	6849      	ldr	r1, [r1, #4]
 8005c02:	0849      	lsrs	r1, r1, #1
 8005c04:	2000      	movs	r0, #0
 8005c06:	460c      	mov	r4, r1
 8005c08:	4605      	mov	r5, r0
 8005c0a:	eb12 0804 	adds.w	r8, r2, r4
 8005c0e:	eb43 0905 	adc.w	r9, r3, r5
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	469a      	mov	sl, r3
 8005c1a:	4693      	mov	fp, r2
 8005c1c:	4652      	mov	r2, sl
 8005c1e:	465b      	mov	r3, fp
 8005c20:	4640      	mov	r0, r8
 8005c22:	4649      	mov	r1, r9
 8005c24:	f7fa fbac 	bl	8000380 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c36:	d308      	bcc.n	8005c4a <UART_SetConfig+0x79a>
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c3e:	d204      	bcs.n	8005c4a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c46:	60da      	str	r2, [r3, #12]
 8005c48:	e17c      	b.n	8005f44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c50:	e178      	b.n	8005f44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c5a:	f040 80c5 	bne.w	8005de8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005c5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	dc48      	bgt.n	8005cf8 <UART_SetConfig+0x848>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	db7b      	blt.n	8005d62 <UART_SetConfig+0x8b2>
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	d879      	bhi.n	8005d62 <UART_SetConfig+0x8b2>
 8005c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c74 <UART_SetConfig+0x7c4>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005cff 	.word	0x08005cff
 8005c78:	08005d07 	.word	0x08005d07
 8005c7c:	08005d63 	.word	0x08005d63
 8005c80:	08005d63 	.word	0x08005d63
 8005c84:	08005d0f 	.word	0x08005d0f
 8005c88:	08005d63 	.word	0x08005d63
 8005c8c:	08005d63 	.word	0x08005d63
 8005c90:	08005d63 	.word	0x08005d63
 8005c94:	08005d1f 	.word	0x08005d1f
 8005c98:	08005d63 	.word	0x08005d63
 8005c9c:	08005d63 	.word	0x08005d63
 8005ca0:	08005d63 	.word	0x08005d63
 8005ca4:	08005d63 	.word	0x08005d63
 8005ca8:	08005d63 	.word	0x08005d63
 8005cac:	08005d63 	.word	0x08005d63
 8005cb0:	08005d63 	.word	0x08005d63
 8005cb4:	08005d2f 	.word	0x08005d2f
 8005cb8:	08005d63 	.word	0x08005d63
 8005cbc:	08005d63 	.word	0x08005d63
 8005cc0:	08005d63 	.word	0x08005d63
 8005cc4:	08005d63 	.word	0x08005d63
 8005cc8:	08005d63 	.word	0x08005d63
 8005ccc:	08005d63 	.word	0x08005d63
 8005cd0:	08005d63 	.word	0x08005d63
 8005cd4:	08005d63 	.word	0x08005d63
 8005cd8:	08005d63 	.word	0x08005d63
 8005cdc:	08005d63 	.word	0x08005d63
 8005ce0:	08005d63 	.word	0x08005d63
 8005ce4:	08005d63 	.word	0x08005d63
 8005ce8:	08005d63 	.word	0x08005d63
 8005cec:	08005d63 	.word	0x08005d63
 8005cf0:	08005d63 	.word	0x08005d63
 8005cf4:	08005d55 	.word	0x08005d55
 8005cf8:	2b40      	cmp	r3, #64	@ 0x40
 8005cfa:	d02e      	beq.n	8005d5a <UART_SetConfig+0x8aa>
 8005cfc:	e031      	b.n	8005d62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cfe:	f7fd f825 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 8005d02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d04:	e033      	b.n	8005d6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d06:	f7fd f837 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8005d0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d0c:	e02f      	b.n	8005d6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe fa66 	bl	80041e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d1c:	e027      	b.n	8005d6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d1e:	f107 0318 	add.w	r3, r7, #24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fbb2 	bl	800448c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d2c:	e01f      	b.n	8005d6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8005de4 <UART_SetConfig+0x934>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8005de4 <UART_SetConfig+0x934>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	08db      	lsrs	r3, r3, #3
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	4a24      	ldr	r2, [pc, #144]	@ (8005dd8 <UART_SetConfig+0x928>)
 8005d46:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d4c:	e00f      	b.n	8005d6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005d4e:	4b22      	ldr	r3, [pc, #136]	@ (8005dd8 <UART_SetConfig+0x928>)
 8005d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d52:	e00c      	b.n	8005d6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d54:	4b21      	ldr	r3, [pc, #132]	@ (8005ddc <UART_SetConfig+0x92c>)
 8005d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d58:	e009      	b.n	8005d6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d60:	e005      	b.n	8005d6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80e7 	beq.w	8005f44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	4a19      	ldr	r2, [pc, #100]	@ (8005de0 <UART_SetConfig+0x930>)
 8005d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d88:	005a      	lsls	r2, r3, #1
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	441a      	add	r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9e:	2b0f      	cmp	r3, #15
 8005da0:	d916      	bls.n	8005dd0 <UART_SetConfig+0x920>
 8005da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da8:	d212      	bcs.n	8005dd0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f023 030f 	bic.w	r3, r3, #15
 8005db2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005dcc:	60da      	str	r2, [r3, #12]
 8005dce:	e0b9      	b.n	8005f44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005dd6:	e0b5      	b.n	8005f44 <UART_SetConfig+0xa94>
 8005dd8:	03d09000 	.word	0x03d09000
 8005ddc:	003d0900 	.word	0x003d0900
 8005de0:	080073d4 	.word	0x080073d4
 8005de4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005de8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	dc49      	bgt.n	8005e84 <UART_SetConfig+0x9d4>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	db7c      	blt.n	8005eee <UART_SetConfig+0xa3e>
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d87a      	bhi.n	8005eee <UART_SetConfig+0xa3e>
 8005df8:	a201      	add	r2, pc, #4	@ (adr r2, 8005e00 <UART_SetConfig+0x950>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e8b 	.word	0x08005e8b
 8005e04:	08005e93 	.word	0x08005e93
 8005e08:	08005eef 	.word	0x08005eef
 8005e0c:	08005eef 	.word	0x08005eef
 8005e10:	08005e9b 	.word	0x08005e9b
 8005e14:	08005eef 	.word	0x08005eef
 8005e18:	08005eef 	.word	0x08005eef
 8005e1c:	08005eef 	.word	0x08005eef
 8005e20:	08005eab 	.word	0x08005eab
 8005e24:	08005eef 	.word	0x08005eef
 8005e28:	08005eef 	.word	0x08005eef
 8005e2c:	08005eef 	.word	0x08005eef
 8005e30:	08005eef 	.word	0x08005eef
 8005e34:	08005eef 	.word	0x08005eef
 8005e38:	08005eef 	.word	0x08005eef
 8005e3c:	08005eef 	.word	0x08005eef
 8005e40:	08005ebb 	.word	0x08005ebb
 8005e44:	08005eef 	.word	0x08005eef
 8005e48:	08005eef 	.word	0x08005eef
 8005e4c:	08005eef 	.word	0x08005eef
 8005e50:	08005eef 	.word	0x08005eef
 8005e54:	08005eef 	.word	0x08005eef
 8005e58:	08005eef 	.word	0x08005eef
 8005e5c:	08005eef 	.word	0x08005eef
 8005e60:	08005eef 	.word	0x08005eef
 8005e64:	08005eef 	.word	0x08005eef
 8005e68:	08005eef 	.word	0x08005eef
 8005e6c:	08005eef 	.word	0x08005eef
 8005e70:	08005eef 	.word	0x08005eef
 8005e74:	08005eef 	.word	0x08005eef
 8005e78:	08005eef 	.word	0x08005eef
 8005e7c:	08005eef 	.word	0x08005eef
 8005e80:	08005ee1 	.word	0x08005ee1
 8005e84:	2b40      	cmp	r3, #64	@ 0x40
 8005e86:	d02e      	beq.n	8005ee6 <UART_SetConfig+0xa36>
 8005e88:	e031      	b.n	8005eee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e8a:	f7fc ff5f 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 8005e8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e90:	e033      	b.n	8005efa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e92:	f7fc ff71 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8005e96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e98:	e02f      	b.n	8005efa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe f9a0 	bl	80041e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ea8:	e027      	b.n	8005efa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eaa:	f107 0318 	add.w	r3, r7, #24
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fe faec 	bl	800448c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eb8:	e01f      	b.n	8005efa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eba:	4b2d      	ldr	r3, [pc, #180]	@ (8005f70 <UART_SetConfig+0xac0>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d009      	beq.n	8005eda <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f70 <UART_SetConfig+0xac0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	08db      	lsrs	r3, r3, #3
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	4a28      	ldr	r2, [pc, #160]	@ (8005f74 <UART_SetConfig+0xac4>)
 8005ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ed8:	e00f      	b.n	8005efa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005eda:	4b26      	ldr	r3, [pc, #152]	@ (8005f74 <UART_SetConfig+0xac4>)
 8005edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ede:	e00c      	b.n	8005efa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ee0:	4b25      	ldr	r3, [pc, #148]	@ (8005f78 <UART_SetConfig+0xac8>)
 8005ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ee4:	e009      	b.n	8005efa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eec:	e005      	b.n	8005efa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ef8:	bf00      	nop
    }

    if (pclk != 0U)
 8005efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d021      	beq.n	8005f44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	4a1d      	ldr	r2, [pc, #116]	@ (8005f7c <UART_SetConfig+0xacc>)
 8005f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	441a      	add	r2, r3
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f22:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f26:	2b0f      	cmp	r3, #15
 8005f28:	d909      	bls.n	8005f3e <UART_SetConfig+0xa8e>
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f30:	d205      	bcs.n	8005f3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60da      	str	r2, [r3, #12]
 8005f3c:	e002      	b.n	8005f44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2200      	movs	r2, #0
 8005f58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f60:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3748      	adds	r7, #72	@ 0x48
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f6e:	bf00      	nop
 8005f70:	58024400 	.word	0x58024400
 8005f74:	03d09000 	.word	0x03d09000
 8005f78:	003d0900 	.word	0x003d0900
 8005f7c:	080073d4 	.word	0x080073d4

08005f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	430a      	orrs	r2, r1
 8006030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01a      	beq.n	8006096 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800607e:	d10a      	bne.n	8006096 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	605a      	str	r2, [r3, #4]
  }
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b098      	sub	sp, #96	@ 0x60
 80060c8:	af02      	add	r7, sp, #8
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060d4:	f7fb fa72 	bl	80015bc <HAL_GetTick>
 80060d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d12f      	bne.n	8006148 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060f0:	2200      	movs	r2, #0
 80060f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f88e 	bl	8006218 <UART_WaitOnFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d022      	beq.n	8006148 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006116:	653b      	str	r3, [r7, #80]	@ 0x50
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006120:	647b      	str	r3, [r7, #68]	@ 0x44
 8006122:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800612e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e6      	bne.n	8006102 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e063      	b.n	8006210 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0304 	and.w	r3, r3, #4
 8006152:	2b04      	cmp	r3, #4
 8006154:	d149      	bne.n	80061ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006156:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800615e:	2200      	movs	r2, #0
 8006160:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f857 	bl	8006218 <UART_WaitOnFlagUntilTimeout>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d03c      	beq.n	80061ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	e853 3f00 	ldrex	r3, [r3]
 800617c:	623b      	str	r3, [r7, #32]
   return(result);
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006184:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800618e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006190:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e6      	bne.n	8006170 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3308      	adds	r3, #8
 80061a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3308      	adds	r3, #8
 80061c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061c2:	61fa      	str	r2, [r7, #28]
 80061c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	69b9      	ldr	r1, [r7, #24]
 80061c8:	69fa      	ldr	r2, [r7, #28]
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	617b      	str	r3, [r7, #20]
   return(result);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e5      	bne.n	80061a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2220      	movs	r2, #32
 80061da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e012      	b.n	8006210 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3758      	adds	r7, #88	@ 0x58
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	4613      	mov	r3, r2
 8006226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006228:	e04f      	b.n	80062ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006230:	d04b      	beq.n	80062ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006232:	f7fb f9c3 	bl	80015bc <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	429a      	cmp	r2, r3
 8006240:	d302      	bcc.n	8006248 <UART_WaitOnFlagUntilTimeout+0x30>
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e04e      	b.n	80062ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b00      	cmp	r3, #0
 8006258:	d037      	beq.n	80062ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b80      	cmp	r3, #128	@ 0x80
 800625e:	d034      	beq.n	80062ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b40      	cmp	r3, #64	@ 0x40
 8006264:	d031      	beq.n	80062ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f003 0308 	and.w	r3, r3, #8
 8006270:	2b08      	cmp	r3, #8
 8006272:	d110      	bne.n	8006296 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2208      	movs	r2, #8
 800627a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f839 	bl	80062f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2208      	movs	r2, #8
 8006286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e029      	b.n	80062ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062a4:	d111      	bne.n	80062ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 f81f 	bl	80062f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e00f      	b.n	80062ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69da      	ldr	r2, [r3, #28]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4013      	ands	r3, r2
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	bf0c      	ite	eq
 80062da:	2301      	moveq	r3, #1
 80062dc:	2300      	movne	r3, #0
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d0a0      	beq.n	800622a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b095      	sub	sp, #84	@ 0x54
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006310:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800631a:	643b      	str	r3, [r7, #64]	@ 0x40
 800631c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006320:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e6      	bne.n	80062fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	61fb      	str	r3, [r7, #28]
   return(result);
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	4b1e      	ldr	r3, [pc, #120]	@ (80063bc <UART_EndRxTransfer+0xc8>)
 8006342:	4013      	ands	r3, r2
 8006344:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3308      	adds	r3, #8
 800634c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800634e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006350:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e5      	bne.n	800632e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006366:	2b01      	cmp	r3, #1
 8006368:	d118      	bne.n	800639c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	e853 3f00 	ldrex	r3, [r3]
 8006376:	60bb      	str	r3, [r7, #8]
   return(result);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0310 	bic.w	r3, r3, #16
 800637e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6979      	ldr	r1, [r7, #20]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	e841 2300 	strex	r3, r2, [r1]
 8006394:	613b      	str	r3, [r7, #16]
   return(result);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1e6      	bne.n	800636a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063b0:	bf00      	nop
 80063b2:	3754      	adds	r7, #84	@ 0x54
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	effffffe 	.word	0xeffffffe

080063c0 <std>:
 80063c0:	2300      	movs	r3, #0
 80063c2:	b510      	push	{r4, lr}
 80063c4:	4604      	mov	r4, r0
 80063c6:	e9c0 3300 	strd	r3, r3, [r0]
 80063ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063ce:	6083      	str	r3, [r0, #8]
 80063d0:	8181      	strh	r1, [r0, #12]
 80063d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80063d4:	81c2      	strh	r2, [r0, #14]
 80063d6:	6183      	str	r3, [r0, #24]
 80063d8:	4619      	mov	r1, r3
 80063da:	2208      	movs	r2, #8
 80063dc:	305c      	adds	r0, #92	@ 0x5c
 80063de:	f000 f9ba 	bl	8006756 <memset>
 80063e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006418 <std+0x58>)
 80063e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80063e6:	4b0d      	ldr	r3, [pc, #52]	@ (800641c <std+0x5c>)
 80063e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006420 <std+0x60>)
 80063ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006424 <std+0x64>)
 80063f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80063f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006428 <std+0x68>)
 80063f4:	6224      	str	r4, [r4, #32]
 80063f6:	429c      	cmp	r4, r3
 80063f8:	d006      	beq.n	8006408 <std+0x48>
 80063fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063fe:	4294      	cmp	r4, r2
 8006400:	d002      	beq.n	8006408 <std+0x48>
 8006402:	33d0      	adds	r3, #208	@ 0xd0
 8006404:	429c      	cmp	r4, r3
 8006406:	d105      	bne.n	8006414 <std+0x54>
 8006408:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800640c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006410:	f000 ba1a 	b.w	8006848 <__retarget_lock_init_recursive>
 8006414:	bd10      	pop	{r4, pc}
 8006416:	bf00      	nop
 8006418:	080066d1 	.word	0x080066d1
 800641c:	080066f3 	.word	0x080066f3
 8006420:	0800672b 	.word	0x0800672b
 8006424:	0800674f 	.word	0x0800674f
 8006428:	240001a8 	.word	0x240001a8

0800642c <stdio_exit_handler>:
 800642c:	4a02      	ldr	r2, [pc, #8]	@ (8006438 <stdio_exit_handler+0xc>)
 800642e:	4903      	ldr	r1, [pc, #12]	@ (800643c <stdio_exit_handler+0x10>)
 8006430:	4803      	ldr	r0, [pc, #12]	@ (8006440 <stdio_exit_handler+0x14>)
 8006432:	f000 b869 	b.w	8006508 <_fwalk_sglue>
 8006436:	bf00      	nop
 8006438:	2400002c 	.word	0x2400002c
 800643c:	080070f5 	.word	0x080070f5
 8006440:	2400003c 	.word	0x2400003c

08006444 <cleanup_stdio>:
 8006444:	6841      	ldr	r1, [r0, #4]
 8006446:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <cleanup_stdio+0x34>)
 8006448:	4299      	cmp	r1, r3
 800644a:	b510      	push	{r4, lr}
 800644c:	4604      	mov	r4, r0
 800644e:	d001      	beq.n	8006454 <cleanup_stdio+0x10>
 8006450:	f000 fe50 	bl	80070f4 <_fflush_r>
 8006454:	68a1      	ldr	r1, [r4, #8]
 8006456:	4b09      	ldr	r3, [pc, #36]	@ (800647c <cleanup_stdio+0x38>)
 8006458:	4299      	cmp	r1, r3
 800645a:	d002      	beq.n	8006462 <cleanup_stdio+0x1e>
 800645c:	4620      	mov	r0, r4
 800645e:	f000 fe49 	bl	80070f4 <_fflush_r>
 8006462:	68e1      	ldr	r1, [r4, #12]
 8006464:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <cleanup_stdio+0x3c>)
 8006466:	4299      	cmp	r1, r3
 8006468:	d004      	beq.n	8006474 <cleanup_stdio+0x30>
 800646a:	4620      	mov	r0, r4
 800646c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006470:	f000 be40 	b.w	80070f4 <_fflush_r>
 8006474:	bd10      	pop	{r4, pc}
 8006476:	bf00      	nop
 8006478:	240001a8 	.word	0x240001a8
 800647c:	24000210 	.word	0x24000210
 8006480:	24000278 	.word	0x24000278

08006484 <global_stdio_init.part.0>:
 8006484:	b510      	push	{r4, lr}
 8006486:	4b0b      	ldr	r3, [pc, #44]	@ (80064b4 <global_stdio_init.part.0+0x30>)
 8006488:	4c0b      	ldr	r4, [pc, #44]	@ (80064b8 <global_stdio_init.part.0+0x34>)
 800648a:	4a0c      	ldr	r2, [pc, #48]	@ (80064bc <global_stdio_init.part.0+0x38>)
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	4620      	mov	r0, r4
 8006490:	2200      	movs	r2, #0
 8006492:	2104      	movs	r1, #4
 8006494:	f7ff ff94 	bl	80063c0 <std>
 8006498:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800649c:	2201      	movs	r2, #1
 800649e:	2109      	movs	r1, #9
 80064a0:	f7ff ff8e 	bl	80063c0 <std>
 80064a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064a8:	2202      	movs	r2, #2
 80064aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ae:	2112      	movs	r1, #18
 80064b0:	f7ff bf86 	b.w	80063c0 <std>
 80064b4:	240002e0 	.word	0x240002e0
 80064b8:	240001a8 	.word	0x240001a8
 80064bc:	0800642d 	.word	0x0800642d

080064c0 <__sfp_lock_acquire>:
 80064c0:	4801      	ldr	r0, [pc, #4]	@ (80064c8 <__sfp_lock_acquire+0x8>)
 80064c2:	f000 b9c2 	b.w	800684a <__retarget_lock_acquire_recursive>
 80064c6:	bf00      	nop
 80064c8:	240002e9 	.word	0x240002e9

080064cc <__sfp_lock_release>:
 80064cc:	4801      	ldr	r0, [pc, #4]	@ (80064d4 <__sfp_lock_release+0x8>)
 80064ce:	f000 b9bd 	b.w	800684c <__retarget_lock_release_recursive>
 80064d2:	bf00      	nop
 80064d4:	240002e9 	.word	0x240002e9

080064d8 <__sinit>:
 80064d8:	b510      	push	{r4, lr}
 80064da:	4604      	mov	r4, r0
 80064dc:	f7ff fff0 	bl	80064c0 <__sfp_lock_acquire>
 80064e0:	6a23      	ldr	r3, [r4, #32]
 80064e2:	b11b      	cbz	r3, 80064ec <__sinit+0x14>
 80064e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064e8:	f7ff bff0 	b.w	80064cc <__sfp_lock_release>
 80064ec:	4b04      	ldr	r3, [pc, #16]	@ (8006500 <__sinit+0x28>)
 80064ee:	6223      	str	r3, [r4, #32]
 80064f0:	4b04      	ldr	r3, [pc, #16]	@ (8006504 <__sinit+0x2c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1f5      	bne.n	80064e4 <__sinit+0xc>
 80064f8:	f7ff ffc4 	bl	8006484 <global_stdio_init.part.0>
 80064fc:	e7f2      	b.n	80064e4 <__sinit+0xc>
 80064fe:	bf00      	nop
 8006500:	08006445 	.word	0x08006445
 8006504:	240002e0 	.word	0x240002e0

08006508 <_fwalk_sglue>:
 8006508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800650c:	4607      	mov	r7, r0
 800650e:	4688      	mov	r8, r1
 8006510:	4614      	mov	r4, r2
 8006512:	2600      	movs	r6, #0
 8006514:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006518:	f1b9 0901 	subs.w	r9, r9, #1
 800651c:	d505      	bpl.n	800652a <_fwalk_sglue+0x22>
 800651e:	6824      	ldr	r4, [r4, #0]
 8006520:	2c00      	cmp	r4, #0
 8006522:	d1f7      	bne.n	8006514 <_fwalk_sglue+0xc>
 8006524:	4630      	mov	r0, r6
 8006526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800652a:	89ab      	ldrh	r3, [r5, #12]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d907      	bls.n	8006540 <_fwalk_sglue+0x38>
 8006530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006534:	3301      	adds	r3, #1
 8006536:	d003      	beq.n	8006540 <_fwalk_sglue+0x38>
 8006538:	4629      	mov	r1, r5
 800653a:	4638      	mov	r0, r7
 800653c:	47c0      	blx	r8
 800653e:	4306      	orrs	r6, r0
 8006540:	3568      	adds	r5, #104	@ 0x68
 8006542:	e7e9      	b.n	8006518 <_fwalk_sglue+0x10>

08006544 <iprintf>:
 8006544:	b40f      	push	{r0, r1, r2, r3}
 8006546:	b507      	push	{r0, r1, r2, lr}
 8006548:	4906      	ldr	r1, [pc, #24]	@ (8006564 <iprintf+0x20>)
 800654a:	ab04      	add	r3, sp, #16
 800654c:	6808      	ldr	r0, [r1, #0]
 800654e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006552:	6881      	ldr	r1, [r0, #8]
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	f000 faa5 	bl	8006aa4 <_vfiprintf_r>
 800655a:	b003      	add	sp, #12
 800655c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006560:	b004      	add	sp, #16
 8006562:	4770      	bx	lr
 8006564:	24000038 	.word	0x24000038

08006568 <setvbuf>:
 8006568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800656c:	461d      	mov	r5, r3
 800656e:	4b57      	ldr	r3, [pc, #348]	@ (80066cc <setvbuf+0x164>)
 8006570:	681f      	ldr	r7, [r3, #0]
 8006572:	4604      	mov	r4, r0
 8006574:	460e      	mov	r6, r1
 8006576:	4690      	mov	r8, r2
 8006578:	b127      	cbz	r7, 8006584 <setvbuf+0x1c>
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	b913      	cbnz	r3, 8006584 <setvbuf+0x1c>
 800657e:	4638      	mov	r0, r7
 8006580:	f7ff ffaa 	bl	80064d8 <__sinit>
 8006584:	f1b8 0f02 	cmp.w	r8, #2
 8006588:	d006      	beq.n	8006598 <setvbuf+0x30>
 800658a:	f1b8 0f01 	cmp.w	r8, #1
 800658e:	f200 809a 	bhi.w	80066c6 <setvbuf+0x15e>
 8006592:	2d00      	cmp	r5, #0
 8006594:	f2c0 8097 	blt.w	80066c6 <setvbuf+0x15e>
 8006598:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800659a:	07d9      	lsls	r1, r3, #31
 800659c:	d405      	bmi.n	80065aa <setvbuf+0x42>
 800659e:	89a3      	ldrh	r3, [r4, #12]
 80065a0:	059a      	lsls	r2, r3, #22
 80065a2:	d402      	bmi.n	80065aa <setvbuf+0x42>
 80065a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065a6:	f000 f950 	bl	800684a <__retarget_lock_acquire_recursive>
 80065aa:	4621      	mov	r1, r4
 80065ac:	4638      	mov	r0, r7
 80065ae:	f000 fda1 	bl	80070f4 <_fflush_r>
 80065b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065b4:	b141      	cbz	r1, 80065c8 <setvbuf+0x60>
 80065b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065ba:	4299      	cmp	r1, r3
 80065bc:	d002      	beq.n	80065c4 <setvbuf+0x5c>
 80065be:	4638      	mov	r0, r7
 80065c0:	f000 f946 	bl	8006850 <_free_r>
 80065c4:	2300      	movs	r3, #0
 80065c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80065c8:	2300      	movs	r3, #0
 80065ca:	61a3      	str	r3, [r4, #24]
 80065cc:	6063      	str	r3, [r4, #4]
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	061b      	lsls	r3, r3, #24
 80065d2:	d503      	bpl.n	80065dc <setvbuf+0x74>
 80065d4:	6921      	ldr	r1, [r4, #16]
 80065d6:	4638      	mov	r0, r7
 80065d8:	f000 f93a 	bl	8006850 <_free_r>
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	f1b8 0f02 	cmp.w	r8, #2
 80065ea:	81a3      	strh	r3, [r4, #12]
 80065ec:	d061      	beq.n	80066b2 <setvbuf+0x14a>
 80065ee:	ab01      	add	r3, sp, #4
 80065f0:	466a      	mov	r2, sp
 80065f2:	4621      	mov	r1, r4
 80065f4:	4638      	mov	r0, r7
 80065f6:	f000 fda5 	bl	8007144 <__swhatbuf_r>
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	4318      	orrs	r0, r3
 80065fe:	81a0      	strh	r0, [r4, #12]
 8006600:	bb2d      	cbnz	r5, 800664e <setvbuf+0xe6>
 8006602:	9d00      	ldr	r5, [sp, #0]
 8006604:	4628      	mov	r0, r5
 8006606:	f000 f96d 	bl	80068e4 <malloc>
 800660a:	4606      	mov	r6, r0
 800660c:	2800      	cmp	r0, #0
 800660e:	d152      	bne.n	80066b6 <setvbuf+0x14e>
 8006610:	f8dd 9000 	ldr.w	r9, [sp]
 8006614:	45a9      	cmp	r9, r5
 8006616:	d140      	bne.n	800669a <setvbuf+0x132>
 8006618:	f04f 35ff 	mov.w	r5, #4294967295
 800661c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006620:	f043 0202 	orr.w	r2, r3, #2
 8006624:	81a2      	strh	r2, [r4, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	60a2      	str	r2, [r4, #8]
 800662a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800662e:	6022      	str	r2, [r4, #0]
 8006630:	6122      	str	r2, [r4, #16]
 8006632:	2201      	movs	r2, #1
 8006634:	6162      	str	r2, [r4, #20]
 8006636:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006638:	07d6      	lsls	r6, r2, #31
 800663a:	d404      	bmi.n	8006646 <setvbuf+0xde>
 800663c:	0598      	lsls	r0, r3, #22
 800663e:	d402      	bmi.n	8006646 <setvbuf+0xde>
 8006640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006642:	f000 f903 	bl	800684c <__retarget_lock_release_recursive>
 8006646:	4628      	mov	r0, r5
 8006648:	b003      	add	sp, #12
 800664a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800664e:	2e00      	cmp	r6, #0
 8006650:	d0d8      	beq.n	8006604 <setvbuf+0x9c>
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	b913      	cbnz	r3, 800665c <setvbuf+0xf4>
 8006656:	4638      	mov	r0, r7
 8006658:	f7ff ff3e 	bl	80064d8 <__sinit>
 800665c:	f1b8 0f01 	cmp.w	r8, #1
 8006660:	bf08      	it	eq
 8006662:	89a3      	ldrheq	r3, [r4, #12]
 8006664:	6026      	str	r6, [r4, #0]
 8006666:	bf04      	itt	eq
 8006668:	f043 0301 	orreq.w	r3, r3, #1
 800666c:	81a3      	strheq	r3, [r4, #12]
 800666e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006672:	f013 0208 	ands.w	r2, r3, #8
 8006676:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800667a:	d01e      	beq.n	80066ba <setvbuf+0x152>
 800667c:	07d9      	lsls	r1, r3, #31
 800667e:	bf41      	itttt	mi
 8006680:	2200      	movmi	r2, #0
 8006682:	426d      	negmi	r5, r5
 8006684:	60a2      	strmi	r2, [r4, #8]
 8006686:	61a5      	strmi	r5, [r4, #24]
 8006688:	bf58      	it	pl
 800668a:	60a5      	strpl	r5, [r4, #8]
 800668c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800668e:	07d2      	lsls	r2, r2, #31
 8006690:	d401      	bmi.n	8006696 <setvbuf+0x12e>
 8006692:	059b      	lsls	r3, r3, #22
 8006694:	d513      	bpl.n	80066be <setvbuf+0x156>
 8006696:	2500      	movs	r5, #0
 8006698:	e7d5      	b.n	8006646 <setvbuf+0xde>
 800669a:	4648      	mov	r0, r9
 800669c:	f000 f922 	bl	80068e4 <malloc>
 80066a0:	4606      	mov	r6, r0
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d0b8      	beq.n	8006618 <setvbuf+0xb0>
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ac:	81a3      	strh	r3, [r4, #12]
 80066ae:	464d      	mov	r5, r9
 80066b0:	e7cf      	b.n	8006652 <setvbuf+0xea>
 80066b2:	2500      	movs	r5, #0
 80066b4:	e7b2      	b.n	800661c <setvbuf+0xb4>
 80066b6:	46a9      	mov	r9, r5
 80066b8:	e7f5      	b.n	80066a6 <setvbuf+0x13e>
 80066ba:	60a2      	str	r2, [r4, #8]
 80066bc:	e7e6      	b.n	800668c <setvbuf+0x124>
 80066be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066c0:	f000 f8c4 	bl	800684c <__retarget_lock_release_recursive>
 80066c4:	e7e7      	b.n	8006696 <setvbuf+0x12e>
 80066c6:	f04f 35ff 	mov.w	r5, #4294967295
 80066ca:	e7bc      	b.n	8006646 <setvbuf+0xde>
 80066cc:	24000038 	.word	0x24000038

080066d0 <__sread>:
 80066d0:	b510      	push	{r4, lr}
 80066d2:	460c      	mov	r4, r1
 80066d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d8:	f000 f868 	bl	80067ac <_read_r>
 80066dc:	2800      	cmp	r0, #0
 80066de:	bfab      	itete	ge
 80066e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80066e2:	89a3      	ldrhlt	r3, [r4, #12]
 80066e4:	181b      	addge	r3, r3, r0
 80066e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066ea:	bfac      	ite	ge
 80066ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066ee:	81a3      	strhlt	r3, [r4, #12]
 80066f0:	bd10      	pop	{r4, pc}

080066f2 <__swrite>:
 80066f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f6:	461f      	mov	r7, r3
 80066f8:	898b      	ldrh	r3, [r1, #12]
 80066fa:	05db      	lsls	r3, r3, #23
 80066fc:	4605      	mov	r5, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	4616      	mov	r6, r2
 8006702:	d505      	bpl.n	8006710 <__swrite+0x1e>
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	2302      	movs	r3, #2
 800670a:	2200      	movs	r2, #0
 800670c:	f000 f83c 	bl	8006788 <_lseek_r>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006716:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	4632      	mov	r2, r6
 800671e:	463b      	mov	r3, r7
 8006720:	4628      	mov	r0, r5
 8006722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	f000 b853 	b.w	80067d0 <_write_r>

0800672a <__sseek>:
 800672a:	b510      	push	{r4, lr}
 800672c:	460c      	mov	r4, r1
 800672e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006732:	f000 f829 	bl	8006788 <_lseek_r>
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	bf15      	itete	ne
 800673c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800673e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006742:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006746:	81a3      	strheq	r3, [r4, #12]
 8006748:	bf18      	it	ne
 800674a:	81a3      	strhne	r3, [r4, #12]
 800674c:	bd10      	pop	{r4, pc}

0800674e <__sclose>:
 800674e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006752:	f000 b809 	b.w	8006768 <_close_r>

08006756 <memset>:
 8006756:	4402      	add	r2, r0
 8006758:	4603      	mov	r3, r0
 800675a:	4293      	cmp	r3, r2
 800675c:	d100      	bne.n	8006760 <memset+0xa>
 800675e:	4770      	bx	lr
 8006760:	f803 1b01 	strb.w	r1, [r3], #1
 8006764:	e7f9      	b.n	800675a <memset+0x4>
	...

08006768 <_close_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d06      	ldr	r5, [pc, #24]	@ (8006784 <_close_r+0x1c>)
 800676c:	2300      	movs	r3, #0
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fa fc22 	bl	8000fbc <_close>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_close_r+0x1a>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_close_r+0x1a>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	240002e4 	.word	0x240002e4

08006788 <_lseek_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d07      	ldr	r5, [pc, #28]	@ (80067a8 <_lseek_r+0x20>)
 800678c:	4604      	mov	r4, r0
 800678e:	4608      	mov	r0, r1
 8006790:	4611      	mov	r1, r2
 8006792:	2200      	movs	r2, #0
 8006794:	602a      	str	r2, [r5, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	f7fa fc37 	bl	800100a <_lseek>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_lseek_r+0x1e>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_lseek_r+0x1e>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	240002e4 	.word	0x240002e4

080067ac <_read_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d07      	ldr	r5, [pc, #28]	@ (80067cc <_read_r+0x20>)
 80067b0:	4604      	mov	r4, r0
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f7fa fbc5 	bl	8000f4a <_read>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_read_r+0x1e>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_read_r+0x1e>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	240002e4 	.word	0x240002e4

080067d0 <_write_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4d07      	ldr	r5, [pc, #28]	@ (80067f0 <_write_r+0x20>)
 80067d4:	4604      	mov	r4, r0
 80067d6:	4608      	mov	r0, r1
 80067d8:	4611      	mov	r1, r2
 80067da:	2200      	movs	r2, #0
 80067dc:	602a      	str	r2, [r5, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	f7fa fbd0 	bl	8000f84 <_write>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	d102      	bne.n	80067ee <_write_r+0x1e>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	b103      	cbz	r3, 80067ee <_write_r+0x1e>
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	bd38      	pop	{r3, r4, r5, pc}
 80067f0:	240002e4 	.word	0x240002e4

080067f4 <__errno>:
 80067f4:	4b01      	ldr	r3, [pc, #4]	@ (80067fc <__errno+0x8>)
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	24000038 	.word	0x24000038

08006800 <__libc_init_array>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	4d0d      	ldr	r5, [pc, #52]	@ (8006838 <__libc_init_array+0x38>)
 8006804:	4c0d      	ldr	r4, [pc, #52]	@ (800683c <__libc_init_array+0x3c>)
 8006806:	1b64      	subs	r4, r4, r5
 8006808:	10a4      	asrs	r4, r4, #2
 800680a:	2600      	movs	r6, #0
 800680c:	42a6      	cmp	r6, r4
 800680e:	d109      	bne.n	8006824 <__libc_init_array+0x24>
 8006810:	4d0b      	ldr	r5, [pc, #44]	@ (8006840 <__libc_init_array+0x40>)
 8006812:	4c0c      	ldr	r4, [pc, #48]	@ (8006844 <__libc_init_array+0x44>)
 8006814:	f000 fdbe 	bl	8007394 <_init>
 8006818:	1b64      	subs	r4, r4, r5
 800681a:	10a4      	asrs	r4, r4, #2
 800681c:	2600      	movs	r6, #0
 800681e:	42a6      	cmp	r6, r4
 8006820:	d105      	bne.n	800682e <__libc_init_array+0x2e>
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	f855 3b04 	ldr.w	r3, [r5], #4
 8006828:	4798      	blx	r3
 800682a:	3601      	adds	r6, #1
 800682c:	e7ee      	b.n	800680c <__libc_init_array+0xc>
 800682e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006832:	4798      	blx	r3
 8006834:	3601      	adds	r6, #1
 8006836:	e7f2      	b.n	800681e <__libc_init_array+0x1e>
 8006838:	08007428 	.word	0x08007428
 800683c:	08007428 	.word	0x08007428
 8006840:	08007428 	.word	0x08007428
 8006844:	0800742c 	.word	0x0800742c

08006848 <__retarget_lock_init_recursive>:
 8006848:	4770      	bx	lr

0800684a <__retarget_lock_acquire_recursive>:
 800684a:	4770      	bx	lr

0800684c <__retarget_lock_release_recursive>:
 800684c:	4770      	bx	lr
	...

08006850 <_free_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4605      	mov	r5, r0
 8006854:	2900      	cmp	r1, #0
 8006856:	d041      	beq.n	80068dc <_free_r+0x8c>
 8006858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800685c:	1f0c      	subs	r4, r1, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	bfb8      	it	lt
 8006862:	18e4      	addlt	r4, r4, r3
 8006864:	f000 f8e8 	bl	8006a38 <__malloc_lock>
 8006868:	4a1d      	ldr	r2, [pc, #116]	@ (80068e0 <_free_r+0x90>)
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	b933      	cbnz	r3, 800687c <_free_r+0x2c>
 800686e:	6063      	str	r3, [r4, #4]
 8006870:	6014      	str	r4, [r2, #0]
 8006872:	4628      	mov	r0, r5
 8006874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006878:	f000 b8e4 	b.w	8006a44 <__malloc_unlock>
 800687c:	42a3      	cmp	r3, r4
 800687e:	d908      	bls.n	8006892 <_free_r+0x42>
 8006880:	6820      	ldr	r0, [r4, #0]
 8006882:	1821      	adds	r1, r4, r0
 8006884:	428b      	cmp	r3, r1
 8006886:	bf01      	itttt	eq
 8006888:	6819      	ldreq	r1, [r3, #0]
 800688a:	685b      	ldreq	r3, [r3, #4]
 800688c:	1809      	addeq	r1, r1, r0
 800688e:	6021      	streq	r1, [r4, #0]
 8006890:	e7ed      	b.n	800686e <_free_r+0x1e>
 8006892:	461a      	mov	r2, r3
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	b10b      	cbz	r3, 800689c <_free_r+0x4c>
 8006898:	42a3      	cmp	r3, r4
 800689a:	d9fa      	bls.n	8006892 <_free_r+0x42>
 800689c:	6811      	ldr	r1, [r2, #0]
 800689e:	1850      	adds	r0, r2, r1
 80068a0:	42a0      	cmp	r0, r4
 80068a2:	d10b      	bne.n	80068bc <_free_r+0x6c>
 80068a4:	6820      	ldr	r0, [r4, #0]
 80068a6:	4401      	add	r1, r0
 80068a8:	1850      	adds	r0, r2, r1
 80068aa:	4283      	cmp	r3, r0
 80068ac:	6011      	str	r1, [r2, #0]
 80068ae:	d1e0      	bne.n	8006872 <_free_r+0x22>
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	6053      	str	r3, [r2, #4]
 80068b6:	4408      	add	r0, r1
 80068b8:	6010      	str	r0, [r2, #0]
 80068ba:	e7da      	b.n	8006872 <_free_r+0x22>
 80068bc:	d902      	bls.n	80068c4 <_free_r+0x74>
 80068be:	230c      	movs	r3, #12
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	e7d6      	b.n	8006872 <_free_r+0x22>
 80068c4:	6820      	ldr	r0, [r4, #0]
 80068c6:	1821      	adds	r1, r4, r0
 80068c8:	428b      	cmp	r3, r1
 80068ca:	bf04      	itt	eq
 80068cc:	6819      	ldreq	r1, [r3, #0]
 80068ce:	685b      	ldreq	r3, [r3, #4]
 80068d0:	6063      	str	r3, [r4, #4]
 80068d2:	bf04      	itt	eq
 80068d4:	1809      	addeq	r1, r1, r0
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	6054      	str	r4, [r2, #4]
 80068da:	e7ca      	b.n	8006872 <_free_r+0x22>
 80068dc:	bd38      	pop	{r3, r4, r5, pc}
 80068de:	bf00      	nop
 80068e0:	240002f0 	.word	0x240002f0

080068e4 <malloc>:
 80068e4:	4b02      	ldr	r3, [pc, #8]	@ (80068f0 <malloc+0xc>)
 80068e6:	4601      	mov	r1, r0
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	f000 b825 	b.w	8006938 <_malloc_r>
 80068ee:	bf00      	nop
 80068f0:	24000038 	.word	0x24000038

080068f4 <sbrk_aligned>:
 80068f4:	b570      	push	{r4, r5, r6, lr}
 80068f6:	4e0f      	ldr	r6, [pc, #60]	@ (8006934 <sbrk_aligned+0x40>)
 80068f8:	460c      	mov	r4, r1
 80068fa:	6831      	ldr	r1, [r6, #0]
 80068fc:	4605      	mov	r5, r0
 80068fe:	b911      	cbnz	r1, 8006906 <sbrk_aligned+0x12>
 8006900:	f000 fd38 	bl	8007374 <_sbrk_r>
 8006904:	6030      	str	r0, [r6, #0]
 8006906:	4621      	mov	r1, r4
 8006908:	4628      	mov	r0, r5
 800690a:	f000 fd33 	bl	8007374 <_sbrk_r>
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	d103      	bne.n	800691a <sbrk_aligned+0x26>
 8006912:	f04f 34ff 	mov.w	r4, #4294967295
 8006916:	4620      	mov	r0, r4
 8006918:	bd70      	pop	{r4, r5, r6, pc}
 800691a:	1cc4      	adds	r4, r0, #3
 800691c:	f024 0403 	bic.w	r4, r4, #3
 8006920:	42a0      	cmp	r0, r4
 8006922:	d0f8      	beq.n	8006916 <sbrk_aligned+0x22>
 8006924:	1a21      	subs	r1, r4, r0
 8006926:	4628      	mov	r0, r5
 8006928:	f000 fd24 	bl	8007374 <_sbrk_r>
 800692c:	3001      	adds	r0, #1
 800692e:	d1f2      	bne.n	8006916 <sbrk_aligned+0x22>
 8006930:	e7ef      	b.n	8006912 <sbrk_aligned+0x1e>
 8006932:	bf00      	nop
 8006934:	240002ec 	.word	0x240002ec

08006938 <_malloc_r>:
 8006938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800693c:	1ccd      	adds	r5, r1, #3
 800693e:	f025 0503 	bic.w	r5, r5, #3
 8006942:	3508      	adds	r5, #8
 8006944:	2d0c      	cmp	r5, #12
 8006946:	bf38      	it	cc
 8006948:	250c      	movcc	r5, #12
 800694a:	2d00      	cmp	r5, #0
 800694c:	4606      	mov	r6, r0
 800694e:	db01      	blt.n	8006954 <_malloc_r+0x1c>
 8006950:	42a9      	cmp	r1, r5
 8006952:	d904      	bls.n	800695e <_malloc_r+0x26>
 8006954:	230c      	movs	r3, #12
 8006956:	6033      	str	r3, [r6, #0]
 8006958:	2000      	movs	r0, #0
 800695a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800695e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a34 <_malloc_r+0xfc>
 8006962:	f000 f869 	bl	8006a38 <__malloc_lock>
 8006966:	f8d8 3000 	ldr.w	r3, [r8]
 800696a:	461c      	mov	r4, r3
 800696c:	bb44      	cbnz	r4, 80069c0 <_malloc_r+0x88>
 800696e:	4629      	mov	r1, r5
 8006970:	4630      	mov	r0, r6
 8006972:	f7ff ffbf 	bl	80068f4 <sbrk_aligned>
 8006976:	1c43      	adds	r3, r0, #1
 8006978:	4604      	mov	r4, r0
 800697a:	d158      	bne.n	8006a2e <_malloc_r+0xf6>
 800697c:	f8d8 4000 	ldr.w	r4, [r8]
 8006980:	4627      	mov	r7, r4
 8006982:	2f00      	cmp	r7, #0
 8006984:	d143      	bne.n	8006a0e <_malloc_r+0xd6>
 8006986:	2c00      	cmp	r4, #0
 8006988:	d04b      	beq.n	8006a22 <_malloc_r+0xea>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	4639      	mov	r1, r7
 800698e:	4630      	mov	r0, r6
 8006990:	eb04 0903 	add.w	r9, r4, r3
 8006994:	f000 fcee 	bl	8007374 <_sbrk_r>
 8006998:	4581      	cmp	r9, r0
 800699a:	d142      	bne.n	8006a22 <_malloc_r+0xea>
 800699c:	6821      	ldr	r1, [r4, #0]
 800699e:	1a6d      	subs	r5, r5, r1
 80069a0:	4629      	mov	r1, r5
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7ff ffa6 	bl	80068f4 <sbrk_aligned>
 80069a8:	3001      	adds	r0, #1
 80069aa:	d03a      	beq.n	8006a22 <_malloc_r+0xea>
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	442b      	add	r3, r5
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	f8d8 3000 	ldr.w	r3, [r8]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	bb62      	cbnz	r2, 8006a14 <_malloc_r+0xdc>
 80069ba:	f8c8 7000 	str.w	r7, [r8]
 80069be:	e00f      	b.n	80069e0 <_malloc_r+0xa8>
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	1b52      	subs	r2, r2, r5
 80069c4:	d420      	bmi.n	8006a08 <_malloc_r+0xd0>
 80069c6:	2a0b      	cmp	r2, #11
 80069c8:	d917      	bls.n	80069fa <_malloc_r+0xc2>
 80069ca:	1961      	adds	r1, r4, r5
 80069cc:	42a3      	cmp	r3, r4
 80069ce:	6025      	str	r5, [r4, #0]
 80069d0:	bf18      	it	ne
 80069d2:	6059      	strne	r1, [r3, #4]
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	bf08      	it	eq
 80069d8:	f8c8 1000 	streq.w	r1, [r8]
 80069dc:	5162      	str	r2, [r4, r5]
 80069de:	604b      	str	r3, [r1, #4]
 80069e0:	4630      	mov	r0, r6
 80069e2:	f000 f82f 	bl	8006a44 <__malloc_unlock>
 80069e6:	f104 000b 	add.w	r0, r4, #11
 80069ea:	1d23      	adds	r3, r4, #4
 80069ec:	f020 0007 	bic.w	r0, r0, #7
 80069f0:	1ac2      	subs	r2, r0, r3
 80069f2:	bf1c      	itt	ne
 80069f4:	1a1b      	subne	r3, r3, r0
 80069f6:	50a3      	strne	r3, [r4, r2]
 80069f8:	e7af      	b.n	800695a <_malloc_r+0x22>
 80069fa:	6862      	ldr	r2, [r4, #4]
 80069fc:	42a3      	cmp	r3, r4
 80069fe:	bf0c      	ite	eq
 8006a00:	f8c8 2000 	streq.w	r2, [r8]
 8006a04:	605a      	strne	r2, [r3, #4]
 8006a06:	e7eb      	b.n	80069e0 <_malloc_r+0xa8>
 8006a08:	4623      	mov	r3, r4
 8006a0a:	6864      	ldr	r4, [r4, #4]
 8006a0c:	e7ae      	b.n	800696c <_malloc_r+0x34>
 8006a0e:	463c      	mov	r4, r7
 8006a10:	687f      	ldr	r7, [r7, #4]
 8006a12:	e7b6      	b.n	8006982 <_malloc_r+0x4a>
 8006a14:	461a      	mov	r2, r3
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	d1fb      	bne.n	8006a14 <_malloc_r+0xdc>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	6053      	str	r3, [r2, #4]
 8006a20:	e7de      	b.n	80069e0 <_malloc_r+0xa8>
 8006a22:	230c      	movs	r3, #12
 8006a24:	6033      	str	r3, [r6, #0]
 8006a26:	4630      	mov	r0, r6
 8006a28:	f000 f80c 	bl	8006a44 <__malloc_unlock>
 8006a2c:	e794      	b.n	8006958 <_malloc_r+0x20>
 8006a2e:	6005      	str	r5, [r0, #0]
 8006a30:	e7d6      	b.n	80069e0 <_malloc_r+0xa8>
 8006a32:	bf00      	nop
 8006a34:	240002f0 	.word	0x240002f0

08006a38 <__malloc_lock>:
 8006a38:	4801      	ldr	r0, [pc, #4]	@ (8006a40 <__malloc_lock+0x8>)
 8006a3a:	f7ff bf06 	b.w	800684a <__retarget_lock_acquire_recursive>
 8006a3e:	bf00      	nop
 8006a40:	240002e8 	.word	0x240002e8

08006a44 <__malloc_unlock>:
 8006a44:	4801      	ldr	r0, [pc, #4]	@ (8006a4c <__malloc_unlock+0x8>)
 8006a46:	f7ff bf01 	b.w	800684c <__retarget_lock_release_recursive>
 8006a4a:	bf00      	nop
 8006a4c:	240002e8 	.word	0x240002e8

08006a50 <__sfputc_r>:
 8006a50:	6893      	ldr	r3, [r2, #8]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	b410      	push	{r4}
 8006a58:	6093      	str	r3, [r2, #8]
 8006a5a:	da08      	bge.n	8006a6e <__sfputc_r+0x1e>
 8006a5c:	6994      	ldr	r4, [r2, #24]
 8006a5e:	42a3      	cmp	r3, r4
 8006a60:	db01      	blt.n	8006a66 <__sfputc_r+0x16>
 8006a62:	290a      	cmp	r1, #10
 8006a64:	d103      	bne.n	8006a6e <__sfputc_r+0x1e>
 8006a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a6a:	f000 bbcd 	b.w	8007208 <__swbuf_r>
 8006a6e:	6813      	ldr	r3, [r2, #0]
 8006a70:	1c58      	adds	r0, r3, #1
 8006a72:	6010      	str	r0, [r2, #0]
 8006a74:	7019      	strb	r1, [r3, #0]
 8006a76:	4608      	mov	r0, r1
 8006a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <__sfputs_r>:
 8006a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a80:	4606      	mov	r6, r0
 8006a82:	460f      	mov	r7, r1
 8006a84:	4614      	mov	r4, r2
 8006a86:	18d5      	adds	r5, r2, r3
 8006a88:	42ac      	cmp	r4, r5
 8006a8a:	d101      	bne.n	8006a90 <__sfputs_r+0x12>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	e007      	b.n	8006aa0 <__sfputs_r+0x22>
 8006a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a94:	463a      	mov	r2, r7
 8006a96:	4630      	mov	r0, r6
 8006a98:	f7ff ffda 	bl	8006a50 <__sfputc_r>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d1f3      	bne.n	8006a88 <__sfputs_r+0xa>
 8006aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006aa4 <_vfiprintf_r>:
 8006aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa8:	460d      	mov	r5, r1
 8006aaa:	b09d      	sub	sp, #116	@ 0x74
 8006aac:	4614      	mov	r4, r2
 8006aae:	4698      	mov	r8, r3
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	b118      	cbz	r0, 8006abc <_vfiprintf_r+0x18>
 8006ab4:	6a03      	ldr	r3, [r0, #32]
 8006ab6:	b90b      	cbnz	r3, 8006abc <_vfiprintf_r+0x18>
 8006ab8:	f7ff fd0e 	bl	80064d8 <__sinit>
 8006abc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006abe:	07d9      	lsls	r1, r3, #31
 8006ac0:	d405      	bmi.n	8006ace <_vfiprintf_r+0x2a>
 8006ac2:	89ab      	ldrh	r3, [r5, #12]
 8006ac4:	059a      	lsls	r2, r3, #22
 8006ac6:	d402      	bmi.n	8006ace <_vfiprintf_r+0x2a>
 8006ac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aca:	f7ff febe 	bl	800684a <__retarget_lock_acquire_recursive>
 8006ace:	89ab      	ldrh	r3, [r5, #12]
 8006ad0:	071b      	lsls	r3, r3, #28
 8006ad2:	d501      	bpl.n	8006ad8 <_vfiprintf_r+0x34>
 8006ad4:	692b      	ldr	r3, [r5, #16]
 8006ad6:	b99b      	cbnz	r3, 8006b00 <_vfiprintf_r+0x5c>
 8006ad8:	4629      	mov	r1, r5
 8006ada:	4630      	mov	r0, r6
 8006adc:	f000 fbd2 	bl	8007284 <__swsetup_r>
 8006ae0:	b170      	cbz	r0, 8006b00 <_vfiprintf_r+0x5c>
 8006ae2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ae4:	07dc      	lsls	r4, r3, #31
 8006ae6:	d504      	bpl.n	8006af2 <_vfiprintf_r+0x4e>
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aec:	b01d      	add	sp, #116	@ 0x74
 8006aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af2:	89ab      	ldrh	r3, [r5, #12]
 8006af4:	0598      	lsls	r0, r3, #22
 8006af6:	d4f7      	bmi.n	8006ae8 <_vfiprintf_r+0x44>
 8006af8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006afa:	f7ff fea7 	bl	800684c <__retarget_lock_release_recursive>
 8006afe:	e7f3      	b.n	8006ae8 <_vfiprintf_r+0x44>
 8006b00:	2300      	movs	r3, #0
 8006b02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b04:	2320      	movs	r3, #32
 8006b06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b0e:	2330      	movs	r3, #48	@ 0x30
 8006b10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cc0 <_vfiprintf_r+0x21c>
 8006b14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b18:	f04f 0901 	mov.w	r9, #1
 8006b1c:	4623      	mov	r3, r4
 8006b1e:	469a      	mov	sl, r3
 8006b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b24:	b10a      	cbz	r2, 8006b2a <_vfiprintf_r+0x86>
 8006b26:	2a25      	cmp	r2, #37	@ 0x25
 8006b28:	d1f9      	bne.n	8006b1e <_vfiprintf_r+0x7a>
 8006b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b2e:	d00b      	beq.n	8006b48 <_vfiprintf_r+0xa4>
 8006b30:	465b      	mov	r3, fp
 8006b32:	4622      	mov	r2, r4
 8006b34:	4629      	mov	r1, r5
 8006b36:	4630      	mov	r0, r6
 8006b38:	f7ff ffa1 	bl	8006a7e <__sfputs_r>
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	f000 80a7 	beq.w	8006c90 <_vfiprintf_r+0x1ec>
 8006b42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b44:	445a      	add	r2, fp
 8006b46:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b48:	f89a 3000 	ldrb.w	r3, [sl]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 809f 	beq.w	8006c90 <_vfiprintf_r+0x1ec>
 8006b52:	2300      	movs	r3, #0
 8006b54:	f04f 32ff 	mov.w	r2, #4294967295
 8006b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b5c:	f10a 0a01 	add.w	sl, sl, #1
 8006b60:	9304      	str	r3, [sp, #16]
 8006b62:	9307      	str	r3, [sp, #28]
 8006b64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b68:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b6a:	4654      	mov	r4, sl
 8006b6c:	2205      	movs	r2, #5
 8006b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b72:	4853      	ldr	r0, [pc, #332]	@ (8006cc0 <_vfiprintf_r+0x21c>)
 8006b74:	f7f9 fbb4 	bl	80002e0 <memchr>
 8006b78:	9a04      	ldr	r2, [sp, #16]
 8006b7a:	b9d8      	cbnz	r0, 8006bb4 <_vfiprintf_r+0x110>
 8006b7c:	06d1      	lsls	r1, r2, #27
 8006b7e:	bf44      	itt	mi
 8006b80:	2320      	movmi	r3, #32
 8006b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b86:	0713      	lsls	r3, r2, #28
 8006b88:	bf44      	itt	mi
 8006b8a:	232b      	movmi	r3, #43	@ 0x2b
 8006b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b90:	f89a 3000 	ldrb.w	r3, [sl]
 8006b94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b96:	d015      	beq.n	8006bc4 <_vfiprintf_r+0x120>
 8006b98:	9a07      	ldr	r2, [sp, #28]
 8006b9a:	4654      	mov	r4, sl
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f04f 0c0a 	mov.w	ip, #10
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ba8:	3b30      	subs	r3, #48	@ 0x30
 8006baa:	2b09      	cmp	r3, #9
 8006bac:	d94b      	bls.n	8006c46 <_vfiprintf_r+0x1a2>
 8006bae:	b1b0      	cbz	r0, 8006bde <_vfiprintf_r+0x13a>
 8006bb0:	9207      	str	r2, [sp, #28]
 8006bb2:	e014      	b.n	8006bde <_vfiprintf_r+0x13a>
 8006bb4:	eba0 0308 	sub.w	r3, r0, r8
 8006bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	9304      	str	r3, [sp, #16]
 8006bc0:	46a2      	mov	sl, r4
 8006bc2:	e7d2      	b.n	8006b6a <_vfiprintf_r+0xc6>
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	1d19      	adds	r1, r3, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	9103      	str	r1, [sp, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bfbb      	ittet	lt
 8006bd0:	425b      	neglt	r3, r3
 8006bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8006bd6:	9307      	strge	r3, [sp, #28]
 8006bd8:	9307      	strlt	r3, [sp, #28]
 8006bda:	bfb8      	it	lt
 8006bdc:	9204      	strlt	r2, [sp, #16]
 8006bde:	7823      	ldrb	r3, [r4, #0]
 8006be0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006be2:	d10a      	bne.n	8006bfa <_vfiprintf_r+0x156>
 8006be4:	7863      	ldrb	r3, [r4, #1]
 8006be6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006be8:	d132      	bne.n	8006c50 <_vfiprintf_r+0x1ac>
 8006bea:	9b03      	ldr	r3, [sp, #12]
 8006bec:	1d1a      	adds	r2, r3, #4
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	9203      	str	r2, [sp, #12]
 8006bf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bf6:	3402      	adds	r4, #2
 8006bf8:	9305      	str	r3, [sp, #20]
 8006bfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006cd0 <_vfiprintf_r+0x22c>
 8006bfe:	7821      	ldrb	r1, [r4, #0]
 8006c00:	2203      	movs	r2, #3
 8006c02:	4650      	mov	r0, sl
 8006c04:	f7f9 fb6c 	bl	80002e0 <memchr>
 8006c08:	b138      	cbz	r0, 8006c1a <_vfiprintf_r+0x176>
 8006c0a:	9b04      	ldr	r3, [sp, #16]
 8006c0c:	eba0 000a 	sub.w	r0, r0, sl
 8006c10:	2240      	movs	r2, #64	@ 0x40
 8006c12:	4082      	lsls	r2, r0
 8006c14:	4313      	orrs	r3, r2
 8006c16:	3401      	adds	r4, #1
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c1e:	4829      	ldr	r0, [pc, #164]	@ (8006cc4 <_vfiprintf_r+0x220>)
 8006c20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c24:	2206      	movs	r2, #6
 8006c26:	f7f9 fb5b 	bl	80002e0 <memchr>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d03f      	beq.n	8006cae <_vfiprintf_r+0x20a>
 8006c2e:	4b26      	ldr	r3, [pc, #152]	@ (8006cc8 <_vfiprintf_r+0x224>)
 8006c30:	bb1b      	cbnz	r3, 8006c7a <_vfiprintf_r+0x1d6>
 8006c32:	9b03      	ldr	r3, [sp, #12]
 8006c34:	3307      	adds	r3, #7
 8006c36:	f023 0307 	bic.w	r3, r3, #7
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	9303      	str	r3, [sp, #12]
 8006c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c40:	443b      	add	r3, r7
 8006c42:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c44:	e76a      	b.n	8006b1c <_vfiprintf_r+0x78>
 8006c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	e7a8      	b.n	8006ba2 <_vfiprintf_r+0xfe>
 8006c50:	2300      	movs	r3, #0
 8006c52:	3401      	adds	r4, #1
 8006c54:	9305      	str	r3, [sp, #20]
 8006c56:	4619      	mov	r1, r3
 8006c58:	f04f 0c0a 	mov.w	ip, #10
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c62:	3a30      	subs	r2, #48	@ 0x30
 8006c64:	2a09      	cmp	r2, #9
 8006c66:	d903      	bls.n	8006c70 <_vfiprintf_r+0x1cc>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0c6      	beq.n	8006bfa <_vfiprintf_r+0x156>
 8006c6c:	9105      	str	r1, [sp, #20]
 8006c6e:	e7c4      	b.n	8006bfa <_vfiprintf_r+0x156>
 8006c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c74:	4604      	mov	r4, r0
 8006c76:	2301      	movs	r3, #1
 8006c78:	e7f0      	b.n	8006c5c <_vfiprintf_r+0x1b8>
 8006c7a:	ab03      	add	r3, sp, #12
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	462a      	mov	r2, r5
 8006c80:	4b12      	ldr	r3, [pc, #72]	@ (8006ccc <_vfiprintf_r+0x228>)
 8006c82:	a904      	add	r1, sp, #16
 8006c84:	4630      	mov	r0, r6
 8006c86:	f3af 8000 	nop.w
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	1c78      	adds	r0, r7, #1
 8006c8e:	d1d6      	bne.n	8006c3e <_vfiprintf_r+0x19a>
 8006c90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c92:	07d9      	lsls	r1, r3, #31
 8006c94:	d405      	bmi.n	8006ca2 <_vfiprintf_r+0x1fe>
 8006c96:	89ab      	ldrh	r3, [r5, #12]
 8006c98:	059a      	lsls	r2, r3, #22
 8006c9a:	d402      	bmi.n	8006ca2 <_vfiprintf_r+0x1fe>
 8006c9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c9e:	f7ff fdd5 	bl	800684c <__retarget_lock_release_recursive>
 8006ca2:	89ab      	ldrh	r3, [r5, #12]
 8006ca4:	065b      	lsls	r3, r3, #25
 8006ca6:	f53f af1f 	bmi.w	8006ae8 <_vfiprintf_r+0x44>
 8006caa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cac:	e71e      	b.n	8006aec <_vfiprintf_r+0x48>
 8006cae:	ab03      	add	r3, sp, #12
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	462a      	mov	r2, r5
 8006cb4:	4b05      	ldr	r3, [pc, #20]	@ (8006ccc <_vfiprintf_r+0x228>)
 8006cb6:	a904      	add	r1, sp, #16
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f000 f879 	bl	8006db0 <_printf_i>
 8006cbe:	e7e4      	b.n	8006c8a <_vfiprintf_r+0x1e6>
 8006cc0:	080073ec 	.word	0x080073ec
 8006cc4:	080073f6 	.word	0x080073f6
 8006cc8:	00000000 	.word	0x00000000
 8006ccc:	08006a7f 	.word	0x08006a7f
 8006cd0:	080073f2 	.word	0x080073f2

08006cd4 <_printf_common>:
 8006cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd8:	4616      	mov	r6, r2
 8006cda:	4698      	mov	r8, r3
 8006cdc:	688a      	ldr	r2, [r1, #8]
 8006cde:	690b      	ldr	r3, [r1, #16]
 8006ce0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	bfb8      	it	lt
 8006ce8:	4613      	movlt	r3, r2
 8006cea:	6033      	str	r3, [r6, #0]
 8006cec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	b10a      	cbz	r2, 8006cfa <_printf_common+0x26>
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	6033      	str	r3, [r6, #0]
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	0699      	lsls	r1, r3, #26
 8006cfe:	bf42      	ittt	mi
 8006d00:	6833      	ldrmi	r3, [r6, #0]
 8006d02:	3302      	addmi	r3, #2
 8006d04:	6033      	strmi	r3, [r6, #0]
 8006d06:	6825      	ldr	r5, [r4, #0]
 8006d08:	f015 0506 	ands.w	r5, r5, #6
 8006d0c:	d106      	bne.n	8006d1c <_printf_common+0x48>
 8006d0e:	f104 0a19 	add.w	sl, r4, #25
 8006d12:	68e3      	ldr	r3, [r4, #12]
 8006d14:	6832      	ldr	r2, [r6, #0]
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	42ab      	cmp	r3, r5
 8006d1a:	dc26      	bgt.n	8006d6a <_printf_common+0x96>
 8006d1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	3b00      	subs	r3, #0
 8006d24:	bf18      	it	ne
 8006d26:	2301      	movne	r3, #1
 8006d28:	0692      	lsls	r2, r2, #26
 8006d2a:	d42b      	bmi.n	8006d84 <_printf_common+0xb0>
 8006d2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d30:	4641      	mov	r1, r8
 8006d32:	4638      	mov	r0, r7
 8006d34:	47c8      	blx	r9
 8006d36:	3001      	adds	r0, #1
 8006d38:	d01e      	beq.n	8006d78 <_printf_common+0xa4>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	6922      	ldr	r2, [r4, #16]
 8006d3e:	f003 0306 	and.w	r3, r3, #6
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	bf02      	ittt	eq
 8006d46:	68e5      	ldreq	r5, [r4, #12]
 8006d48:	6833      	ldreq	r3, [r6, #0]
 8006d4a:	1aed      	subeq	r5, r5, r3
 8006d4c:	68a3      	ldr	r3, [r4, #8]
 8006d4e:	bf0c      	ite	eq
 8006d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d54:	2500      	movne	r5, #0
 8006d56:	4293      	cmp	r3, r2
 8006d58:	bfc4      	itt	gt
 8006d5a:	1a9b      	subgt	r3, r3, r2
 8006d5c:	18ed      	addgt	r5, r5, r3
 8006d5e:	2600      	movs	r6, #0
 8006d60:	341a      	adds	r4, #26
 8006d62:	42b5      	cmp	r5, r6
 8006d64:	d11a      	bne.n	8006d9c <_printf_common+0xc8>
 8006d66:	2000      	movs	r0, #0
 8006d68:	e008      	b.n	8006d7c <_printf_common+0xa8>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4652      	mov	r2, sl
 8006d6e:	4641      	mov	r1, r8
 8006d70:	4638      	mov	r0, r7
 8006d72:	47c8      	blx	r9
 8006d74:	3001      	adds	r0, #1
 8006d76:	d103      	bne.n	8006d80 <_printf_common+0xac>
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d80:	3501      	adds	r5, #1
 8006d82:	e7c6      	b.n	8006d12 <_printf_common+0x3e>
 8006d84:	18e1      	adds	r1, r4, r3
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	2030      	movs	r0, #48	@ 0x30
 8006d8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d8e:	4422      	add	r2, r4
 8006d90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d98:	3302      	adds	r3, #2
 8006d9a:	e7c7      	b.n	8006d2c <_printf_common+0x58>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	4622      	mov	r2, r4
 8006da0:	4641      	mov	r1, r8
 8006da2:	4638      	mov	r0, r7
 8006da4:	47c8      	blx	r9
 8006da6:	3001      	adds	r0, #1
 8006da8:	d0e6      	beq.n	8006d78 <_printf_common+0xa4>
 8006daa:	3601      	adds	r6, #1
 8006dac:	e7d9      	b.n	8006d62 <_printf_common+0x8e>
	...

08006db0 <_printf_i>:
 8006db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db4:	7e0f      	ldrb	r7, [r1, #24]
 8006db6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006db8:	2f78      	cmp	r7, #120	@ 0x78
 8006dba:	4691      	mov	r9, r2
 8006dbc:	4680      	mov	r8, r0
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	469a      	mov	sl, r3
 8006dc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006dc6:	d807      	bhi.n	8006dd8 <_printf_i+0x28>
 8006dc8:	2f62      	cmp	r7, #98	@ 0x62
 8006dca:	d80a      	bhi.n	8006de2 <_printf_i+0x32>
 8006dcc:	2f00      	cmp	r7, #0
 8006dce:	f000 80d1 	beq.w	8006f74 <_printf_i+0x1c4>
 8006dd2:	2f58      	cmp	r7, #88	@ 0x58
 8006dd4:	f000 80b8 	beq.w	8006f48 <_printf_i+0x198>
 8006dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ddc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006de0:	e03a      	b.n	8006e58 <_printf_i+0xa8>
 8006de2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006de6:	2b15      	cmp	r3, #21
 8006de8:	d8f6      	bhi.n	8006dd8 <_printf_i+0x28>
 8006dea:	a101      	add	r1, pc, #4	@ (adr r1, 8006df0 <_printf_i+0x40>)
 8006dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006df0:	08006e49 	.word	0x08006e49
 8006df4:	08006e5d 	.word	0x08006e5d
 8006df8:	08006dd9 	.word	0x08006dd9
 8006dfc:	08006dd9 	.word	0x08006dd9
 8006e00:	08006dd9 	.word	0x08006dd9
 8006e04:	08006dd9 	.word	0x08006dd9
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006dd9 	.word	0x08006dd9
 8006e10:	08006dd9 	.word	0x08006dd9
 8006e14:	08006dd9 	.word	0x08006dd9
 8006e18:	08006dd9 	.word	0x08006dd9
 8006e1c:	08006f5b 	.word	0x08006f5b
 8006e20:	08006e87 	.word	0x08006e87
 8006e24:	08006f15 	.word	0x08006f15
 8006e28:	08006dd9 	.word	0x08006dd9
 8006e2c:	08006dd9 	.word	0x08006dd9
 8006e30:	08006f7d 	.word	0x08006f7d
 8006e34:	08006dd9 	.word	0x08006dd9
 8006e38:	08006e87 	.word	0x08006e87
 8006e3c:	08006dd9 	.word	0x08006dd9
 8006e40:	08006dd9 	.word	0x08006dd9
 8006e44:	08006f1d 	.word	0x08006f1d
 8006e48:	6833      	ldr	r3, [r6, #0]
 8006e4a:	1d1a      	adds	r2, r3, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6032      	str	r2, [r6, #0]
 8006e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e09c      	b.n	8006f96 <_printf_i+0x1e6>
 8006e5c:	6833      	ldr	r3, [r6, #0]
 8006e5e:	6820      	ldr	r0, [r4, #0]
 8006e60:	1d19      	adds	r1, r3, #4
 8006e62:	6031      	str	r1, [r6, #0]
 8006e64:	0606      	lsls	r6, r0, #24
 8006e66:	d501      	bpl.n	8006e6c <_printf_i+0xbc>
 8006e68:	681d      	ldr	r5, [r3, #0]
 8006e6a:	e003      	b.n	8006e74 <_printf_i+0xc4>
 8006e6c:	0645      	lsls	r5, r0, #25
 8006e6e:	d5fb      	bpl.n	8006e68 <_printf_i+0xb8>
 8006e70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e74:	2d00      	cmp	r5, #0
 8006e76:	da03      	bge.n	8006e80 <_printf_i+0xd0>
 8006e78:	232d      	movs	r3, #45	@ 0x2d
 8006e7a:	426d      	negs	r5, r5
 8006e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e80:	4858      	ldr	r0, [pc, #352]	@ (8006fe4 <_printf_i+0x234>)
 8006e82:	230a      	movs	r3, #10
 8006e84:	e011      	b.n	8006eaa <_printf_i+0xfa>
 8006e86:	6821      	ldr	r1, [r4, #0]
 8006e88:	6833      	ldr	r3, [r6, #0]
 8006e8a:	0608      	lsls	r0, r1, #24
 8006e8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e90:	d402      	bmi.n	8006e98 <_printf_i+0xe8>
 8006e92:	0649      	lsls	r1, r1, #25
 8006e94:	bf48      	it	mi
 8006e96:	b2ad      	uxthmi	r5, r5
 8006e98:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e9a:	4852      	ldr	r0, [pc, #328]	@ (8006fe4 <_printf_i+0x234>)
 8006e9c:	6033      	str	r3, [r6, #0]
 8006e9e:	bf14      	ite	ne
 8006ea0:	230a      	movne	r3, #10
 8006ea2:	2308      	moveq	r3, #8
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006eaa:	6866      	ldr	r6, [r4, #4]
 8006eac:	60a6      	str	r6, [r4, #8]
 8006eae:	2e00      	cmp	r6, #0
 8006eb0:	db05      	blt.n	8006ebe <_printf_i+0x10e>
 8006eb2:	6821      	ldr	r1, [r4, #0]
 8006eb4:	432e      	orrs	r6, r5
 8006eb6:	f021 0104 	bic.w	r1, r1, #4
 8006eba:	6021      	str	r1, [r4, #0]
 8006ebc:	d04b      	beq.n	8006f56 <_printf_i+0x1a6>
 8006ebe:	4616      	mov	r6, r2
 8006ec0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ec4:	fb03 5711 	mls	r7, r3, r1, r5
 8006ec8:	5dc7      	ldrb	r7, [r0, r7]
 8006eca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ece:	462f      	mov	r7, r5
 8006ed0:	42bb      	cmp	r3, r7
 8006ed2:	460d      	mov	r5, r1
 8006ed4:	d9f4      	bls.n	8006ec0 <_printf_i+0x110>
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d10b      	bne.n	8006ef2 <_printf_i+0x142>
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	07df      	lsls	r7, r3, #31
 8006ede:	d508      	bpl.n	8006ef2 <_printf_i+0x142>
 8006ee0:	6923      	ldr	r3, [r4, #16]
 8006ee2:	6861      	ldr	r1, [r4, #4]
 8006ee4:	4299      	cmp	r1, r3
 8006ee6:	bfde      	ittt	le
 8006ee8:	2330      	movle	r3, #48	@ 0x30
 8006eea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006eee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ef2:	1b92      	subs	r2, r2, r6
 8006ef4:	6122      	str	r2, [r4, #16]
 8006ef6:	f8cd a000 	str.w	sl, [sp]
 8006efa:	464b      	mov	r3, r9
 8006efc:	aa03      	add	r2, sp, #12
 8006efe:	4621      	mov	r1, r4
 8006f00:	4640      	mov	r0, r8
 8006f02:	f7ff fee7 	bl	8006cd4 <_printf_common>
 8006f06:	3001      	adds	r0, #1
 8006f08:	d14a      	bne.n	8006fa0 <_printf_i+0x1f0>
 8006f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0e:	b004      	add	sp, #16
 8006f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	f043 0320 	orr.w	r3, r3, #32
 8006f1a:	6023      	str	r3, [r4, #0]
 8006f1c:	4832      	ldr	r0, [pc, #200]	@ (8006fe8 <_printf_i+0x238>)
 8006f1e:	2778      	movs	r7, #120	@ 0x78
 8006f20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	6831      	ldr	r1, [r6, #0]
 8006f28:	061f      	lsls	r7, r3, #24
 8006f2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f2e:	d402      	bmi.n	8006f36 <_printf_i+0x186>
 8006f30:	065f      	lsls	r7, r3, #25
 8006f32:	bf48      	it	mi
 8006f34:	b2ad      	uxthmi	r5, r5
 8006f36:	6031      	str	r1, [r6, #0]
 8006f38:	07d9      	lsls	r1, r3, #31
 8006f3a:	bf44      	itt	mi
 8006f3c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f40:	6023      	strmi	r3, [r4, #0]
 8006f42:	b11d      	cbz	r5, 8006f4c <_printf_i+0x19c>
 8006f44:	2310      	movs	r3, #16
 8006f46:	e7ad      	b.n	8006ea4 <_printf_i+0xf4>
 8006f48:	4826      	ldr	r0, [pc, #152]	@ (8006fe4 <_printf_i+0x234>)
 8006f4a:	e7e9      	b.n	8006f20 <_printf_i+0x170>
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	f023 0320 	bic.w	r3, r3, #32
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	e7f6      	b.n	8006f44 <_printf_i+0x194>
 8006f56:	4616      	mov	r6, r2
 8006f58:	e7bd      	b.n	8006ed6 <_printf_i+0x126>
 8006f5a:	6833      	ldr	r3, [r6, #0]
 8006f5c:	6825      	ldr	r5, [r4, #0]
 8006f5e:	6961      	ldr	r1, [r4, #20]
 8006f60:	1d18      	adds	r0, r3, #4
 8006f62:	6030      	str	r0, [r6, #0]
 8006f64:	062e      	lsls	r6, r5, #24
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	d501      	bpl.n	8006f6e <_printf_i+0x1be>
 8006f6a:	6019      	str	r1, [r3, #0]
 8006f6c:	e002      	b.n	8006f74 <_printf_i+0x1c4>
 8006f6e:	0668      	lsls	r0, r5, #25
 8006f70:	d5fb      	bpl.n	8006f6a <_printf_i+0x1ba>
 8006f72:	8019      	strh	r1, [r3, #0]
 8006f74:	2300      	movs	r3, #0
 8006f76:	6123      	str	r3, [r4, #16]
 8006f78:	4616      	mov	r6, r2
 8006f7a:	e7bc      	b.n	8006ef6 <_printf_i+0x146>
 8006f7c:	6833      	ldr	r3, [r6, #0]
 8006f7e:	1d1a      	adds	r2, r3, #4
 8006f80:	6032      	str	r2, [r6, #0]
 8006f82:	681e      	ldr	r6, [r3, #0]
 8006f84:	6862      	ldr	r2, [r4, #4]
 8006f86:	2100      	movs	r1, #0
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f7f9 f9a9 	bl	80002e0 <memchr>
 8006f8e:	b108      	cbz	r0, 8006f94 <_printf_i+0x1e4>
 8006f90:	1b80      	subs	r0, r0, r6
 8006f92:	6060      	str	r0, [r4, #4]
 8006f94:	6863      	ldr	r3, [r4, #4]
 8006f96:	6123      	str	r3, [r4, #16]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f9e:	e7aa      	b.n	8006ef6 <_printf_i+0x146>
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	4632      	mov	r2, r6
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	47d0      	blx	sl
 8006faa:	3001      	adds	r0, #1
 8006fac:	d0ad      	beq.n	8006f0a <_printf_i+0x15a>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	079b      	lsls	r3, r3, #30
 8006fb2:	d413      	bmi.n	8006fdc <_printf_i+0x22c>
 8006fb4:	68e0      	ldr	r0, [r4, #12]
 8006fb6:	9b03      	ldr	r3, [sp, #12]
 8006fb8:	4298      	cmp	r0, r3
 8006fba:	bfb8      	it	lt
 8006fbc:	4618      	movlt	r0, r3
 8006fbe:	e7a6      	b.n	8006f0e <_printf_i+0x15e>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4632      	mov	r2, r6
 8006fc4:	4649      	mov	r1, r9
 8006fc6:	4640      	mov	r0, r8
 8006fc8:	47d0      	blx	sl
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d09d      	beq.n	8006f0a <_printf_i+0x15a>
 8006fce:	3501      	adds	r5, #1
 8006fd0:	68e3      	ldr	r3, [r4, #12]
 8006fd2:	9903      	ldr	r1, [sp, #12]
 8006fd4:	1a5b      	subs	r3, r3, r1
 8006fd6:	42ab      	cmp	r3, r5
 8006fd8:	dcf2      	bgt.n	8006fc0 <_printf_i+0x210>
 8006fda:	e7eb      	b.n	8006fb4 <_printf_i+0x204>
 8006fdc:	2500      	movs	r5, #0
 8006fde:	f104 0619 	add.w	r6, r4, #25
 8006fe2:	e7f5      	b.n	8006fd0 <_printf_i+0x220>
 8006fe4:	080073fd 	.word	0x080073fd
 8006fe8:	0800740e 	.word	0x0800740e

08006fec <__sflush_r>:
 8006fec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff4:	0716      	lsls	r6, r2, #28
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	d454      	bmi.n	80070a6 <__sflush_r+0xba>
 8006ffc:	684b      	ldr	r3, [r1, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	dc02      	bgt.n	8007008 <__sflush_r+0x1c>
 8007002:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007004:	2b00      	cmp	r3, #0
 8007006:	dd48      	ble.n	800709a <__sflush_r+0xae>
 8007008:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800700a:	2e00      	cmp	r6, #0
 800700c:	d045      	beq.n	800709a <__sflush_r+0xae>
 800700e:	2300      	movs	r3, #0
 8007010:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007014:	682f      	ldr	r7, [r5, #0]
 8007016:	6a21      	ldr	r1, [r4, #32]
 8007018:	602b      	str	r3, [r5, #0]
 800701a:	d030      	beq.n	800707e <__sflush_r+0x92>
 800701c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800701e:	89a3      	ldrh	r3, [r4, #12]
 8007020:	0759      	lsls	r1, r3, #29
 8007022:	d505      	bpl.n	8007030 <__sflush_r+0x44>
 8007024:	6863      	ldr	r3, [r4, #4]
 8007026:	1ad2      	subs	r2, r2, r3
 8007028:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800702a:	b10b      	cbz	r3, 8007030 <__sflush_r+0x44>
 800702c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	2300      	movs	r3, #0
 8007032:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007034:	6a21      	ldr	r1, [r4, #32]
 8007036:	4628      	mov	r0, r5
 8007038:	47b0      	blx	r6
 800703a:	1c43      	adds	r3, r0, #1
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	d106      	bne.n	800704e <__sflush_r+0x62>
 8007040:	6829      	ldr	r1, [r5, #0]
 8007042:	291d      	cmp	r1, #29
 8007044:	d82b      	bhi.n	800709e <__sflush_r+0xb2>
 8007046:	4a2a      	ldr	r2, [pc, #168]	@ (80070f0 <__sflush_r+0x104>)
 8007048:	40ca      	lsrs	r2, r1
 800704a:	07d6      	lsls	r6, r2, #31
 800704c:	d527      	bpl.n	800709e <__sflush_r+0xb2>
 800704e:	2200      	movs	r2, #0
 8007050:	6062      	str	r2, [r4, #4]
 8007052:	04d9      	lsls	r1, r3, #19
 8007054:	6922      	ldr	r2, [r4, #16]
 8007056:	6022      	str	r2, [r4, #0]
 8007058:	d504      	bpl.n	8007064 <__sflush_r+0x78>
 800705a:	1c42      	adds	r2, r0, #1
 800705c:	d101      	bne.n	8007062 <__sflush_r+0x76>
 800705e:	682b      	ldr	r3, [r5, #0]
 8007060:	b903      	cbnz	r3, 8007064 <__sflush_r+0x78>
 8007062:	6560      	str	r0, [r4, #84]	@ 0x54
 8007064:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007066:	602f      	str	r7, [r5, #0]
 8007068:	b1b9      	cbz	r1, 800709a <__sflush_r+0xae>
 800706a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800706e:	4299      	cmp	r1, r3
 8007070:	d002      	beq.n	8007078 <__sflush_r+0x8c>
 8007072:	4628      	mov	r0, r5
 8007074:	f7ff fbec 	bl	8006850 <_free_r>
 8007078:	2300      	movs	r3, #0
 800707a:	6363      	str	r3, [r4, #52]	@ 0x34
 800707c:	e00d      	b.n	800709a <__sflush_r+0xae>
 800707e:	2301      	movs	r3, #1
 8007080:	4628      	mov	r0, r5
 8007082:	47b0      	blx	r6
 8007084:	4602      	mov	r2, r0
 8007086:	1c50      	adds	r0, r2, #1
 8007088:	d1c9      	bne.n	800701e <__sflush_r+0x32>
 800708a:	682b      	ldr	r3, [r5, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0c6      	beq.n	800701e <__sflush_r+0x32>
 8007090:	2b1d      	cmp	r3, #29
 8007092:	d001      	beq.n	8007098 <__sflush_r+0xac>
 8007094:	2b16      	cmp	r3, #22
 8007096:	d11e      	bne.n	80070d6 <__sflush_r+0xea>
 8007098:	602f      	str	r7, [r5, #0]
 800709a:	2000      	movs	r0, #0
 800709c:	e022      	b.n	80070e4 <__sflush_r+0xf8>
 800709e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070a2:	b21b      	sxth	r3, r3
 80070a4:	e01b      	b.n	80070de <__sflush_r+0xf2>
 80070a6:	690f      	ldr	r7, [r1, #16]
 80070a8:	2f00      	cmp	r7, #0
 80070aa:	d0f6      	beq.n	800709a <__sflush_r+0xae>
 80070ac:	0793      	lsls	r3, r2, #30
 80070ae:	680e      	ldr	r6, [r1, #0]
 80070b0:	bf08      	it	eq
 80070b2:	694b      	ldreq	r3, [r1, #20]
 80070b4:	600f      	str	r7, [r1, #0]
 80070b6:	bf18      	it	ne
 80070b8:	2300      	movne	r3, #0
 80070ba:	eba6 0807 	sub.w	r8, r6, r7
 80070be:	608b      	str	r3, [r1, #8]
 80070c0:	f1b8 0f00 	cmp.w	r8, #0
 80070c4:	dde9      	ble.n	800709a <__sflush_r+0xae>
 80070c6:	6a21      	ldr	r1, [r4, #32]
 80070c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070ca:	4643      	mov	r3, r8
 80070cc:	463a      	mov	r2, r7
 80070ce:	4628      	mov	r0, r5
 80070d0:	47b0      	blx	r6
 80070d2:	2800      	cmp	r0, #0
 80070d4:	dc08      	bgt.n	80070e8 <__sflush_r+0xfc>
 80070d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070de:	81a3      	strh	r3, [r4, #12]
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
 80070e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e8:	4407      	add	r7, r0
 80070ea:	eba8 0800 	sub.w	r8, r8, r0
 80070ee:	e7e7      	b.n	80070c0 <__sflush_r+0xd4>
 80070f0:	20400001 	.word	0x20400001

080070f4 <_fflush_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	690b      	ldr	r3, [r1, #16]
 80070f8:	4605      	mov	r5, r0
 80070fa:	460c      	mov	r4, r1
 80070fc:	b913      	cbnz	r3, 8007104 <_fflush_r+0x10>
 80070fe:	2500      	movs	r5, #0
 8007100:	4628      	mov	r0, r5
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	b118      	cbz	r0, 800710e <_fflush_r+0x1a>
 8007106:	6a03      	ldr	r3, [r0, #32]
 8007108:	b90b      	cbnz	r3, 800710e <_fflush_r+0x1a>
 800710a:	f7ff f9e5 	bl	80064d8 <__sinit>
 800710e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0f3      	beq.n	80070fe <_fflush_r+0xa>
 8007116:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007118:	07d0      	lsls	r0, r2, #31
 800711a:	d404      	bmi.n	8007126 <_fflush_r+0x32>
 800711c:	0599      	lsls	r1, r3, #22
 800711e:	d402      	bmi.n	8007126 <_fflush_r+0x32>
 8007120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007122:	f7ff fb92 	bl	800684a <__retarget_lock_acquire_recursive>
 8007126:	4628      	mov	r0, r5
 8007128:	4621      	mov	r1, r4
 800712a:	f7ff ff5f 	bl	8006fec <__sflush_r>
 800712e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007130:	07da      	lsls	r2, r3, #31
 8007132:	4605      	mov	r5, r0
 8007134:	d4e4      	bmi.n	8007100 <_fflush_r+0xc>
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	059b      	lsls	r3, r3, #22
 800713a:	d4e1      	bmi.n	8007100 <_fflush_r+0xc>
 800713c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800713e:	f7ff fb85 	bl	800684c <__retarget_lock_release_recursive>
 8007142:	e7dd      	b.n	8007100 <_fflush_r+0xc>

08007144 <__swhatbuf_r>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	460c      	mov	r4, r1
 8007148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800714c:	2900      	cmp	r1, #0
 800714e:	b096      	sub	sp, #88	@ 0x58
 8007150:	4615      	mov	r5, r2
 8007152:	461e      	mov	r6, r3
 8007154:	da0d      	bge.n	8007172 <__swhatbuf_r+0x2e>
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800715c:	f04f 0100 	mov.w	r1, #0
 8007160:	bf14      	ite	ne
 8007162:	2340      	movne	r3, #64	@ 0x40
 8007164:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007168:	2000      	movs	r0, #0
 800716a:	6031      	str	r1, [r6, #0]
 800716c:	602b      	str	r3, [r5, #0]
 800716e:	b016      	add	sp, #88	@ 0x58
 8007170:	bd70      	pop	{r4, r5, r6, pc}
 8007172:	466a      	mov	r2, sp
 8007174:	f000 f8dc 	bl	8007330 <_fstat_r>
 8007178:	2800      	cmp	r0, #0
 800717a:	dbec      	blt.n	8007156 <__swhatbuf_r+0x12>
 800717c:	9901      	ldr	r1, [sp, #4]
 800717e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007182:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007186:	4259      	negs	r1, r3
 8007188:	4159      	adcs	r1, r3
 800718a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800718e:	e7eb      	b.n	8007168 <__swhatbuf_r+0x24>

08007190 <__smakebuf_r>:
 8007190:	898b      	ldrh	r3, [r1, #12]
 8007192:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007194:	079d      	lsls	r5, r3, #30
 8007196:	4606      	mov	r6, r0
 8007198:	460c      	mov	r4, r1
 800719a:	d507      	bpl.n	80071ac <__smakebuf_r+0x1c>
 800719c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	6123      	str	r3, [r4, #16]
 80071a4:	2301      	movs	r3, #1
 80071a6:	6163      	str	r3, [r4, #20]
 80071a8:	b003      	add	sp, #12
 80071aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ac:	ab01      	add	r3, sp, #4
 80071ae:	466a      	mov	r2, sp
 80071b0:	f7ff ffc8 	bl	8007144 <__swhatbuf_r>
 80071b4:	9f00      	ldr	r7, [sp, #0]
 80071b6:	4605      	mov	r5, r0
 80071b8:	4639      	mov	r1, r7
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7ff fbbc 	bl	8006938 <_malloc_r>
 80071c0:	b948      	cbnz	r0, 80071d6 <__smakebuf_r+0x46>
 80071c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071c6:	059a      	lsls	r2, r3, #22
 80071c8:	d4ee      	bmi.n	80071a8 <__smakebuf_r+0x18>
 80071ca:	f023 0303 	bic.w	r3, r3, #3
 80071ce:	f043 0302 	orr.w	r3, r3, #2
 80071d2:	81a3      	strh	r3, [r4, #12]
 80071d4:	e7e2      	b.n	800719c <__smakebuf_r+0xc>
 80071d6:	89a3      	ldrh	r3, [r4, #12]
 80071d8:	6020      	str	r0, [r4, #0]
 80071da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	9b01      	ldr	r3, [sp, #4]
 80071e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071e6:	b15b      	cbz	r3, 8007200 <__smakebuf_r+0x70>
 80071e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ec:	4630      	mov	r0, r6
 80071ee:	f000 f8b1 	bl	8007354 <_isatty_r>
 80071f2:	b128      	cbz	r0, 8007200 <__smakebuf_r+0x70>
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	f043 0301 	orr.w	r3, r3, #1
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	431d      	orrs	r5, r3
 8007204:	81a5      	strh	r5, [r4, #12]
 8007206:	e7cf      	b.n	80071a8 <__smakebuf_r+0x18>

08007208 <__swbuf_r>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	460e      	mov	r6, r1
 800720c:	4614      	mov	r4, r2
 800720e:	4605      	mov	r5, r0
 8007210:	b118      	cbz	r0, 800721a <__swbuf_r+0x12>
 8007212:	6a03      	ldr	r3, [r0, #32]
 8007214:	b90b      	cbnz	r3, 800721a <__swbuf_r+0x12>
 8007216:	f7ff f95f 	bl	80064d8 <__sinit>
 800721a:	69a3      	ldr	r3, [r4, #24]
 800721c:	60a3      	str	r3, [r4, #8]
 800721e:	89a3      	ldrh	r3, [r4, #12]
 8007220:	071a      	lsls	r2, r3, #28
 8007222:	d501      	bpl.n	8007228 <__swbuf_r+0x20>
 8007224:	6923      	ldr	r3, [r4, #16]
 8007226:	b943      	cbnz	r3, 800723a <__swbuf_r+0x32>
 8007228:	4621      	mov	r1, r4
 800722a:	4628      	mov	r0, r5
 800722c:	f000 f82a 	bl	8007284 <__swsetup_r>
 8007230:	b118      	cbz	r0, 800723a <__swbuf_r+0x32>
 8007232:	f04f 37ff 	mov.w	r7, #4294967295
 8007236:	4638      	mov	r0, r7
 8007238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	6922      	ldr	r2, [r4, #16]
 800723e:	1a98      	subs	r0, r3, r2
 8007240:	6963      	ldr	r3, [r4, #20]
 8007242:	b2f6      	uxtb	r6, r6
 8007244:	4283      	cmp	r3, r0
 8007246:	4637      	mov	r7, r6
 8007248:	dc05      	bgt.n	8007256 <__swbuf_r+0x4e>
 800724a:	4621      	mov	r1, r4
 800724c:	4628      	mov	r0, r5
 800724e:	f7ff ff51 	bl	80070f4 <_fflush_r>
 8007252:	2800      	cmp	r0, #0
 8007254:	d1ed      	bne.n	8007232 <__swbuf_r+0x2a>
 8007256:	68a3      	ldr	r3, [r4, #8]
 8007258:	3b01      	subs	r3, #1
 800725a:	60a3      	str	r3, [r4, #8]
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	6022      	str	r2, [r4, #0]
 8007262:	701e      	strb	r6, [r3, #0]
 8007264:	6962      	ldr	r2, [r4, #20]
 8007266:	1c43      	adds	r3, r0, #1
 8007268:	429a      	cmp	r2, r3
 800726a:	d004      	beq.n	8007276 <__swbuf_r+0x6e>
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	07db      	lsls	r3, r3, #31
 8007270:	d5e1      	bpl.n	8007236 <__swbuf_r+0x2e>
 8007272:	2e0a      	cmp	r6, #10
 8007274:	d1df      	bne.n	8007236 <__swbuf_r+0x2e>
 8007276:	4621      	mov	r1, r4
 8007278:	4628      	mov	r0, r5
 800727a:	f7ff ff3b 	bl	80070f4 <_fflush_r>
 800727e:	2800      	cmp	r0, #0
 8007280:	d0d9      	beq.n	8007236 <__swbuf_r+0x2e>
 8007282:	e7d6      	b.n	8007232 <__swbuf_r+0x2a>

08007284 <__swsetup_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4b29      	ldr	r3, [pc, #164]	@ (800732c <__swsetup_r+0xa8>)
 8007288:	4605      	mov	r5, r0
 800728a:	6818      	ldr	r0, [r3, #0]
 800728c:	460c      	mov	r4, r1
 800728e:	b118      	cbz	r0, 8007298 <__swsetup_r+0x14>
 8007290:	6a03      	ldr	r3, [r0, #32]
 8007292:	b90b      	cbnz	r3, 8007298 <__swsetup_r+0x14>
 8007294:	f7ff f920 	bl	80064d8 <__sinit>
 8007298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800729c:	0719      	lsls	r1, r3, #28
 800729e:	d422      	bmi.n	80072e6 <__swsetup_r+0x62>
 80072a0:	06da      	lsls	r2, r3, #27
 80072a2:	d407      	bmi.n	80072b4 <__swsetup_r+0x30>
 80072a4:	2209      	movs	r2, #9
 80072a6:	602a      	str	r2, [r5, #0]
 80072a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	f04f 30ff 	mov.w	r0, #4294967295
 80072b2:	e033      	b.n	800731c <__swsetup_r+0x98>
 80072b4:	0758      	lsls	r0, r3, #29
 80072b6:	d512      	bpl.n	80072de <__swsetup_r+0x5a>
 80072b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072ba:	b141      	cbz	r1, 80072ce <__swsetup_r+0x4a>
 80072bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072c0:	4299      	cmp	r1, r3
 80072c2:	d002      	beq.n	80072ca <__swsetup_r+0x46>
 80072c4:	4628      	mov	r0, r5
 80072c6:	f7ff fac3 	bl	8006850 <_free_r>
 80072ca:	2300      	movs	r3, #0
 80072cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072d4:	81a3      	strh	r3, [r4, #12]
 80072d6:	2300      	movs	r3, #0
 80072d8:	6063      	str	r3, [r4, #4]
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	89a3      	ldrh	r3, [r4, #12]
 80072e0:	f043 0308 	orr.w	r3, r3, #8
 80072e4:	81a3      	strh	r3, [r4, #12]
 80072e6:	6923      	ldr	r3, [r4, #16]
 80072e8:	b94b      	cbnz	r3, 80072fe <__swsetup_r+0x7a>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80072f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072f4:	d003      	beq.n	80072fe <__swsetup_r+0x7a>
 80072f6:	4621      	mov	r1, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	f7ff ff49 	bl	8007190 <__smakebuf_r>
 80072fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007302:	f013 0201 	ands.w	r2, r3, #1
 8007306:	d00a      	beq.n	800731e <__swsetup_r+0x9a>
 8007308:	2200      	movs	r2, #0
 800730a:	60a2      	str	r2, [r4, #8]
 800730c:	6962      	ldr	r2, [r4, #20]
 800730e:	4252      	negs	r2, r2
 8007310:	61a2      	str	r2, [r4, #24]
 8007312:	6922      	ldr	r2, [r4, #16]
 8007314:	b942      	cbnz	r2, 8007328 <__swsetup_r+0xa4>
 8007316:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800731a:	d1c5      	bne.n	80072a8 <__swsetup_r+0x24>
 800731c:	bd38      	pop	{r3, r4, r5, pc}
 800731e:	0799      	lsls	r1, r3, #30
 8007320:	bf58      	it	pl
 8007322:	6962      	ldrpl	r2, [r4, #20]
 8007324:	60a2      	str	r2, [r4, #8]
 8007326:	e7f4      	b.n	8007312 <__swsetup_r+0x8e>
 8007328:	2000      	movs	r0, #0
 800732a:	e7f7      	b.n	800731c <__swsetup_r+0x98>
 800732c:	24000038 	.word	0x24000038

08007330 <_fstat_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4d07      	ldr	r5, [pc, #28]	@ (8007350 <_fstat_r+0x20>)
 8007334:	2300      	movs	r3, #0
 8007336:	4604      	mov	r4, r0
 8007338:	4608      	mov	r0, r1
 800733a:	4611      	mov	r1, r2
 800733c:	602b      	str	r3, [r5, #0]
 800733e:	f7f9 fe49 	bl	8000fd4 <_fstat>
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	d102      	bne.n	800734c <_fstat_r+0x1c>
 8007346:	682b      	ldr	r3, [r5, #0]
 8007348:	b103      	cbz	r3, 800734c <_fstat_r+0x1c>
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	bd38      	pop	{r3, r4, r5, pc}
 800734e:	bf00      	nop
 8007350:	240002e4 	.word	0x240002e4

08007354 <_isatty_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4d06      	ldr	r5, [pc, #24]	@ (8007370 <_isatty_r+0x1c>)
 8007358:	2300      	movs	r3, #0
 800735a:	4604      	mov	r4, r0
 800735c:	4608      	mov	r0, r1
 800735e:	602b      	str	r3, [r5, #0]
 8007360:	f7f9 fe48 	bl	8000ff4 <_isatty>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_isatty_r+0x1a>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_isatty_r+0x1a>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	240002e4 	.word	0x240002e4

08007374 <_sbrk_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d06      	ldr	r5, [pc, #24]	@ (8007390 <_sbrk_r+0x1c>)
 8007378:	2300      	movs	r3, #0
 800737a:	4604      	mov	r4, r0
 800737c:	4608      	mov	r0, r1
 800737e:	602b      	str	r3, [r5, #0]
 8007380:	f7f9 fe50 	bl	8001024 <_sbrk>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d102      	bne.n	800738e <_sbrk_r+0x1a>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b103      	cbz	r3, 800738e <_sbrk_r+0x1a>
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	240002e4 	.word	0x240002e4

08007394 <_init>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	bf00      	nop
 8007398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739a:	bc08      	pop	{r3}
 800739c:	469e      	mov	lr, r3
 800739e:	4770      	bx	lr

080073a0 <_fini>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	bf00      	nop
 80073a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a6:	bc08      	pop	{r3}
 80073a8:	469e      	mov	lr, r3
 80073aa:	4770      	bx	lr
