
Nucleo SPI_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000427c  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08104514  08104514  00005514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810452c  0810452c  0000552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08104530  08104530  00005530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  10000000  08104534  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001e8  10000010  08104544  00006010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100001f8  08104544  000061f8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000101c6  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002206  00000000  00000000  00016206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000f18  00000000  00000000  00018410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ba5  00000000  00000000  00019328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003ac1a  00000000  00000000  00019ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00013506  00000000  00000000  00054ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00189e13  00000000  00000000  00067fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001f1e00  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003fa8  00000000  00000000  001f1e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000051  00000000  00000000  001f5dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081044fc 	.word	0x081044fc

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	081044fc 	.word	0x081044fc

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100308:	b480      	push	{r7}
 810030a:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 810030c:	4b0a      	ldr	r3, [pc, #40]	@ (8100338 <ExitRun0Mode+0x30>)
 810030e:	68db      	ldr	r3, [r3, #12]
 8100310:	f023 0306 	bic.w	r3, r3, #6
 8100314:	4a08      	ldr	r2, [pc, #32]	@ (8100338 <ExitRun0Mode+0x30>)
 8100316:	f043 0302 	orr.w	r3, r3, #2
 810031a:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 810031c:	bf00      	nop
 810031e:	4b06      	ldr	r3, [pc, #24]	@ (8100338 <ExitRun0Mode+0x30>)
 8100320:	685b      	ldr	r3, [r3, #4]
 8100322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100326:	2b00      	cmp	r3, #0
 8100328:	d0f9      	beq.n	810031e <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 810032a:	bf00      	nop
 810032c:	bf00      	nop
 810032e:	46bd      	mov	sp, r7
 8100330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100334:	4770      	bx	lr
 8100336:	bf00      	nop
 8100338:	58024800 	.word	0x58024800

0810033c <IPC_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void IPC_Init(void)
{
 810033c:	b480      	push	{r7}
 810033e:	af00      	add	r7, sp, #0
  // HSEM clock is already enabled in your boot-sync block.
  // No notification needed on CM4 (sender-only); we'll just FastTake+Release.
  // If you ever send both ways, also enable HSEM1_IRQn & ActivateNotification on the receiving core.
}
 8100340:	bf00      	nop
 8100342:	46bd      	mov	sp, r7
 8100344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100348:	4770      	bx	lr
	...

0810034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810034c:	b580      	push	{r7, lr}
 810034e:	b082      	sub	sp, #8
 8100350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100352:	4b20      	ldr	r3, [pc, #128]	@ (81003d4 <main+0x88>)
 8100354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100358:	4a1e      	ldr	r2, [pc, #120]	@ (81003d4 <main+0x88>)
 810035a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810035e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100362:	4b1c      	ldr	r3, [pc, #112]	@ (81003d4 <main+0x88>)
 8100364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810036c:	607b      	str	r3, [r7, #4]
 810036e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100370:	2001      	movs	r0, #1
 8100372:	f002 fdb3 	bl	8102edc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100376:	f002 fe3d 	bl	8102ff4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810037a:	2201      	movs	r2, #1
 810037c:	2102      	movs	r1, #2
 810037e:	2000      	movs	r0, #0
 8100380:	f002 fdbe 	bl	8102f00 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100384:	4b14      	ldr	r3, [pc, #80]	@ (81003d8 <main+0x8c>)
 8100386:	681b      	ldr	r3, [r3, #0]
 8100388:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 810038c:	2b70      	cmp	r3, #112	@ 0x70
 810038e:	d108      	bne.n	81003a2 <main+0x56>
 8100390:	4b12      	ldr	r3, [pc, #72]	@ (81003dc <main+0x90>)
 8100392:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100396:	4a11      	ldr	r2, [pc, #68]	@ (81003dc <main+0x90>)
 8100398:	f043 0301 	orr.w	r3, r3, #1
 810039c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81003a0:	e007      	b.n	81003b2 <main+0x66>
 81003a2:	4b0e      	ldr	r3, [pc, #56]	@ (81003dc <main+0x90>)
 81003a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81003a8:	4a0c      	ldr	r2, [pc, #48]	@ (81003dc <main+0x90>)
 81003aa:	f043 0301 	orr.w	r3, r3, #1
 81003ae:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81003b2:	f000 fad9 	bl	8100968 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81003b6:	f000 f8e3 	bl	8100580 <MX_GPIO_Init>
  MX_DMA_Init();
 81003ba:	f000 f8b9 	bl	8100530 <MX_DMA_Init>
  MX_SPI1_Init();
 81003be:	f000 f811 	bl	81003e4 <MX_SPI1_Init>
  MX_TIM3_Init();
 81003c2:	f000 f865 	bl	8100490 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  IPC_Init();
 81003c6:	f7ff ffb9 	bl	810033c <IPC_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 81003ca:	4805      	ldr	r0, [pc, #20]	@ (81003e0 <main+0x94>)
 81003cc:	f003 fbea 	bl	8103ba4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81003d0:	bf00      	nop
 81003d2:	e7fd      	b.n	81003d0 <main+0x84>
 81003d4:	58024400 	.word	0x58024400
 81003d8:	e000ed00 	.word	0xe000ed00
 81003dc:	58026400 	.word	0x58026400
 81003e0:	100001a4 	.word	0x100001a4

081003e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 81003e4:	b580      	push	{r7, lr}
 81003e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 81003e8:	4b27      	ldr	r3, [pc, #156]	@ (8100488 <MX_SPI1_Init+0xa4>)
 81003ea:	4a28      	ldr	r2, [pc, #160]	@ (810048c <MX_SPI1_Init+0xa8>)
 81003ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81003ee:	4b26      	ldr	r3, [pc, #152]	@ (8100488 <MX_SPI1_Init+0xa4>)
 81003f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 81003f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 81003f6:	4b24      	ldr	r3, [pc, #144]	@ (8100488 <MX_SPI1_Init+0xa4>)
 81003f8:	2200      	movs	r2, #0
 81003fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_24BIT;
 81003fc:	4b22      	ldr	r3, [pc, #136]	@ (8100488 <MX_SPI1_Init+0xa4>)
 81003fe:	2217      	movs	r2, #23
 8100400:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100402:	4b21      	ldr	r3, [pc, #132]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100404:	2200      	movs	r2, #0
 8100406:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8100408:	4b1f      	ldr	r3, [pc, #124]	@ (8100488 <MX_SPI1_Init+0xa4>)
 810040a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810040e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8100410:	4b1d      	ldr	r3, [pc, #116]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100412:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8100416:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100418:	4b1b      	ldr	r3, [pc, #108]	@ (8100488 <MX_SPI1_Init+0xa4>)
 810041a:	2200      	movs	r2, #0
 810041c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810041e:	4b1a      	ldr	r3, [pc, #104]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100420:	2200      	movs	r2, #0
 8100422:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8100424:	4b18      	ldr	r3, [pc, #96]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100426:	2200      	movs	r2, #0
 8100428:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810042a:	4b17      	ldr	r3, [pc, #92]	@ (8100488 <MX_SPI1_Init+0xa4>)
 810042c:	2200      	movs	r2, #0
 810042e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8100430:	4b15      	ldr	r3, [pc, #84]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100432:	2200      	movs	r2, #0
 8100434:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100436:	4b14      	ldr	r3, [pc, #80]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100438:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 810043c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810043e:	4b12      	ldr	r3, [pc, #72]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100440:	2200      	movs	r2, #0
 8100442:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100444:	4b10      	ldr	r3, [pc, #64]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100446:	2200      	movs	r2, #0
 8100448:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810044a:	4b0f      	ldr	r3, [pc, #60]	@ (8100488 <MX_SPI1_Init+0xa4>)
 810044c:	2200      	movs	r2, #0
 810044e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100450:	4b0d      	ldr	r3, [pc, #52]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100452:	2200      	movs	r2, #0
 8100454:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100456:	4b0c      	ldr	r3, [pc, #48]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100458:	2200      	movs	r2, #0
 810045a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810045c:	4b0a      	ldr	r3, [pc, #40]	@ (8100488 <MX_SPI1_Init+0xa4>)
 810045e:	2200      	movs	r2, #0
 8100460:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100462:	4b09      	ldr	r3, [pc, #36]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100464:	2200      	movs	r2, #0
 8100466:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100468:	4b07      	ldr	r3, [pc, #28]	@ (8100488 <MX_SPI1_Init+0xa4>)
 810046a:	2200      	movs	r2, #0
 810046c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810046e:	4b06      	ldr	r3, [pc, #24]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100470:	2200      	movs	r2, #0
 8100472:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8100474:	4804      	ldr	r0, [pc, #16]	@ (8100488 <MX_SPI1_Init+0xa4>)
 8100476:	f002 ff45 	bl	8103304 <HAL_SPI_Init>
 810047a:	4603      	mov	r3, r0
 810047c:	2b00      	cmp	r3, #0
 810047e:	d001      	beq.n	8100484 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8100480:	f000 f8d0 	bl	8100624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8100484:	bf00      	nop
 8100486:	bd80      	pop	{r7, pc}
 8100488:	1000002c 	.word	0x1000002c
 810048c:	40013000 	.word	0x40013000

08100490 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8100490:	b580      	push	{r7, lr}
 8100492:	b088      	sub	sp, #32
 8100494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100496:	f107 0310 	add.w	r3, r7, #16
 810049a:	2200      	movs	r2, #0
 810049c:	601a      	str	r2, [r3, #0]
 810049e:	605a      	str	r2, [r3, #4]
 81004a0:	609a      	str	r2, [r3, #8]
 81004a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81004a4:	1d3b      	adds	r3, r7, #4
 81004a6:	2200      	movs	r2, #0
 81004a8:	601a      	str	r2, [r3, #0]
 81004aa:	605a      	str	r2, [r3, #4]
 81004ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81004ae:	4b1e      	ldr	r3, [pc, #120]	@ (8100528 <MX_TIM3_Init+0x98>)
 81004b0:	4a1e      	ldr	r2, [pc, #120]	@ (810052c <MX_TIM3_Init+0x9c>)
 81004b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 81004b4:	4b1c      	ldr	r3, [pc, #112]	@ (8100528 <MX_TIM3_Init+0x98>)
 81004b6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 81004ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81004bc:	4b1a      	ldr	r3, [pc, #104]	@ (8100528 <MX_TIM3_Init+0x98>)
 81004be:	2200      	movs	r2, #0
 81004c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7999;
 81004c2:	4b19      	ldr	r3, [pc, #100]	@ (8100528 <MX_TIM3_Init+0x98>)
 81004c4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 81004c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81004ca:	4b17      	ldr	r3, [pc, #92]	@ (8100528 <MX_TIM3_Init+0x98>)
 81004cc:	2200      	movs	r2, #0
 81004ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81004d0:	4b15      	ldr	r3, [pc, #84]	@ (8100528 <MX_TIM3_Init+0x98>)
 81004d2:	2200      	movs	r2, #0
 81004d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81004d6:	4814      	ldr	r0, [pc, #80]	@ (8100528 <MX_TIM3_Init+0x98>)
 81004d8:	f003 fb0d 	bl	8103af6 <HAL_TIM_Base_Init>
 81004dc:	4603      	mov	r3, r0
 81004de:	2b00      	cmp	r3, #0
 81004e0:	d001      	beq.n	81004e6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 81004e2:	f000 f89f 	bl	8100624 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81004e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81004ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 81004ec:	f107 0310 	add.w	r3, r7, #16
 81004f0:	4619      	mov	r1, r3
 81004f2:	480d      	ldr	r0, [pc, #52]	@ (8100528 <MX_TIM3_Init+0x98>)
 81004f4:	f003 fcd6 	bl	8103ea4 <HAL_TIM_ConfigClockSource>
 81004f8:	4603      	mov	r3, r0
 81004fa:	2b00      	cmp	r3, #0
 81004fc:	d001      	beq.n	8100502 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 81004fe:	f000 f891 	bl	8100624 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100502:	2300      	movs	r3, #0
 8100504:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100506:	2300      	movs	r3, #0
 8100508:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 810050a:	1d3b      	adds	r3, r7, #4
 810050c:	4619      	mov	r1, r3
 810050e:	4806      	ldr	r0, [pc, #24]	@ (8100528 <MX_TIM3_Init+0x98>)
 8100510:	f003 ff24 	bl	810435c <HAL_TIMEx_MasterConfigSynchronization>
 8100514:	4603      	mov	r3, r0
 8100516:	2b00      	cmp	r3, #0
 8100518:	d001      	beq.n	810051e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 810051a:	f000 f883 	bl	8100624 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 810051e:	bf00      	nop
 8100520:	3720      	adds	r7, #32
 8100522:	46bd      	mov	sp, r7
 8100524:	bd80      	pop	{r7, pc}
 8100526:	bf00      	nop
 8100528:	100001a4 	.word	0x100001a4
 810052c:	40000400 	.word	0x40000400

08100530 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8100530:	b580      	push	{r7, lr}
 8100532:	b082      	sub	sp, #8
 8100534:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100536:	4b11      	ldr	r3, [pc, #68]	@ (810057c <MX_DMA_Init+0x4c>)
 8100538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810053c:	4a0f      	ldr	r2, [pc, #60]	@ (810057c <MX_DMA_Init+0x4c>)
 810053e:	f043 0301 	orr.w	r3, r3, #1
 8100542:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100546:	4b0d      	ldr	r3, [pc, #52]	@ (810057c <MX_DMA_Init+0x4c>)
 8100548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810054c:	f003 0301 	and.w	r3, r3, #1
 8100550:	607b      	str	r3, [r7, #4]
 8100552:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8100554:	2200      	movs	r2, #0
 8100556:	2100      	movs	r1, #0
 8100558:	200b      	movs	r0, #11
 810055a:	f000 fb94 	bl	8100c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 810055e:	200b      	movs	r0, #11
 8100560:	f000 fbab 	bl	8100cba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8100564:	2200      	movs	r2, #0
 8100566:	2100      	movs	r1, #0
 8100568:	200c      	movs	r0, #12
 810056a:	f000 fb8c 	bl	8100c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 810056e:	200c      	movs	r0, #12
 8100570:	f000 fba3 	bl	8100cba <HAL_NVIC_EnableIRQ>

}
 8100574:	bf00      	nop
 8100576:	3708      	adds	r7, #8
 8100578:	46bd      	mov	sp, r7
 810057a:	bd80      	pop	{r7, pc}
 810057c:	58024400 	.word	0x58024400

08100580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100580:	b480      	push	{r7}
 8100582:	b083      	sub	sp, #12
 8100584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100586:	4b12      	ldr	r3, [pc, #72]	@ (81005d0 <MX_GPIO_Init+0x50>)
 8100588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810058c:	4a10      	ldr	r2, [pc, #64]	@ (81005d0 <MX_GPIO_Init+0x50>)
 810058e:	f043 0301 	orr.w	r3, r3, #1
 8100592:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100596:	4b0e      	ldr	r3, [pc, #56]	@ (81005d0 <MX_GPIO_Init+0x50>)
 8100598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810059c:	f003 0301 	and.w	r3, r3, #1
 81005a0:	607b      	str	r3, [r7, #4]
 81005a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81005a4:	4b0a      	ldr	r3, [pc, #40]	@ (81005d0 <MX_GPIO_Init+0x50>)
 81005a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005aa:	4a09      	ldr	r2, [pc, #36]	@ (81005d0 <MX_GPIO_Init+0x50>)
 81005ac:	f043 0308 	orr.w	r3, r3, #8
 81005b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81005b4:	4b06      	ldr	r3, [pc, #24]	@ (81005d0 <MX_GPIO_Init+0x50>)
 81005b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005ba:	f003 0308 	and.w	r3, r3, #8
 81005be:	603b      	str	r3, [r7, #0]
 81005c0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81005c2:	bf00      	nop
 81005c4:	370c      	adds	r7, #12
 81005c6:	46bd      	mov	sp, r7
 81005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005cc:	4770      	bx	lr
 81005ce:	bf00      	nop
 81005d0:	58024400 	.word	0x58024400

081005d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81005d4:	b580      	push	{r7, lr}
 81005d6:	b082      	sub	sp, #8
 81005d8:	af00      	add	r7, sp, #0
 81005da:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 81005dc:	687b      	ldr	r3, [r7, #4]
 81005de:	4a0e      	ldr	r2, [pc, #56]	@ (8100618 <HAL_TIM_PeriodElapsedCallback+0x44>)
 81005e0:	4293      	cmp	r3, r2
 81005e2:	d114      	bne.n	810060e <HAL_TIM_PeriodElapsedCallback+0x3a>
  {
    // 1) Write the new dummy value into shared memory
    SHM->seq = seq_counter++;
 81005e4:	4b0d      	ldr	r3, [pc, #52]	@ (810061c <HAL_TIM_PeriodElapsedCallback+0x48>)
 81005e6:	681b      	ldr	r3, [r3, #0]
 81005e8:	1c5a      	adds	r2, r3, #1
 81005ea:	490c      	ldr	r1, [pc, #48]	@ (810061c <HAL_TIM_PeriodElapsedCallback+0x48>)
 81005ec:	600a      	str	r2, [r1, #0]
 81005ee:	4a0c      	ldr	r2, [pc, #48]	@ (8100620 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 81005f0:	6013      	str	r3, [r2, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 81005f2:	f3bf 8f5f 	dmb	sy
}
 81005f6:	bf00      	nop

    // 2) Ensure the store is visible before we notify CM7
    __DMB();  // data memory barrier (ordering)

    // 3) Ring the doorbell using HSEM ID 0
    while (HAL_HSEM_FastTake(0) != HAL_OK) { /* brief spin */ }
 81005f8:	bf00      	nop
 81005fa:	2000      	movs	r0, #0
 81005fc:	f002 fc40 	bl	8102e80 <HAL_HSEM_FastTake>
 8100600:	4603      	mov	r3, r0
 8100602:	2b00      	cmp	r3, #0
 8100604:	d1f9      	bne.n	81005fa <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_HSEM_Release(0, 0);
 8100606:	2100      	movs	r1, #0
 8100608:	2000      	movs	r0, #0
 810060a:	f002 fc53 	bl	8102eb4 <HAL_HSEM_Release>
  }
}
 810060e:	bf00      	nop
 8100610:	3708      	adds	r7, #8
 8100612:	46bd      	mov	sp, r7
 8100614:	bd80      	pop	{r7, pc}
 8100616:	bf00      	nop
 8100618:	100001a4 	.word	0x100001a4
 810061c:	100001f0 	.word	0x100001f0
 8100620:	30040000 	.word	0x30040000

08100624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100624:	b480      	push	{r7}
 8100626:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8100628:	b672      	cpsid	i
}
 810062a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810062c:	bf00      	nop
 810062e:	e7fd      	b.n	810062c <Error_Handler+0x8>

08100630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100630:	b480      	push	{r7}
 8100632:	b083      	sub	sp, #12
 8100634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100636:	4b0a      	ldr	r3, [pc, #40]	@ (8100660 <HAL_MspInit+0x30>)
 8100638:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810063c:	4a08      	ldr	r2, [pc, #32]	@ (8100660 <HAL_MspInit+0x30>)
 810063e:	f043 0302 	orr.w	r3, r3, #2
 8100642:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100646:	4b06      	ldr	r3, [pc, #24]	@ (8100660 <HAL_MspInit+0x30>)
 8100648:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810064c:	f003 0302 	and.w	r3, r3, #2
 8100650:	607b      	str	r3, [r7, #4]
 8100652:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100654:	bf00      	nop
 8100656:	370c      	adds	r7, #12
 8100658:	46bd      	mov	sp, r7
 810065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810065e:	4770      	bx	lr
 8100660:	58024400 	.word	0x58024400

08100664 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8100664:	b580      	push	{r7, lr}
 8100666:	b08a      	sub	sp, #40	@ 0x28
 8100668:	af00      	add	r7, sp, #0
 810066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810066c:	f107 0314 	add.w	r3, r7, #20
 8100670:	2200      	movs	r2, #0
 8100672:	601a      	str	r2, [r3, #0]
 8100674:	605a      	str	r2, [r3, #4]
 8100676:	609a      	str	r2, [r3, #8]
 8100678:	60da      	str	r2, [r3, #12]
 810067a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 810067c:	687b      	ldr	r3, [r7, #4]
 810067e:	681b      	ldr	r3, [r3, #0]
 8100680:	4a5b      	ldr	r2, [pc, #364]	@ (81007f0 <HAL_SPI_MspInit+0x18c>)
 8100682:	4293      	cmp	r3, r2
 8100684:	f040 80af 	bne.w	81007e6 <HAL_SPI_MspInit+0x182>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8100688:	4b5a      	ldr	r3, [pc, #360]	@ (81007f4 <HAL_SPI_MspInit+0x190>)
 810068a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810068e:	4a59      	ldr	r2, [pc, #356]	@ (81007f4 <HAL_SPI_MspInit+0x190>)
 8100690:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8100694:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8100698:	4b56      	ldr	r3, [pc, #344]	@ (81007f4 <HAL_SPI_MspInit+0x190>)
 810069a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810069e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81006a2:	613b      	str	r3, [r7, #16]
 81006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81006a6:	4b53      	ldr	r3, [pc, #332]	@ (81007f4 <HAL_SPI_MspInit+0x190>)
 81006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006ac:	4a51      	ldr	r2, [pc, #324]	@ (81007f4 <HAL_SPI_MspInit+0x190>)
 81006ae:	f043 0301 	orr.w	r3, r3, #1
 81006b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006b6:	4b4f      	ldr	r3, [pc, #316]	@ (81007f4 <HAL_SPI_MspInit+0x190>)
 81006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006bc:	f003 0301 	and.w	r3, r3, #1
 81006c0:	60fb      	str	r3, [r7, #12]
 81006c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81006c4:	4b4b      	ldr	r3, [pc, #300]	@ (81007f4 <HAL_SPI_MspInit+0x190>)
 81006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006ca:	4a4a      	ldr	r2, [pc, #296]	@ (81007f4 <HAL_SPI_MspInit+0x190>)
 81006cc:	f043 0308 	orr.w	r3, r3, #8
 81006d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006d4:	4b47      	ldr	r3, [pc, #284]	@ (81007f4 <HAL_SPI_MspInit+0x190>)
 81006d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006da:	f003 0308 	and.w	r3, r3, #8
 81006de:	60bb      	str	r3, [r7, #8]
 81006e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 81006e2:	2360      	movs	r3, #96	@ 0x60
 81006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81006e6:	2302      	movs	r3, #2
 81006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81006ea:	2300      	movs	r3, #0
 81006ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81006ee:	2300      	movs	r3, #0
 81006f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81006f2:	2305      	movs	r3, #5
 81006f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81006f6:	f107 0314 	add.w	r3, r7, #20
 81006fa:	4619      	mov	r1, r3
 81006fc:	483e      	ldr	r0, [pc, #248]	@ (81007f8 <HAL_SPI_MspInit+0x194>)
 81006fe:	f002 fa0f 	bl	8102b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8100702:	2380      	movs	r3, #128	@ 0x80
 8100704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100706:	2302      	movs	r3, #2
 8100708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810070a:	2300      	movs	r3, #0
 810070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810070e:	2300      	movs	r3, #0
 8100710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8100712:	2305      	movs	r3, #5
 8100714:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100716:	f107 0314 	add.w	r3, r7, #20
 810071a:	4619      	mov	r1, r3
 810071c:	4837      	ldr	r0, [pc, #220]	@ (81007fc <HAL_SPI_MspInit+0x198>)
 810071e:	f002 f9ff 	bl	8102b20 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream0;
 8100722:	4b37      	ldr	r3, [pc, #220]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 8100724:	4a37      	ldr	r2, [pc, #220]	@ (8100804 <HAL_SPI_MspInit+0x1a0>)
 8100726:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8100728:	4b35      	ldr	r3, [pc, #212]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 810072a:	2226      	movs	r2, #38	@ 0x26
 810072c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810072e:	4b34      	ldr	r3, [pc, #208]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 8100730:	2240      	movs	r2, #64	@ 0x40
 8100732:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8100734:	4b32      	ldr	r3, [pc, #200]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 8100736:	2200      	movs	r2, #0
 8100738:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 810073a:	4b31      	ldr	r3, [pc, #196]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 810073c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8100740:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8100742:	4b2f      	ldr	r3, [pc, #188]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 8100744:	2200      	movs	r2, #0
 8100746:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8100748:	4b2d      	ldr	r3, [pc, #180]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 810074a:	2200      	movs	r2, #0
 810074c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 810074e:	4b2c      	ldr	r3, [pc, #176]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 8100750:	2200      	movs	r2, #0
 8100752:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8100754:	4b2a      	ldr	r3, [pc, #168]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 8100756:	2200      	movs	r2, #0
 8100758:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810075a:	4b29      	ldr	r3, [pc, #164]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 810075c:	2200      	movs	r2, #0
 810075e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8100760:	4827      	ldr	r0, [pc, #156]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 8100762:	f000 fad7 	bl	8100d14 <HAL_DMA_Init>
 8100766:	4603      	mov	r3, r0
 8100768:	2b00      	cmp	r3, #0
 810076a:	d001      	beq.n	8100770 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 810076c:	f7ff ff5a 	bl	8100624 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8100770:	687b      	ldr	r3, [r7, #4]
 8100772:	4a23      	ldr	r2, [pc, #140]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 8100774:	679a      	str	r2, [r3, #120]	@ 0x78
 8100776:	4a22      	ldr	r2, [pc, #136]	@ (8100800 <HAL_SPI_MspInit+0x19c>)
 8100778:	687b      	ldr	r3, [r7, #4]
 810077a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream1;
 810077c:	4b22      	ldr	r3, [pc, #136]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 810077e:	4a23      	ldr	r2, [pc, #140]	@ (810080c <HAL_SPI_MspInit+0x1a8>)
 8100780:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8100782:	4b21      	ldr	r3, [pc, #132]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 8100784:	2225      	movs	r2, #37	@ 0x25
 8100786:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8100788:	4b1f      	ldr	r3, [pc, #124]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 810078a:	2200      	movs	r2, #0
 810078c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810078e:	4b1e      	ldr	r3, [pc, #120]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 8100790:	2200      	movs	r2, #0
 8100792:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8100794:	4b1c      	ldr	r3, [pc, #112]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 8100796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810079a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810079c:	4b1a      	ldr	r3, [pc, #104]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 810079e:	2200      	movs	r2, #0
 81007a0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81007a2:	4b19      	ldr	r3, [pc, #100]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 81007a4:	2200      	movs	r2, #0
 81007a6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 81007a8:	4b17      	ldr	r3, [pc, #92]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 81007aa:	2200      	movs	r2, #0
 81007ac:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 81007ae:	4b16      	ldr	r3, [pc, #88]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 81007b0:	2200      	movs	r2, #0
 81007b2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81007b4:	4b14      	ldr	r3, [pc, #80]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 81007b6:	2200      	movs	r2, #0
 81007b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 81007ba:	4813      	ldr	r0, [pc, #76]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 81007bc:	f000 faaa 	bl	8100d14 <HAL_DMA_Init>
 81007c0:	4603      	mov	r3, r0
 81007c2:	2b00      	cmp	r3, #0
 81007c4:	d001      	beq.n	81007ca <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 81007c6:	f7ff ff2d 	bl	8100624 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 81007ca:	687b      	ldr	r3, [r7, #4]
 81007cc:	4a0e      	ldr	r2, [pc, #56]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 81007ce:	67da      	str	r2, [r3, #124]	@ 0x7c
 81007d0:	4a0d      	ldr	r2, [pc, #52]	@ (8100808 <HAL_SPI_MspInit+0x1a4>)
 81007d2:	687b      	ldr	r3, [r7, #4]
 81007d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 81007d6:	2200      	movs	r2, #0
 81007d8:	2100      	movs	r1, #0
 81007da:	2023      	movs	r0, #35	@ 0x23
 81007dc:	f000 fa53 	bl	8100c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 81007e0:	2023      	movs	r0, #35	@ 0x23
 81007e2:	f000 fa6a 	bl	8100cba <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 81007e6:	bf00      	nop
 81007e8:	3728      	adds	r7, #40	@ 0x28
 81007ea:	46bd      	mov	sp, r7
 81007ec:	bd80      	pop	{r7, pc}
 81007ee:	bf00      	nop
 81007f0:	40013000 	.word	0x40013000
 81007f4:	58024400 	.word	0x58024400
 81007f8:	58020000 	.word	0x58020000
 81007fc:	58020c00 	.word	0x58020c00
 8100800:	100000b4 	.word	0x100000b4
 8100804:	40020010 	.word	0x40020010
 8100808:	1000012c 	.word	0x1000012c
 810080c:	40020028 	.word	0x40020028

08100810 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8100810:	b580      	push	{r7, lr}
 8100812:	b084      	sub	sp, #16
 8100814:	af00      	add	r7, sp, #0
 8100816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8100818:	687b      	ldr	r3, [r7, #4]
 810081a:	681b      	ldr	r3, [r3, #0]
 810081c:	4a0e      	ldr	r2, [pc, #56]	@ (8100858 <HAL_TIM_Base_MspInit+0x48>)
 810081e:	4293      	cmp	r3, r2
 8100820:	d116      	bne.n	8100850 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8100822:	4b0e      	ldr	r3, [pc, #56]	@ (810085c <HAL_TIM_Base_MspInit+0x4c>)
 8100824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100828:	4a0c      	ldr	r2, [pc, #48]	@ (810085c <HAL_TIM_Base_MspInit+0x4c>)
 810082a:	f043 0302 	orr.w	r3, r3, #2
 810082e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100832:	4b0a      	ldr	r3, [pc, #40]	@ (810085c <HAL_TIM_Base_MspInit+0x4c>)
 8100834:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100838:	f003 0302 	and.w	r3, r3, #2
 810083c:	60fb      	str	r3, [r7, #12]
 810083e:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8100840:	2200      	movs	r2, #0
 8100842:	2100      	movs	r1, #0
 8100844:	201d      	movs	r0, #29
 8100846:	f000 fa1e 	bl	8100c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 810084a:	201d      	movs	r0, #29
 810084c:	f000 fa35 	bl	8100cba <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8100850:	bf00      	nop
 8100852:	3710      	adds	r7, #16
 8100854:	46bd      	mov	sp, r7
 8100856:	bd80      	pop	{r7, pc}
 8100858:	40000400 	.word	0x40000400
 810085c:	58024400 	.word	0x58024400

08100860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100860:	b480      	push	{r7}
 8100862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100864:	bf00      	nop
 8100866:	e7fd      	b.n	8100864 <NMI_Handler+0x4>

08100868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100868:	b480      	push	{r7}
 810086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810086c:	bf00      	nop
 810086e:	e7fd      	b.n	810086c <HardFault_Handler+0x4>

08100870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100870:	b480      	push	{r7}
 8100872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100874:	bf00      	nop
 8100876:	e7fd      	b.n	8100874 <MemManage_Handler+0x4>

08100878 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100878:	b480      	push	{r7}
 810087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810087c:	bf00      	nop
 810087e:	e7fd      	b.n	810087c <BusFault_Handler+0x4>

08100880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100880:	b480      	push	{r7}
 8100882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100884:	bf00      	nop
 8100886:	e7fd      	b.n	8100884 <UsageFault_Handler+0x4>

08100888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100888:	b480      	push	{r7}
 810088a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810088c:	bf00      	nop
 810088e:	46bd      	mov	sp, r7
 8100890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100894:	4770      	bx	lr

08100896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100896:	b480      	push	{r7}
 8100898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810089a:	bf00      	nop
 810089c:	46bd      	mov	sp, r7
 810089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008a2:	4770      	bx	lr

081008a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81008a4:	b480      	push	{r7}
 81008a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81008a8:	bf00      	nop
 81008aa:	46bd      	mov	sp, r7
 81008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008b0:	4770      	bx	lr

081008b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81008b2:	b580      	push	{r7, lr}
 81008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81008b6:	f000 f8eb 	bl	8100a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81008ba:	bf00      	nop
 81008bc:	bd80      	pop	{r7, pc}
	...

081008c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 81008c0:	b580      	push	{r7, lr}
 81008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 81008c4:	4802      	ldr	r0, [pc, #8]	@ (81008d0 <DMA1_Stream0_IRQHandler+0x10>)
 81008c6:	f000 ffc5 	bl	8101854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 81008ca:	bf00      	nop
 81008cc:	bd80      	pop	{r7, pc}
 81008ce:	bf00      	nop
 81008d0:	100000b4 	.word	0x100000b4

081008d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 81008d4:	b580      	push	{r7, lr}
 81008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 81008d8:	4802      	ldr	r0, [pc, #8]	@ (81008e4 <DMA1_Stream1_IRQHandler+0x10>)
 81008da:	f000 ffbb 	bl	8101854 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 81008de:	bf00      	nop
 81008e0:	bd80      	pop	{r7, pc}
 81008e2:	bf00      	nop
 81008e4:	1000012c 	.word	0x1000012c

081008e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 81008e8:	b580      	push	{r7, lr}
 81008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 81008ec:	4802      	ldr	r0, [pc, #8]	@ (81008f8 <TIM3_IRQHandler+0x10>)
 81008ee:	f003 f9d1 	bl	8103c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 81008f2:	bf00      	nop
 81008f4:	bd80      	pop	{r7, pc}
 81008f6:	bf00      	nop
 81008f8:	100001a4 	.word	0x100001a4

081008fc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 81008fc:	b580      	push	{r7, lr}
 81008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8100900:	4802      	ldr	r0, [pc, #8]	@ (810090c <SPI1_IRQHandler+0x10>)
 8100902:	f002 fe23 	bl	810354c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8100906:	bf00      	nop
 8100908:	bd80      	pop	{r7, pc}
 810090a:	bf00      	nop
 810090c:	1000002c 	.word	0x1000002c

08100910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100910:	f8df d038 	ldr.w	sp, [pc, #56]	@ 810094c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8100914:	f7ff fcf8 	bl	8100308 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100918:	f7ff fcde 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810091c:	480c      	ldr	r0, [pc, #48]	@ (8100950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810091e:	490d      	ldr	r1, [pc, #52]	@ (8100954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100920:	4a0d      	ldr	r2, [pc, #52]	@ (8100958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100924:	e002      	b.n	810092c <LoopCopyDataInit>

08100926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810092a:	3304      	adds	r3, #4

0810092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100930:	d3f9      	bcc.n	8100926 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100932:	4a0a      	ldr	r2, [pc, #40]	@ (810095c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100934:	4c0a      	ldr	r4, [pc, #40]	@ (8100960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100938:	e001      	b.n	810093e <LoopFillZerobss>

0810093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810093c:	3204      	adds	r2, #4

0810093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100940:	d3fb      	bcc.n	810093a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100942:	f003 fdb7 	bl	81044b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100946:	f7ff fd01 	bl	810034c <main>
  bx  lr
 810094a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810094c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100950:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100954:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100958:	08104534 	.word	0x08104534
  ldr r2, =_sbss
 810095c:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100960:	100001f8 	.word	0x100001f8

08100964 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100964:	e7fe      	b.n	8100964 <ADC3_IRQHandler>
	...

08100968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100968:	b580      	push	{r7, lr}
 810096a:	b082      	sub	sp, #8
 810096c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810096e:	4b28      	ldr	r3, [pc, #160]	@ (8100a10 <HAL_Init+0xa8>)
 8100970:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100974:	4a26      	ldr	r2, [pc, #152]	@ (8100a10 <HAL_Init+0xa8>)
 8100976:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810097a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810097e:	4b24      	ldr	r3, [pc, #144]	@ (8100a10 <HAL_Init+0xa8>)
 8100980:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100988:	603b      	str	r3, [r7, #0]
 810098a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810098c:	4b21      	ldr	r3, [pc, #132]	@ (8100a14 <HAL_Init+0xac>)
 810098e:	681b      	ldr	r3, [r3, #0]
 8100990:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100994:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100998:	4a1e      	ldr	r2, [pc, #120]	@ (8100a14 <HAL_Init+0xac>)
 810099a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810099e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81009a0:	4b1c      	ldr	r3, [pc, #112]	@ (8100a14 <HAL_Init+0xac>)
 81009a2:	681b      	ldr	r3, [r3, #0]
 81009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8100a14 <HAL_Init+0xac>)
 81009a6:	f043 0301 	orr.w	r3, r3, #1
 81009aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81009ac:	2003      	movs	r0, #3
 81009ae:	f000 f95f 	bl	8100c70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81009b2:	f002 fb2d 	bl	8103010 <HAL_RCC_GetSysClockFreq>
 81009b6:	4602      	mov	r2, r0
 81009b8:	4b15      	ldr	r3, [pc, #84]	@ (8100a10 <HAL_Init+0xa8>)
 81009ba:	699b      	ldr	r3, [r3, #24]
 81009bc:	0a1b      	lsrs	r3, r3, #8
 81009be:	f003 030f 	and.w	r3, r3, #15
 81009c2:	4915      	ldr	r1, [pc, #84]	@ (8100a18 <HAL_Init+0xb0>)
 81009c4:	5ccb      	ldrb	r3, [r1, r3]
 81009c6:	f003 031f 	and.w	r3, r3, #31
 81009ca:	fa22 f303 	lsr.w	r3, r2, r3
 81009ce:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8100a10 <HAL_Init+0xa8>)
 81009d2:	699b      	ldr	r3, [r3, #24]
 81009d4:	f003 030f 	and.w	r3, r3, #15
 81009d8:	4a0f      	ldr	r2, [pc, #60]	@ (8100a18 <HAL_Init+0xb0>)
 81009da:	5cd3      	ldrb	r3, [r2, r3]
 81009dc:	f003 031f 	and.w	r3, r3, #31
 81009e0:	687a      	ldr	r2, [r7, #4]
 81009e2:	fa22 f303 	lsr.w	r3, r2, r3
 81009e6:	4a0d      	ldr	r2, [pc, #52]	@ (8100a1c <HAL_Init+0xb4>)
 81009e8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81009ea:	4b0c      	ldr	r3, [pc, #48]	@ (8100a1c <HAL_Init+0xb4>)
 81009ec:	681b      	ldr	r3, [r3, #0]
 81009ee:	4a0c      	ldr	r2, [pc, #48]	@ (8100a20 <HAL_Init+0xb8>)
 81009f0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81009f2:	2000      	movs	r0, #0
 81009f4:	f000 f816 	bl	8100a24 <HAL_InitTick>
 81009f8:	4603      	mov	r3, r0
 81009fa:	2b00      	cmp	r3, #0
 81009fc:	d001      	beq.n	8100a02 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81009fe:	2301      	movs	r3, #1
 8100a00:	e002      	b.n	8100a08 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100a02:	f7ff fe15 	bl	8100630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100a06:	2300      	movs	r3, #0
}
 8100a08:	4618      	mov	r0, r3
 8100a0a:	3708      	adds	r7, #8
 8100a0c:	46bd      	mov	sp, r7
 8100a0e:	bd80      	pop	{r7, pc}
 8100a10:	58024400 	.word	0x58024400
 8100a14:	40024400 	.word	0x40024400
 8100a18:	08104514 	.word	0x08104514
 8100a1c:	10000004 	.word	0x10000004
 8100a20:	10000000 	.word	0x10000000

08100a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100a24:	b580      	push	{r7, lr}
 8100a26:	b082      	sub	sp, #8
 8100a28:	af00      	add	r7, sp, #0
 8100a2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100a2c:	4b15      	ldr	r3, [pc, #84]	@ (8100a84 <HAL_InitTick+0x60>)
 8100a2e:	781b      	ldrb	r3, [r3, #0]
 8100a30:	2b00      	cmp	r3, #0
 8100a32:	d101      	bne.n	8100a38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100a34:	2301      	movs	r3, #1
 8100a36:	e021      	b.n	8100a7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100a38:	4b13      	ldr	r3, [pc, #76]	@ (8100a88 <HAL_InitTick+0x64>)
 8100a3a:	681a      	ldr	r2, [r3, #0]
 8100a3c:	4b11      	ldr	r3, [pc, #68]	@ (8100a84 <HAL_InitTick+0x60>)
 8100a3e:	781b      	ldrb	r3, [r3, #0]
 8100a40:	4619      	mov	r1, r3
 8100a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8100a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8100a4e:	4618      	mov	r0, r3
 8100a50:	f000 f941 	bl	8100cd6 <HAL_SYSTICK_Config>
 8100a54:	4603      	mov	r3, r0
 8100a56:	2b00      	cmp	r3, #0
 8100a58:	d001      	beq.n	8100a5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100a5a:	2301      	movs	r3, #1
 8100a5c:	e00e      	b.n	8100a7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100a5e:	687b      	ldr	r3, [r7, #4]
 8100a60:	2b0f      	cmp	r3, #15
 8100a62:	d80a      	bhi.n	8100a7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100a64:	2200      	movs	r2, #0
 8100a66:	6879      	ldr	r1, [r7, #4]
 8100a68:	f04f 30ff 	mov.w	r0, #4294967295
 8100a6c:	f000 f90b 	bl	8100c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100a70:	4a06      	ldr	r2, [pc, #24]	@ (8100a8c <HAL_InitTick+0x68>)
 8100a72:	687b      	ldr	r3, [r7, #4]
 8100a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100a76:	2300      	movs	r3, #0
 8100a78:	e000      	b.n	8100a7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100a7a:	2301      	movs	r3, #1
}
 8100a7c:	4618      	mov	r0, r3
 8100a7e:	3708      	adds	r7, #8
 8100a80:	46bd      	mov	sp, r7
 8100a82:	bd80      	pop	{r7, pc}
 8100a84:	1000000c 	.word	0x1000000c
 8100a88:	10000000 	.word	0x10000000
 8100a8c:	10000008 	.word	0x10000008

08100a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100a90:	b480      	push	{r7}
 8100a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100a94:	4b06      	ldr	r3, [pc, #24]	@ (8100ab0 <HAL_IncTick+0x20>)
 8100a96:	781b      	ldrb	r3, [r3, #0]
 8100a98:	461a      	mov	r2, r3
 8100a9a:	4b06      	ldr	r3, [pc, #24]	@ (8100ab4 <HAL_IncTick+0x24>)
 8100a9c:	681b      	ldr	r3, [r3, #0]
 8100a9e:	4413      	add	r3, r2
 8100aa0:	4a04      	ldr	r2, [pc, #16]	@ (8100ab4 <HAL_IncTick+0x24>)
 8100aa2:	6013      	str	r3, [r2, #0]
}
 8100aa4:	bf00      	nop
 8100aa6:	46bd      	mov	sp, r7
 8100aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100aac:	4770      	bx	lr
 8100aae:	bf00      	nop
 8100ab0:	1000000c 	.word	0x1000000c
 8100ab4:	100001f4 	.word	0x100001f4

08100ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100ab8:	b480      	push	{r7}
 8100aba:	af00      	add	r7, sp, #0
  return uwTick;
 8100abc:	4b03      	ldr	r3, [pc, #12]	@ (8100acc <HAL_GetTick+0x14>)
 8100abe:	681b      	ldr	r3, [r3, #0]
}
 8100ac0:	4618      	mov	r0, r3
 8100ac2:	46bd      	mov	sp, r7
 8100ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ac8:	4770      	bx	lr
 8100aca:	bf00      	nop
 8100acc:	100001f4 	.word	0x100001f4

08100ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ad0:	b480      	push	{r7}
 8100ad2:	b085      	sub	sp, #20
 8100ad4:	af00      	add	r7, sp, #0
 8100ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100ad8:	687b      	ldr	r3, [r7, #4]
 8100ada:	f003 0307 	and.w	r3, r3, #7
 8100ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8100b14 <__NVIC_SetPriorityGrouping+0x44>)
 8100ae2:	68db      	ldr	r3, [r3, #12]
 8100ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100ae6:	68ba      	ldr	r2, [r7, #8]
 8100ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100aec:	4013      	ands	r3, r2
 8100aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100af0:	68fb      	ldr	r3, [r7, #12]
 8100af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100af4:	68bb      	ldr	r3, [r7, #8]
 8100af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100af8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100b02:	4a04      	ldr	r2, [pc, #16]	@ (8100b14 <__NVIC_SetPriorityGrouping+0x44>)
 8100b04:	68bb      	ldr	r3, [r7, #8]
 8100b06:	60d3      	str	r3, [r2, #12]
}
 8100b08:	bf00      	nop
 8100b0a:	3714      	adds	r7, #20
 8100b0c:	46bd      	mov	sp, r7
 8100b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b12:	4770      	bx	lr
 8100b14:	e000ed00 	.word	0xe000ed00

08100b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100b18:	b480      	push	{r7}
 8100b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100b1c:	4b04      	ldr	r3, [pc, #16]	@ (8100b30 <__NVIC_GetPriorityGrouping+0x18>)
 8100b1e:	68db      	ldr	r3, [r3, #12]
 8100b20:	0a1b      	lsrs	r3, r3, #8
 8100b22:	f003 0307 	and.w	r3, r3, #7
}
 8100b26:	4618      	mov	r0, r3
 8100b28:	46bd      	mov	sp, r7
 8100b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b2e:	4770      	bx	lr
 8100b30:	e000ed00 	.word	0xe000ed00

08100b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100b34:	b480      	push	{r7}
 8100b36:	b083      	sub	sp, #12
 8100b38:	af00      	add	r7, sp, #0
 8100b3a:	4603      	mov	r3, r0
 8100b3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b42:	2b00      	cmp	r3, #0
 8100b44:	db0b      	blt.n	8100b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100b46:	88fb      	ldrh	r3, [r7, #6]
 8100b48:	f003 021f 	and.w	r2, r3, #31
 8100b4c:	4907      	ldr	r1, [pc, #28]	@ (8100b6c <__NVIC_EnableIRQ+0x38>)
 8100b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b52:	095b      	lsrs	r3, r3, #5
 8100b54:	2001      	movs	r0, #1
 8100b56:	fa00 f202 	lsl.w	r2, r0, r2
 8100b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100b5e:	bf00      	nop
 8100b60:	370c      	adds	r7, #12
 8100b62:	46bd      	mov	sp, r7
 8100b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b68:	4770      	bx	lr
 8100b6a:	bf00      	nop
 8100b6c:	e000e100 	.word	0xe000e100

08100b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100b70:	b480      	push	{r7}
 8100b72:	b083      	sub	sp, #12
 8100b74:	af00      	add	r7, sp, #0
 8100b76:	4603      	mov	r3, r0
 8100b78:	6039      	str	r1, [r7, #0]
 8100b7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b80:	2b00      	cmp	r3, #0
 8100b82:	db0a      	blt.n	8100b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100b84:	683b      	ldr	r3, [r7, #0]
 8100b86:	b2da      	uxtb	r2, r3
 8100b88:	490c      	ldr	r1, [pc, #48]	@ (8100bbc <__NVIC_SetPriority+0x4c>)
 8100b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b8e:	0112      	lsls	r2, r2, #4
 8100b90:	b2d2      	uxtb	r2, r2
 8100b92:	440b      	add	r3, r1
 8100b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100b98:	e00a      	b.n	8100bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100b9a:	683b      	ldr	r3, [r7, #0]
 8100b9c:	b2da      	uxtb	r2, r3
 8100b9e:	4908      	ldr	r1, [pc, #32]	@ (8100bc0 <__NVIC_SetPriority+0x50>)
 8100ba0:	88fb      	ldrh	r3, [r7, #6]
 8100ba2:	f003 030f 	and.w	r3, r3, #15
 8100ba6:	3b04      	subs	r3, #4
 8100ba8:	0112      	lsls	r2, r2, #4
 8100baa:	b2d2      	uxtb	r2, r2
 8100bac:	440b      	add	r3, r1
 8100bae:	761a      	strb	r2, [r3, #24]
}
 8100bb0:	bf00      	nop
 8100bb2:	370c      	adds	r7, #12
 8100bb4:	46bd      	mov	sp, r7
 8100bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bba:	4770      	bx	lr
 8100bbc:	e000e100 	.word	0xe000e100
 8100bc0:	e000ed00 	.word	0xe000ed00

08100bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100bc4:	b480      	push	{r7}
 8100bc6:	b089      	sub	sp, #36	@ 0x24
 8100bc8:	af00      	add	r7, sp, #0
 8100bca:	60f8      	str	r0, [r7, #12]
 8100bcc:	60b9      	str	r1, [r7, #8]
 8100bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100bd0:	68fb      	ldr	r3, [r7, #12]
 8100bd2:	f003 0307 	and.w	r3, r3, #7
 8100bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100bd8:	69fb      	ldr	r3, [r7, #28]
 8100bda:	f1c3 0307 	rsb	r3, r3, #7
 8100bde:	2b04      	cmp	r3, #4
 8100be0:	bf28      	it	cs
 8100be2:	2304      	movcs	r3, #4
 8100be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100be6:	69fb      	ldr	r3, [r7, #28]
 8100be8:	3304      	adds	r3, #4
 8100bea:	2b06      	cmp	r3, #6
 8100bec:	d902      	bls.n	8100bf4 <NVIC_EncodePriority+0x30>
 8100bee:	69fb      	ldr	r3, [r7, #28]
 8100bf0:	3b03      	subs	r3, #3
 8100bf2:	e000      	b.n	8100bf6 <NVIC_EncodePriority+0x32>
 8100bf4:	2300      	movs	r3, #0
 8100bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8100bfc:	69bb      	ldr	r3, [r7, #24]
 8100bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8100c02:	43da      	mvns	r2, r3
 8100c04:	68bb      	ldr	r3, [r7, #8]
 8100c06:	401a      	ands	r2, r3
 8100c08:	697b      	ldr	r3, [r7, #20]
 8100c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8100c10:	697b      	ldr	r3, [r7, #20]
 8100c12:	fa01 f303 	lsl.w	r3, r1, r3
 8100c16:	43d9      	mvns	r1, r3
 8100c18:	687b      	ldr	r3, [r7, #4]
 8100c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c1c:	4313      	orrs	r3, r2
         );
}
 8100c1e:	4618      	mov	r0, r3
 8100c20:	3724      	adds	r7, #36	@ 0x24
 8100c22:	46bd      	mov	sp, r7
 8100c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c28:	4770      	bx	lr
	...

08100c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100c2c:	b580      	push	{r7, lr}
 8100c2e:	b082      	sub	sp, #8
 8100c30:	af00      	add	r7, sp, #0
 8100c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100c34:	687b      	ldr	r3, [r7, #4]
 8100c36:	3b01      	subs	r3, #1
 8100c38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100c3c:	d301      	bcc.n	8100c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100c3e:	2301      	movs	r3, #1
 8100c40:	e00f      	b.n	8100c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100c42:	4a0a      	ldr	r2, [pc, #40]	@ (8100c6c <SysTick_Config+0x40>)
 8100c44:	687b      	ldr	r3, [r7, #4]
 8100c46:	3b01      	subs	r3, #1
 8100c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100c4a:	210f      	movs	r1, #15
 8100c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8100c50:	f7ff ff8e 	bl	8100b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100c54:	4b05      	ldr	r3, [pc, #20]	@ (8100c6c <SysTick_Config+0x40>)
 8100c56:	2200      	movs	r2, #0
 8100c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100c5a:	4b04      	ldr	r3, [pc, #16]	@ (8100c6c <SysTick_Config+0x40>)
 8100c5c:	2207      	movs	r2, #7
 8100c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100c60:	2300      	movs	r3, #0
}
 8100c62:	4618      	mov	r0, r3
 8100c64:	3708      	adds	r7, #8
 8100c66:	46bd      	mov	sp, r7
 8100c68:	bd80      	pop	{r7, pc}
 8100c6a:	bf00      	nop
 8100c6c:	e000e010 	.word	0xe000e010

08100c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100c70:	b580      	push	{r7, lr}
 8100c72:	b082      	sub	sp, #8
 8100c74:	af00      	add	r7, sp, #0
 8100c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100c78:	6878      	ldr	r0, [r7, #4]
 8100c7a:	f7ff ff29 	bl	8100ad0 <__NVIC_SetPriorityGrouping>
}
 8100c7e:	bf00      	nop
 8100c80:	3708      	adds	r7, #8
 8100c82:	46bd      	mov	sp, r7
 8100c84:	bd80      	pop	{r7, pc}

08100c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100c86:	b580      	push	{r7, lr}
 8100c88:	b086      	sub	sp, #24
 8100c8a:	af00      	add	r7, sp, #0
 8100c8c:	4603      	mov	r3, r0
 8100c8e:	60b9      	str	r1, [r7, #8]
 8100c90:	607a      	str	r2, [r7, #4]
 8100c92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100c94:	f7ff ff40 	bl	8100b18 <__NVIC_GetPriorityGrouping>
 8100c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100c9a:	687a      	ldr	r2, [r7, #4]
 8100c9c:	68b9      	ldr	r1, [r7, #8]
 8100c9e:	6978      	ldr	r0, [r7, #20]
 8100ca0:	f7ff ff90 	bl	8100bc4 <NVIC_EncodePriority>
 8100ca4:	4602      	mov	r2, r0
 8100ca6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100caa:	4611      	mov	r1, r2
 8100cac:	4618      	mov	r0, r3
 8100cae:	f7ff ff5f 	bl	8100b70 <__NVIC_SetPriority>
}
 8100cb2:	bf00      	nop
 8100cb4:	3718      	adds	r7, #24
 8100cb6:	46bd      	mov	sp, r7
 8100cb8:	bd80      	pop	{r7, pc}

08100cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100cba:	b580      	push	{r7, lr}
 8100cbc:	b082      	sub	sp, #8
 8100cbe:	af00      	add	r7, sp, #0
 8100cc0:	4603      	mov	r3, r0
 8100cc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100cc8:	4618      	mov	r0, r3
 8100cca:	f7ff ff33 	bl	8100b34 <__NVIC_EnableIRQ>
}
 8100cce:	bf00      	nop
 8100cd0:	3708      	adds	r7, #8
 8100cd2:	46bd      	mov	sp, r7
 8100cd4:	bd80      	pop	{r7, pc}

08100cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100cd6:	b580      	push	{r7, lr}
 8100cd8:	b082      	sub	sp, #8
 8100cda:	af00      	add	r7, sp, #0
 8100cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100cde:	6878      	ldr	r0, [r7, #4]
 8100ce0:	f7ff ffa4 	bl	8100c2c <SysTick_Config>
 8100ce4:	4603      	mov	r3, r0
}
 8100ce6:	4618      	mov	r0, r3
 8100ce8:	3708      	adds	r7, #8
 8100cea:	46bd      	mov	sp, r7
 8100cec:	bd80      	pop	{r7, pc}
	...

08100cf0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100cf0:	b480      	push	{r7}
 8100cf2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100cf4:	4b06      	ldr	r3, [pc, #24]	@ (8100d10 <HAL_GetCurrentCPUID+0x20>)
 8100cf6:	681b      	ldr	r3, [r3, #0]
 8100cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8100cfc:	2b70      	cmp	r3, #112	@ 0x70
 8100cfe:	d101      	bne.n	8100d04 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8100d00:	2303      	movs	r3, #3
 8100d02:	e000      	b.n	8100d06 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8100d04:	2301      	movs	r3, #1
  }
}
 8100d06:	4618      	mov	r0, r3
 8100d08:	46bd      	mov	sp, r7
 8100d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d0e:	4770      	bx	lr
 8100d10:	e000ed00 	.word	0xe000ed00

08100d14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8100d14:	b580      	push	{r7, lr}
 8100d16:	b086      	sub	sp, #24
 8100d18:	af00      	add	r7, sp, #0
 8100d1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8100d1c:	f7ff fecc 	bl	8100ab8 <HAL_GetTick>
 8100d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8100d22:	687b      	ldr	r3, [r7, #4]
 8100d24:	2b00      	cmp	r3, #0
 8100d26:	d101      	bne.n	8100d2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8100d28:	2301      	movs	r3, #1
 8100d2a:	e314      	b.n	8101356 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8100d2c:	687b      	ldr	r3, [r7, #4]
 8100d2e:	681b      	ldr	r3, [r3, #0]
 8100d30:	4a66      	ldr	r2, [pc, #408]	@ (8100ecc <HAL_DMA_Init+0x1b8>)
 8100d32:	4293      	cmp	r3, r2
 8100d34:	d04a      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100d36:	687b      	ldr	r3, [r7, #4]
 8100d38:	681b      	ldr	r3, [r3, #0]
 8100d3a:	4a65      	ldr	r2, [pc, #404]	@ (8100ed0 <HAL_DMA_Init+0x1bc>)
 8100d3c:	4293      	cmp	r3, r2
 8100d3e:	d045      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100d40:	687b      	ldr	r3, [r7, #4]
 8100d42:	681b      	ldr	r3, [r3, #0]
 8100d44:	4a63      	ldr	r2, [pc, #396]	@ (8100ed4 <HAL_DMA_Init+0x1c0>)
 8100d46:	4293      	cmp	r3, r2
 8100d48:	d040      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100d4a:	687b      	ldr	r3, [r7, #4]
 8100d4c:	681b      	ldr	r3, [r3, #0]
 8100d4e:	4a62      	ldr	r2, [pc, #392]	@ (8100ed8 <HAL_DMA_Init+0x1c4>)
 8100d50:	4293      	cmp	r3, r2
 8100d52:	d03b      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100d54:	687b      	ldr	r3, [r7, #4]
 8100d56:	681b      	ldr	r3, [r3, #0]
 8100d58:	4a60      	ldr	r2, [pc, #384]	@ (8100edc <HAL_DMA_Init+0x1c8>)
 8100d5a:	4293      	cmp	r3, r2
 8100d5c:	d036      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100d5e:	687b      	ldr	r3, [r7, #4]
 8100d60:	681b      	ldr	r3, [r3, #0]
 8100d62:	4a5f      	ldr	r2, [pc, #380]	@ (8100ee0 <HAL_DMA_Init+0x1cc>)
 8100d64:	4293      	cmp	r3, r2
 8100d66:	d031      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100d68:	687b      	ldr	r3, [r7, #4]
 8100d6a:	681b      	ldr	r3, [r3, #0]
 8100d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8100ee4 <HAL_DMA_Init+0x1d0>)
 8100d6e:	4293      	cmp	r3, r2
 8100d70:	d02c      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100d72:	687b      	ldr	r3, [r7, #4]
 8100d74:	681b      	ldr	r3, [r3, #0]
 8100d76:	4a5c      	ldr	r2, [pc, #368]	@ (8100ee8 <HAL_DMA_Init+0x1d4>)
 8100d78:	4293      	cmp	r3, r2
 8100d7a:	d027      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100d7c:	687b      	ldr	r3, [r7, #4]
 8100d7e:	681b      	ldr	r3, [r3, #0]
 8100d80:	4a5a      	ldr	r2, [pc, #360]	@ (8100eec <HAL_DMA_Init+0x1d8>)
 8100d82:	4293      	cmp	r3, r2
 8100d84:	d022      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100d86:	687b      	ldr	r3, [r7, #4]
 8100d88:	681b      	ldr	r3, [r3, #0]
 8100d8a:	4a59      	ldr	r2, [pc, #356]	@ (8100ef0 <HAL_DMA_Init+0x1dc>)
 8100d8c:	4293      	cmp	r3, r2
 8100d8e:	d01d      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100d90:	687b      	ldr	r3, [r7, #4]
 8100d92:	681b      	ldr	r3, [r3, #0]
 8100d94:	4a57      	ldr	r2, [pc, #348]	@ (8100ef4 <HAL_DMA_Init+0x1e0>)
 8100d96:	4293      	cmp	r3, r2
 8100d98:	d018      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100d9a:	687b      	ldr	r3, [r7, #4]
 8100d9c:	681b      	ldr	r3, [r3, #0]
 8100d9e:	4a56      	ldr	r2, [pc, #344]	@ (8100ef8 <HAL_DMA_Init+0x1e4>)
 8100da0:	4293      	cmp	r3, r2
 8100da2:	d013      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100da4:	687b      	ldr	r3, [r7, #4]
 8100da6:	681b      	ldr	r3, [r3, #0]
 8100da8:	4a54      	ldr	r2, [pc, #336]	@ (8100efc <HAL_DMA_Init+0x1e8>)
 8100daa:	4293      	cmp	r3, r2
 8100dac:	d00e      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100dae:	687b      	ldr	r3, [r7, #4]
 8100db0:	681b      	ldr	r3, [r3, #0]
 8100db2:	4a53      	ldr	r2, [pc, #332]	@ (8100f00 <HAL_DMA_Init+0x1ec>)
 8100db4:	4293      	cmp	r3, r2
 8100db6:	d009      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100db8:	687b      	ldr	r3, [r7, #4]
 8100dba:	681b      	ldr	r3, [r3, #0]
 8100dbc:	4a51      	ldr	r2, [pc, #324]	@ (8100f04 <HAL_DMA_Init+0x1f0>)
 8100dbe:	4293      	cmp	r3, r2
 8100dc0:	d004      	beq.n	8100dcc <HAL_DMA_Init+0xb8>
 8100dc2:	687b      	ldr	r3, [r7, #4]
 8100dc4:	681b      	ldr	r3, [r3, #0]
 8100dc6:	4a50      	ldr	r2, [pc, #320]	@ (8100f08 <HAL_DMA_Init+0x1f4>)
 8100dc8:	4293      	cmp	r3, r2
 8100dca:	d101      	bne.n	8100dd0 <HAL_DMA_Init+0xbc>
 8100dcc:	2301      	movs	r3, #1
 8100dce:	e000      	b.n	8100dd2 <HAL_DMA_Init+0xbe>
 8100dd0:	2300      	movs	r3, #0
 8100dd2:	2b00      	cmp	r3, #0
 8100dd4:	f000 813b 	beq.w	810104e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8100dd8:	687b      	ldr	r3, [r7, #4]
 8100dda:	2202      	movs	r2, #2
 8100ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8100de0:	687b      	ldr	r3, [r7, #4]
 8100de2:	2200      	movs	r2, #0
 8100de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8100de8:	687b      	ldr	r3, [r7, #4]
 8100dea:	681b      	ldr	r3, [r3, #0]
 8100dec:	4a37      	ldr	r2, [pc, #220]	@ (8100ecc <HAL_DMA_Init+0x1b8>)
 8100dee:	4293      	cmp	r3, r2
 8100df0:	d04a      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100df2:	687b      	ldr	r3, [r7, #4]
 8100df4:	681b      	ldr	r3, [r3, #0]
 8100df6:	4a36      	ldr	r2, [pc, #216]	@ (8100ed0 <HAL_DMA_Init+0x1bc>)
 8100df8:	4293      	cmp	r3, r2
 8100dfa:	d045      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100dfc:	687b      	ldr	r3, [r7, #4]
 8100dfe:	681b      	ldr	r3, [r3, #0]
 8100e00:	4a34      	ldr	r2, [pc, #208]	@ (8100ed4 <HAL_DMA_Init+0x1c0>)
 8100e02:	4293      	cmp	r3, r2
 8100e04:	d040      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e06:	687b      	ldr	r3, [r7, #4]
 8100e08:	681b      	ldr	r3, [r3, #0]
 8100e0a:	4a33      	ldr	r2, [pc, #204]	@ (8100ed8 <HAL_DMA_Init+0x1c4>)
 8100e0c:	4293      	cmp	r3, r2
 8100e0e:	d03b      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e10:	687b      	ldr	r3, [r7, #4]
 8100e12:	681b      	ldr	r3, [r3, #0]
 8100e14:	4a31      	ldr	r2, [pc, #196]	@ (8100edc <HAL_DMA_Init+0x1c8>)
 8100e16:	4293      	cmp	r3, r2
 8100e18:	d036      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e1a:	687b      	ldr	r3, [r7, #4]
 8100e1c:	681b      	ldr	r3, [r3, #0]
 8100e1e:	4a30      	ldr	r2, [pc, #192]	@ (8100ee0 <HAL_DMA_Init+0x1cc>)
 8100e20:	4293      	cmp	r3, r2
 8100e22:	d031      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e24:	687b      	ldr	r3, [r7, #4]
 8100e26:	681b      	ldr	r3, [r3, #0]
 8100e28:	4a2e      	ldr	r2, [pc, #184]	@ (8100ee4 <HAL_DMA_Init+0x1d0>)
 8100e2a:	4293      	cmp	r3, r2
 8100e2c:	d02c      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e2e:	687b      	ldr	r3, [r7, #4]
 8100e30:	681b      	ldr	r3, [r3, #0]
 8100e32:	4a2d      	ldr	r2, [pc, #180]	@ (8100ee8 <HAL_DMA_Init+0x1d4>)
 8100e34:	4293      	cmp	r3, r2
 8100e36:	d027      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e38:	687b      	ldr	r3, [r7, #4]
 8100e3a:	681b      	ldr	r3, [r3, #0]
 8100e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8100eec <HAL_DMA_Init+0x1d8>)
 8100e3e:	4293      	cmp	r3, r2
 8100e40:	d022      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e42:	687b      	ldr	r3, [r7, #4]
 8100e44:	681b      	ldr	r3, [r3, #0]
 8100e46:	4a2a      	ldr	r2, [pc, #168]	@ (8100ef0 <HAL_DMA_Init+0x1dc>)
 8100e48:	4293      	cmp	r3, r2
 8100e4a:	d01d      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e4c:	687b      	ldr	r3, [r7, #4]
 8100e4e:	681b      	ldr	r3, [r3, #0]
 8100e50:	4a28      	ldr	r2, [pc, #160]	@ (8100ef4 <HAL_DMA_Init+0x1e0>)
 8100e52:	4293      	cmp	r3, r2
 8100e54:	d018      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e56:	687b      	ldr	r3, [r7, #4]
 8100e58:	681b      	ldr	r3, [r3, #0]
 8100e5a:	4a27      	ldr	r2, [pc, #156]	@ (8100ef8 <HAL_DMA_Init+0x1e4>)
 8100e5c:	4293      	cmp	r3, r2
 8100e5e:	d013      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e60:	687b      	ldr	r3, [r7, #4]
 8100e62:	681b      	ldr	r3, [r3, #0]
 8100e64:	4a25      	ldr	r2, [pc, #148]	@ (8100efc <HAL_DMA_Init+0x1e8>)
 8100e66:	4293      	cmp	r3, r2
 8100e68:	d00e      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e6a:	687b      	ldr	r3, [r7, #4]
 8100e6c:	681b      	ldr	r3, [r3, #0]
 8100e6e:	4a24      	ldr	r2, [pc, #144]	@ (8100f00 <HAL_DMA_Init+0x1ec>)
 8100e70:	4293      	cmp	r3, r2
 8100e72:	d009      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e74:	687b      	ldr	r3, [r7, #4]
 8100e76:	681b      	ldr	r3, [r3, #0]
 8100e78:	4a22      	ldr	r2, [pc, #136]	@ (8100f04 <HAL_DMA_Init+0x1f0>)
 8100e7a:	4293      	cmp	r3, r2
 8100e7c:	d004      	beq.n	8100e88 <HAL_DMA_Init+0x174>
 8100e7e:	687b      	ldr	r3, [r7, #4]
 8100e80:	681b      	ldr	r3, [r3, #0]
 8100e82:	4a21      	ldr	r2, [pc, #132]	@ (8100f08 <HAL_DMA_Init+0x1f4>)
 8100e84:	4293      	cmp	r3, r2
 8100e86:	d108      	bne.n	8100e9a <HAL_DMA_Init+0x186>
 8100e88:	687b      	ldr	r3, [r7, #4]
 8100e8a:	681b      	ldr	r3, [r3, #0]
 8100e8c:	681a      	ldr	r2, [r3, #0]
 8100e8e:	687b      	ldr	r3, [r7, #4]
 8100e90:	681b      	ldr	r3, [r3, #0]
 8100e92:	f022 0201 	bic.w	r2, r2, #1
 8100e96:	601a      	str	r2, [r3, #0]
 8100e98:	e007      	b.n	8100eaa <HAL_DMA_Init+0x196>
 8100e9a:	687b      	ldr	r3, [r7, #4]
 8100e9c:	681b      	ldr	r3, [r3, #0]
 8100e9e:	681a      	ldr	r2, [r3, #0]
 8100ea0:	687b      	ldr	r3, [r7, #4]
 8100ea2:	681b      	ldr	r3, [r3, #0]
 8100ea4:	f022 0201 	bic.w	r2, r2, #1
 8100ea8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8100eaa:	e02f      	b.n	8100f0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8100eac:	f7ff fe04 	bl	8100ab8 <HAL_GetTick>
 8100eb0:	4602      	mov	r2, r0
 8100eb2:	693b      	ldr	r3, [r7, #16]
 8100eb4:	1ad3      	subs	r3, r2, r3
 8100eb6:	2b05      	cmp	r3, #5
 8100eb8:	d928      	bls.n	8100f0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8100eba:	687b      	ldr	r3, [r7, #4]
 8100ebc:	2220      	movs	r2, #32
 8100ebe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8100ec0:	687b      	ldr	r3, [r7, #4]
 8100ec2:	2203      	movs	r2, #3
 8100ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8100ec8:	2301      	movs	r3, #1
 8100eca:	e244      	b.n	8101356 <HAL_DMA_Init+0x642>
 8100ecc:	40020010 	.word	0x40020010
 8100ed0:	40020028 	.word	0x40020028
 8100ed4:	40020040 	.word	0x40020040
 8100ed8:	40020058 	.word	0x40020058
 8100edc:	40020070 	.word	0x40020070
 8100ee0:	40020088 	.word	0x40020088
 8100ee4:	400200a0 	.word	0x400200a0
 8100ee8:	400200b8 	.word	0x400200b8
 8100eec:	40020410 	.word	0x40020410
 8100ef0:	40020428 	.word	0x40020428
 8100ef4:	40020440 	.word	0x40020440
 8100ef8:	40020458 	.word	0x40020458
 8100efc:	40020470 	.word	0x40020470
 8100f00:	40020488 	.word	0x40020488
 8100f04:	400204a0 	.word	0x400204a0
 8100f08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8100f0c:	687b      	ldr	r3, [r7, #4]
 8100f0e:	681b      	ldr	r3, [r3, #0]
 8100f10:	681b      	ldr	r3, [r3, #0]
 8100f12:	f003 0301 	and.w	r3, r3, #1
 8100f16:	2b00      	cmp	r3, #0
 8100f18:	d1c8      	bne.n	8100eac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8100f1a:	687b      	ldr	r3, [r7, #4]
 8100f1c:	681b      	ldr	r3, [r3, #0]
 8100f1e:	681b      	ldr	r3, [r3, #0]
 8100f20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8100f22:	697a      	ldr	r2, [r7, #20]
 8100f24:	4b84      	ldr	r3, [pc, #528]	@ (8101138 <HAL_DMA_Init+0x424>)
 8100f26:	4013      	ands	r3, r2
 8100f28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8100f2e:	687b      	ldr	r3, [r7, #4]
 8100f30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8100f32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8100f34:	687b      	ldr	r3, [r7, #4]
 8100f36:	691b      	ldr	r3, [r3, #16]
 8100f38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8100f3a:	687b      	ldr	r3, [r7, #4]
 8100f3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8100f3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8100f40:	687b      	ldr	r3, [r7, #4]
 8100f42:	699b      	ldr	r3, [r3, #24]
 8100f44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8100f46:	687b      	ldr	r3, [r7, #4]
 8100f48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8100f4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8100f4c:	687b      	ldr	r3, [r7, #4]
 8100f4e:	6a1b      	ldr	r3, [r3, #32]
 8100f50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8100f52:	697a      	ldr	r2, [r7, #20]
 8100f54:	4313      	orrs	r3, r2
 8100f56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8100f58:	687b      	ldr	r3, [r7, #4]
 8100f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100f5c:	2b04      	cmp	r3, #4
 8100f5e:	d107      	bne.n	8100f70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8100f60:	687b      	ldr	r3, [r7, #4]
 8100f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8100f64:	687b      	ldr	r3, [r7, #4]
 8100f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8100f68:	4313      	orrs	r3, r2
 8100f6a:	697a      	ldr	r2, [r7, #20]
 8100f6c:	4313      	orrs	r3, r2
 8100f6e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8100f70:	4b72      	ldr	r3, [pc, #456]	@ (810113c <HAL_DMA_Init+0x428>)
 8100f72:	681b      	ldr	r3, [r3, #0]
 8100f74:	0c1b      	lsrs	r3, r3, #16
 8100f76:	041b      	lsls	r3, r3, #16
 8100f78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8100f7c:	d328      	bcc.n	8100fd0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8100f7e:	687b      	ldr	r3, [r7, #4]
 8100f80:	685b      	ldr	r3, [r3, #4]
 8100f82:	2b28      	cmp	r3, #40	@ 0x28
 8100f84:	d903      	bls.n	8100f8e <HAL_DMA_Init+0x27a>
 8100f86:	687b      	ldr	r3, [r7, #4]
 8100f88:	685b      	ldr	r3, [r3, #4]
 8100f8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8100f8c:	d917      	bls.n	8100fbe <HAL_DMA_Init+0x2aa>
 8100f8e:	687b      	ldr	r3, [r7, #4]
 8100f90:	685b      	ldr	r3, [r3, #4]
 8100f92:	2b3e      	cmp	r3, #62	@ 0x3e
 8100f94:	d903      	bls.n	8100f9e <HAL_DMA_Init+0x28a>
 8100f96:	687b      	ldr	r3, [r7, #4]
 8100f98:	685b      	ldr	r3, [r3, #4]
 8100f9a:	2b42      	cmp	r3, #66	@ 0x42
 8100f9c:	d90f      	bls.n	8100fbe <HAL_DMA_Init+0x2aa>
 8100f9e:	687b      	ldr	r3, [r7, #4]
 8100fa0:	685b      	ldr	r3, [r3, #4]
 8100fa2:	2b46      	cmp	r3, #70	@ 0x46
 8100fa4:	d903      	bls.n	8100fae <HAL_DMA_Init+0x29a>
 8100fa6:	687b      	ldr	r3, [r7, #4]
 8100fa8:	685b      	ldr	r3, [r3, #4]
 8100faa:	2b48      	cmp	r3, #72	@ 0x48
 8100fac:	d907      	bls.n	8100fbe <HAL_DMA_Init+0x2aa>
 8100fae:	687b      	ldr	r3, [r7, #4]
 8100fb0:	685b      	ldr	r3, [r3, #4]
 8100fb2:	2b4e      	cmp	r3, #78	@ 0x4e
 8100fb4:	d905      	bls.n	8100fc2 <HAL_DMA_Init+0x2ae>
 8100fb6:	687b      	ldr	r3, [r7, #4]
 8100fb8:	685b      	ldr	r3, [r3, #4]
 8100fba:	2b52      	cmp	r3, #82	@ 0x52
 8100fbc:	d801      	bhi.n	8100fc2 <HAL_DMA_Init+0x2ae>
 8100fbe:	2301      	movs	r3, #1
 8100fc0:	e000      	b.n	8100fc4 <HAL_DMA_Init+0x2b0>
 8100fc2:	2300      	movs	r3, #0
 8100fc4:	2b00      	cmp	r3, #0
 8100fc6:	d003      	beq.n	8100fd0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8100fc8:	697b      	ldr	r3, [r7, #20]
 8100fca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100fce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8100fd0:	687b      	ldr	r3, [r7, #4]
 8100fd2:	681b      	ldr	r3, [r3, #0]
 8100fd4:	697a      	ldr	r2, [r7, #20]
 8100fd6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8100fd8:	687b      	ldr	r3, [r7, #4]
 8100fda:	681b      	ldr	r3, [r3, #0]
 8100fdc:	695b      	ldr	r3, [r3, #20]
 8100fde:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8100fe0:	697b      	ldr	r3, [r7, #20]
 8100fe2:	f023 0307 	bic.w	r3, r3, #7
 8100fe6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8100fe8:	687b      	ldr	r3, [r7, #4]
 8100fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100fec:	697a      	ldr	r2, [r7, #20]
 8100fee:	4313      	orrs	r3, r2
 8100ff0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8100ff2:	687b      	ldr	r3, [r7, #4]
 8100ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8100ff6:	2b04      	cmp	r3, #4
 8100ff8:	d117      	bne.n	810102a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8100ffa:	687b      	ldr	r3, [r7, #4]
 8100ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8100ffe:	697a      	ldr	r2, [r7, #20]
 8101000:	4313      	orrs	r3, r2
 8101002:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8101004:	687b      	ldr	r3, [r7, #4]
 8101006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101008:	2b00      	cmp	r3, #0
 810100a:	d00e      	beq.n	810102a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 810100c:	6878      	ldr	r0, [r7, #4]
 810100e:	f001 fbfd 	bl	810280c <DMA_CheckFifoParam>
 8101012:	4603      	mov	r3, r0
 8101014:	2b00      	cmp	r3, #0
 8101016:	d008      	beq.n	810102a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8101018:	687b      	ldr	r3, [r7, #4]
 810101a:	2240      	movs	r2, #64	@ 0x40
 810101c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810101e:	687b      	ldr	r3, [r7, #4]
 8101020:	2201      	movs	r2, #1
 8101022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8101026:	2301      	movs	r3, #1
 8101028:	e195      	b.n	8101356 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 810102a:	687b      	ldr	r3, [r7, #4]
 810102c:	681b      	ldr	r3, [r3, #0]
 810102e:	697a      	ldr	r2, [r7, #20]
 8101030:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8101032:	6878      	ldr	r0, [r7, #4]
 8101034:	f001 fb38 	bl	81026a8 <DMA_CalcBaseAndBitshift>
 8101038:	4603      	mov	r3, r0
 810103a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810103c:	687b      	ldr	r3, [r7, #4]
 810103e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101040:	f003 031f 	and.w	r3, r3, #31
 8101044:	223f      	movs	r2, #63	@ 0x3f
 8101046:	409a      	lsls	r2, r3
 8101048:	68bb      	ldr	r3, [r7, #8]
 810104a:	609a      	str	r2, [r3, #8]
 810104c:	e0cb      	b.n	81011e6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810104e:	687b      	ldr	r3, [r7, #4]
 8101050:	681b      	ldr	r3, [r3, #0]
 8101052:	4a3b      	ldr	r2, [pc, #236]	@ (8101140 <HAL_DMA_Init+0x42c>)
 8101054:	4293      	cmp	r3, r2
 8101056:	d022      	beq.n	810109e <HAL_DMA_Init+0x38a>
 8101058:	687b      	ldr	r3, [r7, #4]
 810105a:	681b      	ldr	r3, [r3, #0]
 810105c:	4a39      	ldr	r2, [pc, #228]	@ (8101144 <HAL_DMA_Init+0x430>)
 810105e:	4293      	cmp	r3, r2
 8101060:	d01d      	beq.n	810109e <HAL_DMA_Init+0x38a>
 8101062:	687b      	ldr	r3, [r7, #4]
 8101064:	681b      	ldr	r3, [r3, #0]
 8101066:	4a38      	ldr	r2, [pc, #224]	@ (8101148 <HAL_DMA_Init+0x434>)
 8101068:	4293      	cmp	r3, r2
 810106a:	d018      	beq.n	810109e <HAL_DMA_Init+0x38a>
 810106c:	687b      	ldr	r3, [r7, #4]
 810106e:	681b      	ldr	r3, [r3, #0]
 8101070:	4a36      	ldr	r2, [pc, #216]	@ (810114c <HAL_DMA_Init+0x438>)
 8101072:	4293      	cmp	r3, r2
 8101074:	d013      	beq.n	810109e <HAL_DMA_Init+0x38a>
 8101076:	687b      	ldr	r3, [r7, #4]
 8101078:	681b      	ldr	r3, [r3, #0]
 810107a:	4a35      	ldr	r2, [pc, #212]	@ (8101150 <HAL_DMA_Init+0x43c>)
 810107c:	4293      	cmp	r3, r2
 810107e:	d00e      	beq.n	810109e <HAL_DMA_Init+0x38a>
 8101080:	687b      	ldr	r3, [r7, #4]
 8101082:	681b      	ldr	r3, [r3, #0]
 8101084:	4a33      	ldr	r2, [pc, #204]	@ (8101154 <HAL_DMA_Init+0x440>)
 8101086:	4293      	cmp	r3, r2
 8101088:	d009      	beq.n	810109e <HAL_DMA_Init+0x38a>
 810108a:	687b      	ldr	r3, [r7, #4]
 810108c:	681b      	ldr	r3, [r3, #0]
 810108e:	4a32      	ldr	r2, [pc, #200]	@ (8101158 <HAL_DMA_Init+0x444>)
 8101090:	4293      	cmp	r3, r2
 8101092:	d004      	beq.n	810109e <HAL_DMA_Init+0x38a>
 8101094:	687b      	ldr	r3, [r7, #4]
 8101096:	681b      	ldr	r3, [r3, #0]
 8101098:	4a30      	ldr	r2, [pc, #192]	@ (810115c <HAL_DMA_Init+0x448>)
 810109a:	4293      	cmp	r3, r2
 810109c:	d101      	bne.n	81010a2 <HAL_DMA_Init+0x38e>
 810109e:	2301      	movs	r3, #1
 81010a0:	e000      	b.n	81010a4 <HAL_DMA_Init+0x390>
 81010a2:	2300      	movs	r3, #0
 81010a4:	2b00      	cmp	r3, #0
 81010a6:	f000 8095 	beq.w	81011d4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81010aa:	687b      	ldr	r3, [r7, #4]
 81010ac:	681b      	ldr	r3, [r3, #0]
 81010ae:	4a24      	ldr	r2, [pc, #144]	@ (8101140 <HAL_DMA_Init+0x42c>)
 81010b0:	4293      	cmp	r3, r2
 81010b2:	d021      	beq.n	81010f8 <HAL_DMA_Init+0x3e4>
 81010b4:	687b      	ldr	r3, [r7, #4]
 81010b6:	681b      	ldr	r3, [r3, #0]
 81010b8:	4a22      	ldr	r2, [pc, #136]	@ (8101144 <HAL_DMA_Init+0x430>)
 81010ba:	4293      	cmp	r3, r2
 81010bc:	d01c      	beq.n	81010f8 <HAL_DMA_Init+0x3e4>
 81010be:	687b      	ldr	r3, [r7, #4]
 81010c0:	681b      	ldr	r3, [r3, #0]
 81010c2:	4a21      	ldr	r2, [pc, #132]	@ (8101148 <HAL_DMA_Init+0x434>)
 81010c4:	4293      	cmp	r3, r2
 81010c6:	d017      	beq.n	81010f8 <HAL_DMA_Init+0x3e4>
 81010c8:	687b      	ldr	r3, [r7, #4]
 81010ca:	681b      	ldr	r3, [r3, #0]
 81010cc:	4a1f      	ldr	r2, [pc, #124]	@ (810114c <HAL_DMA_Init+0x438>)
 81010ce:	4293      	cmp	r3, r2
 81010d0:	d012      	beq.n	81010f8 <HAL_DMA_Init+0x3e4>
 81010d2:	687b      	ldr	r3, [r7, #4]
 81010d4:	681b      	ldr	r3, [r3, #0]
 81010d6:	4a1e      	ldr	r2, [pc, #120]	@ (8101150 <HAL_DMA_Init+0x43c>)
 81010d8:	4293      	cmp	r3, r2
 81010da:	d00d      	beq.n	81010f8 <HAL_DMA_Init+0x3e4>
 81010dc:	687b      	ldr	r3, [r7, #4]
 81010de:	681b      	ldr	r3, [r3, #0]
 81010e0:	4a1c      	ldr	r2, [pc, #112]	@ (8101154 <HAL_DMA_Init+0x440>)
 81010e2:	4293      	cmp	r3, r2
 81010e4:	d008      	beq.n	81010f8 <HAL_DMA_Init+0x3e4>
 81010e6:	687b      	ldr	r3, [r7, #4]
 81010e8:	681b      	ldr	r3, [r3, #0]
 81010ea:	4a1b      	ldr	r2, [pc, #108]	@ (8101158 <HAL_DMA_Init+0x444>)
 81010ec:	4293      	cmp	r3, r2
 81010ee:	d003      	beq.n	81010f8 <HAL_DMA_Init+0x3e4>
 81010f0:	687b      	ldr	r3, [r7, #4]
 81010f2:	681b      	ldr	r3, [r3, #0]
 81010f4:	4a19      	ldr	r2, [pc, #100]	@ (810115c <HAL_DMA_Init+0x448>)
 81010f6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81010f8:	687b      	ldr	r3, [r7, #4]
 81010fa:	2202      	movs	r2, #2
 81010fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8101100:	687b      	ldr	r3, [r7, #4]
 8101102:	2200      	movs	r2, #0
 8101104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8101108:	687b      	ldr	r3, [r7, #4]
 810110a:	681b      	ldr	r3, [r3, #0]
 810110c:	681b      	ldr	r3, [r3, #0]
 810110e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8101110:	697b      	ldr	r3, [r7, #20]
 8101112:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8101116:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 810111a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810111c:	687b      	ldr	r3, [r7, #4]
 810111e:	689b      	ldr	r3, [r3, #8]
 8101120:	2b40      	cmp	r3, #64	@ 0x40
 8101122:	d01d      	beq.n	8101160 <HAL_DMA_Init+0x44c>
 8101124:	687b      	ldr	r3, [r7, #4]
 8101126:	689b      	ldr	r3, [r3, #8]
 8101128:	2b80      	cmp	r3, #128	@ 0x80
 810112a:	d102      	bne.n	8101132 <HAL_DMA_Init+0x41e>
 810112c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8101130:	e017      	b.n	8101162 <HAL_DMA_Init+0x44e>
 8101132:	2300      	movs	r3, #0
 8101134:	e015      	b.n	8101162 <HAL_DMA_Init+0x44e>
 8101136:	bf00      	nop
 8101138:	fe10803f 	.word	0xfe10803f
 810113c:	5c001000 	.word	0x5c001000
 8101140:	58025408 	.word	0x58025408
 8101144:	5802541c 	.word	0x5802541c
 8101148:	58025430 	.word	0x58025430
 810114c:	58025444 	.word	0x58025444
 8101150:	58025458 	.word	0x58025458
 8101154:	5802546c 	.word	0x5802546c
 8101158:	58025480 	.word	0x58025480
 810115c:	58025494 	.word	0x58025494
 8101160:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8101162:	687a      	ldr	r2, [r7, #4]
 8101164:	68d2      	ldr	r2, [r2, #12]
 8101166:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101168:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810116a:	687b      	ldr	r3, [r7, #4]
 810116c:	691b      	ldr	r3, [r3, #16]
 810116e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8101170:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8101172:	687b      	ldr	r3, [r7, #4]
 8101174:	695b      	ldr	r3, [r3, #20]
 8101176:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8101178:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810117a:	687b      	ldr	r3, [r7, #4]
 810117c:	699b      	ldr	r3, [r3, #24]
 810117e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8101180:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8101182:	687b      	ldr	r3, [r7, #4]
 8101184:	69db      	ldr	r3, [r3, #28]
 8101186:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8101188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810118a:	687b      	ldr	r3, [r7, #4]
 810118c:	6a1b      	ldr	r3, [r3, #32]
 810118e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8101190:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8101192:	697a      	ldr	r2, [r7, #20]
 8101194:	4313      	orrs	r3, r2
 8101196:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8101198:	687b      	ldr	r3, [r7, #4]
 810119a:	681b      	ldr	r3, [r3, #0]
 810119c:	697a      	ldr	r2, [r7, #20]
 810119e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81011a0:	687b      	ldr	r3, [r7, #4]
 81011a2:	681b      	ldr	r3, [r3, #0]
 81011a4:	461a      	mov	r2, r3
 81011a6:	4b6e      	ldr	r3, [pc, #440]	@ (8101360 <HAL_DMA_Init+0x64c>)
 81011a8:	4413      	add	r3, r2
 81011aa:	4a6e      	ldr	r2, [pc, #440]	@ (8101364 <HAL_DMA_Init+0x650>)
 81011ac:	fba2 2303 	umull	r2, r3, r2, r3
 81011b0:	091b      	lsrs	r3, r3, #4
 81011b2:	009a      	lsls	r2, r3, #2
 81011b4:	687b      	ldr	r3, [r7, #4]
 81011b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81011b8:	6878      	ldr	r0, [r7, #4]
 81011ba:	f001 fa75 	bl	81026a8 <DMA_CalcBaseAndBitshift>
 81011be:	4603      	mov	r3, r0
 81011c0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81011c2:	687b      	ldr	r3, [r7, #4]
 81011c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81011c6:	f003 031f 	and.w	r3, r3, #31
 81011ca:	2201      	movs	r2, #1
 81011cc:	409a      	lsls	r2, r3
 81011ce:	68fb      	ldr	r3, [r7, #12]
 81011d0:	605a      	str	r2, [r3, #4]
 81011d2:	e008      	b.n	81011e6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81011d4:	687b      	ldr	r3, [r7, #4]
 81011d6:	2240      	movs	r2, #64	@ 0x40
 81011d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81011da:	687b      	ldr	r3, [r7, #4]
 81011dc:	2203      	movs	r2, #3
 81011de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 81011e2:	2301      	movs	r3, #1
 81011e4:	e0b7      	b.n	8101356 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81011e6:	687b      	ldr	r3, [r7, #4]
 81011e8:	681b      	ldr	r3, [r3, #0]
 81011ea:	4a5f      	ldr	r2, [pc, #380]	@ (8101368 <HAL_DMA_Init+0x654>)
 81011ec:	4293      	cmp	r3, r2
 81011ee:	d072      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 81011f0:	687b      	ldr	r3, [r7, #4]
 81011f2:	681b      	ldr	r3, [r3, #0]
 81011f4:	4a5d      	ldr	r2, [pc, #372]	@ (810136c <HAL_DMA_Init+0x658>)
 81011f6:	4293      	cmp	r3, r2
 81011f8:	d06d      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 81011fa:	687b      	ldr	r3, [r7, #4]
 81011fc:	681b      	ldr	r3, [r3, #0]
 81011fe:	4a5c      	ldr	r2, [pc, #368]	@ (8101370 <HAL_DMA_Init+0x65c>)
 8101200:	4293      	cmp	r3, r2
 8101202:	d068      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 8101204:	687b      	ldr	r3, [r7, #4]
 8101206:	681b      	ldr	r3, [r3, #0]
 8101208:	4a5a      	ldr	r2, [pc, #360]	@ (8101374 <HAL_DMA_Init+0x660>)
 810120a:	4293      	cmp	r3, r2
 810120c:	d063      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 810120e:	687b      	ldr	r3, [r7, #4]
 8101210:	681b      	ldr	r3, [r3, #0]
 8101212:	4a59      	ldr	r2, [pc, #356]	@ (8101378 <HAL_DMA_Init+0x664>)
 8101214:	4293      	cmp	r3, r2
 8101216:	d05e      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 8101218:	687b      	ldr	r3, [r7, #4]
 810121a:	681b      	ldr	r3, [r3, #0]
 810121c:	4a57      	ldr	r2, [pc, #348]	@ (810137c <HAL_DMA_Init+0x668>)
 810121e:	4293      	cmp	r3, r2
 8101220:	d059      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 8101222:	687b      	ldr	r3, [r7, #4]
 8101224:	681b      	ldr	r3, [r3, #0]
 8101226:	4a56      	ldr	r2, [pc, #344]	@ (8101380 <HAL_DMA_Init+0x66c>)
 8101228:	4293      	cmp	r3, r2
 810122a:	d054      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	681b      	ldr	r3, [r3, #0]
 8101230:	4a54      	ldr	r2, [pc, #336]	@ (8101384 <HAL_DMA_Init+0x670>)
 8101232:	4293      	cmp	r3, r2
 8101234:	d04f      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 8101236:	687b      	ldr	r3, [r7, #4]
 8101238:	681b      	ldr	r3, [r3, #0]
 810123a:	4a53      	ldr	r2, [pc, #332]	@ (8101388 <HAL_DMA_Init+0x674>)
 810123c:	4293      	cmp	r3, r2
 810123e:	d04a      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 8101240:	687b      	ldr	r3, [r7, #4]
 8101242:	681b      	ldr	r3, [r3, #0]
 8101244:	4a51      	ldr	r2, [pc, #324]	@ (810138c <HAL_DMA_Init+0x678>)
 8101246:	4293      	cmp	r3, r2
 8101248:	d045      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 810124a:	687b      	ldr	r3, [r7, #4]
 810124c:	681b      	ldr	r3, [r3, #0]
 810124e:	4a50      	ldr	r2, [pc, #320]	@ (8101390 <HAL_DMA_Init+0x67c>)
 8101250:	4293      	cmp	r3, r2
 8101252:	d040      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 8101254:	687b      	ldr	r3, [r7, #4]
 8101256:	681b      	ldr	r3, [r3, #0]
 8101258:	4a4e      	ldr	r2, [pc, #312]	@ (8101394 <HAL_DMA_Init+0x680>)
 810125a:	4293      	cmp	r3, r2
 810125c:	d03b      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 810125e:	687b      	ldr	r3, [r7, #4]
 8101260:	681b      	ldr	r3, [r3, #0]
 8101262:	4a4d      	ldr	r2, [pc, #308]	@ (8101398 <HAL_DMA_Init+0x684>)
 8101264:	4293      	cmp	r3, r2
 8101266:	d036      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 8101268:	687b      	ldr	r3, [r7, #4]
 810126a:	681b      	ldr	r3, [r3, #0]
 810126c:	4a4b      	ldr	r2, [pc, #300]	@ (810139c <HAL_DMA_Init+0x688>)
 810126e:	4293      	cmp	r3, r2
 8101270:	d031      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 8101272:	687b      	ldr	r3, [r7, #4]
 8101274:	681b      	ldr	r3, [r3, #0]
 8101276:	4a4a      	ldr	r2, [pc, #296]	@ (81013a0 <HAL_DMA_Init+0x68c>)
 8101278:	4293      	cmp	r3, r2
 810127a:	d02c      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 810127c:	687b      	ldr	r3, [r7, #4]
 810127e:	681b      	ldr	r3, [r3, #0]
 8101280:	4a48      	ldr	r2, [pc, #288]	@ (81013a4 <HAL_DMA_Init+0x690>)
 8101282:	4293      	cmp	r3, r2
 8101284:	d027      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 8101286:	687b      	ldr	r3, [r7, #4]
 8101288:	681b      	ldr	r3, [r3, #0]
 810128a:	4a47      	ldr	r2, [pc, #284]	@ (81013a8 <HAL_DMA_Init+0x694>)
 810128c:	4293      	cmp	r3, r2
 810128e:	d022      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 8101290:	687b      	ldr	r3, [r7, #4]
 8101292:	681b      	ldr	r3, [r3, #0]
 8101294:	4a45      	ldr	r2, [pc, #276]	@ (81013ac <HAL_DMA_Init+0x698>)
 8101296:	4293      	cmp	r3, r2
 8101298:	d01d      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 810129a:	687b      	ldr	r3, [r7, #4]
 810129c:	681b      	ldr	r3, [r3, #0]
 810129e:	4a44      	ldr	r2, [pc, #272]	@ (81013b0 <HAL_DMA_Init+0x69c>)
 81012a0:	4293      	cmp	r3, r2
 81012a2:	d018      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 81012a4:	687b      	ldr	r3, [r7, #4]
 81012a6:	681b      	ldr	r3, [r3, #0]
 81012a8:	4a42      	ldr	r2, [pc, #264]	@ (81013b4 <HAL_DMA_Init+0x6a0>)
 81012aa:	4293      	cmp	r3, r2
 81012ac:	d013      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 81012ae:	687b      	ldr	r3, [r7, #4]
 81012b0:	681b      	ldr	r3, [r3, #0]
 81012b2:	4a41      	ldr	r2, [pc, #260]	@ (81013b8 <HAL_DMA_Init+0x6a4>)
 81012b4:	4293      	cmp	r3, r2
 81012b6:	d00e      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 81012b8:	687b      	ldr	r3, [r7, #4]
 81012ba:	681b      	ldr	r3, [r3, #0]
 81012bc:	4a3f      	ldr	r2, [pc, #252]	@ (81013bc <HAL_DMA_Init+0x6a8>)
 81012be:	4293      	cmp	r3, r2
 81012c0:	d009      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 81012c2:	687b      	ldr	r3, [r7, #4]
 81012c4:	681b      	ldr	r3, [r3, #0]
 81012c6:	4a3e      	ldr	r2, [pc, #248]	@ (81013c0 <HAL_DMA_Init+0x6ac>)
 81012c8:	4293      	cmp	r3, r2
 81012ca:	d004      	beq.n	81012d6 <HAL_DMA_Init+0x5c2>
 81012cc:	687b      	ldr	r3, [r7, #4]
 81012ce:	681b      	ldr	r3, [r3, #0]
 81012d0:	4a3c      	ldr	r2, [pc, #240]	@ (81013c4 <HAL_DMA_Init+0x6b0>)
 81012d2:	4293      	cmp	r3, r2
 81012d4:	d101      	bne.n	81012da <HAL_DMA_Init+0x5c6>
 81012d6:	2301      	movs	r3, #1
 81012d8:	e000      	b.n	81012dc <HAL_DMA_Init+0x5c8>
 81012da:	2300      	movs	r3, #0
 81012dc:	2b00      	cmp	r3, #0
 81012de:	d032      	beq.n	8101346 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81012e0:	6878      	ldr	r0, [r7, #4]
 81012e2:	f001 fb0f 	bl	8102904 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81012e6:	687b      	ldr	r3, [r7, #4]
 81012e8:	689b      	ldr	r3, [r3, #8]
 81012ea:	2b80      	cmp	r3, #128	@ 0x80
 81012ec:	d102      	bne.n	81012f4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81012ee:	687b      	ldr	r3, [r7, #4]
 81012f0:	2200      	movs	r2, #0
 81012f2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	685a      	ldr	r2, [r3, #4]
 81012f8:	687b      	ldr	r3, [r7, #4]
 81012fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81012fc:	b2d2      	uxtb	r2, r2
 81012fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8101300:	687b      	ldr	r3, [r7, #4]
 8101302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101304:	687a      	ldr	r2, [r7, #4]
 8101306:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8101308:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810130a:	687b      	ldr	r3, [r7, #4]
 810130c:	685b      	ldr	r3, [r3, #4]
 810130e:	2b00      	cmp	r3, #0
 8101310:	d010      	beq.n	8101334 <HAL_DMA_Init+0x620>
 8101312:	687b      	ldr	r3, [r7, #4]
 8101314:	685b      	ldr	r3, [r3, #4]
 8101316:	2b08      	cmp	r3, #8
 8101318:	d80c      	bhi.n	8101334 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 810131a:	6878      	ldr	r0, [r7, #4]
 810131c:	f001 fb8c 	bl	8102a38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8101320:	687b      	ldr	r3, [r7, #4]
 8101322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101324:	2200      	movs	r2, #0
 8101326:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8101328:	687b      	ldr	r3, [r7, #4]
 810132a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810132c:	687a      	ldr	r2, [r7, #4]
 810132e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8101330:	605a      	str	r2, [r3, #4]
 8101332:	e008      	b.n	8101346 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	2200      	movs	r2, #0
 8101338:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 810133a:	687b      	ldr	r3, [r7, #4]
 810133c:	2200      	movs	r2, #0
 810133e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8101340:	687b      	ldr	r3, [r7, #4]
 8101342:	2200      	movs	r2, #0
 8101344:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8101346:	687b      	ldr	r3, [r7, #4]
 8101348:	2200      	movs	r2, #0
 810134a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 810134c:	687b      	ldr	r3, [r7, #4]
 810134e:	2201      	movs	r2, #1
 8101350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8101354:	2300      	movs	r3, #0
}
 8101356:	4618      	mov	r0, r3
 8101358:	3718      	adds	r7, #24
 810135a:	46bd      	mov	sp, r7
 810135c:	bd80      	pop	{r7, pc}
 810135e:	bf00      	nop
 8101360:	a7fdabf8 	.word	0xa7fdabf8
 8101364:	cccccccd 	.word	0xcccccccd
 8101368:	40020010 	.word	0x40020010
 810136c:	40020028 	.word	0x40020028
 8101370:	40020040 	.word	0x40020040
 8101374:	40020058 	.word	0x40020058
 8101378:	40020070 	.word	0x40020070
 810137c:	40020088 	.word	0x40020088
 8101380:	400200a0 	.word	0x400200a0
 8101384:	400200b8 	.word	0x400200b8
 8101388:	40020410 	.word	0x40020410
 810138c:	40020428 	.word	0x40020428
 8101390:	40020440 	.word	0x40020440
 8101394:	40020458 	.word	0x40020458
 8101398:	40020470 	.word	0x40020470
 810139c:	40020488 	.word	0x40020488
 81013a0:	400204a0 	.word	0x400204a0
 81013a4:	400204b8 	.word	0x400204b8
 81013a8:	58025408 	.word	0x58025408
 81013ac:	5802541c 	.word	0x5802541c
 81013b0:	58025430 	.word	0x58025430
 81013b4:	58025444 	.word	0x58025444
 81013b8:	58025458 	.word	0x58025458
 81013bc:	5802546c 	.word	0x5802546c
 81013c0:	58025480 	.word	0x58025480
 81013c4:	58025494 	.word	0x58025494

081013c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81013c8:	b580      	push	{r7, lr}
 81013ca:	b084      	sub	sp, #16
 81013cc:	af00      	add	r7, sp, #0
 81013ce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81013d0:	687b      	ldr	r3, [r7, #4]
 81013d2:	2b00      	cmp	r3, #0
 81013d4:	d101      	bne.n	81013da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81013d6:	2301      	movs	r3, #1
 81013d8:	e237      	b.n	810184a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81013da:	687b      	ldr	r3, [r7, #4]
 81013dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81013e0:	b2db      	uxtb	r3, r3
 81013e2:	2b02      	cmp	r3, #2
 81013e4:	d004      	beq.n	81013f0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81013e6:	687b      	ldr	r3, [r7, #4]
 81013e8:	2280      	movs	r2, #128	@ 0x80
 81013ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 81013ec:	2301      	movs	r3, #1
 81013ee:	e22c      	b.n	810184a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81013f0:	687b      	ldr	r3, [r7, #4]
 81013f2:	681b      	ldr	r3, [r3, #0]
 81013f4:	4a5c      	ldr	r2, [pc, #368]	@ (8101568 <HAL_DMA_Abort_IT+0x1a0>)
 81013f6:	4293      	cmp	r3, r2
 81013f8:	d04a      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 81013fa:	687b      	ldr	r3, [r7, #4]
 81013fc:	681b      	ldr	r3, [r3, #0]
 81013fe:	4a5b      	ldr	r2, [pc, #364]	@ (810156c <HAL_DMA_Abort_IT+0x1a4>)
 8101400:	4293      	cmp	r3, r2
 8101402:	d045      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 8101404:	687b      	ldr	r3, [r7, #4]
 8101406:	681b      	ldr	r3, [r3, #0]
 8101408:	4a59      	ldr	r2, [pc, #356]	@ (8101570 <HAL_DMA_Abort_IT+0x1a8>)
 810140a:	4293      	cmp	r3, r2
 810140c:	d040      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 810140e:	687b      	ldr	r3, [r7, #4]
 8101410:	681b      	ldr	r3, [r3, #0]
 8101412:	4a58      	ldr	r2, [pc, #352]	@ (8101574 <HAL_DMA_Abort_IT+0x1ac>)
 8101414:	4293      	cmp	r3, r2
 8101416:	d03b      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 8101418:	687b      	ldr	r3, [r7, #4]
 810141a:	681b      	ldr	r3, [r3, #0]
 810141c:	4a56      	ldr	r2, [pc, #344]	@ (8101578 <HAL_DMA_Abort_IT+0x1b0>)
 810141e:	4293      	cmp	r3, r2
 8101420:	d036      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 8101422:	687b      	ldr	r3, [r7, #4]
 8101424:	681b      	ldr	r3, [r3, #0]
 8101426:	4a55      	ldr	r2, [pc, #340]	@ (810157c <HAL_DMA_Abort_IT+0x1b4>)
 8101428:	4293      	cmp	r3, r2
 810142a:	d031      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 810142c:	687b      	ldr	r3, [r7, #4]
 810142e:	681b      	ldr	r3, [r3, #0]
 8101430:	4a53      	ldr	r2, [pc, #332]	@ (8101580 <HAL_DMA_Abort_IT+0x1b8>)
 8101432:	4293      	cmp	r3, r2
 8101434:	d02c      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 8101436:	687b      	ldr	r3, [r7, #4]
 8101438:	681b      	ldr	r3, [r3, #0]
 810143a:	4a52      	ldr	r2, [pc, #328]	@ (8101584 <HAL_DMA_Abort_IT+0x1bc>)
 810143c:	4293      	cmp	r3, r2
 810143e:	d027      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 8101440:	687b      	ldr	r3, [r7, #4]
 8101442:	681b      	ldr	r3, [r3, #0]
 8101444:	4a50      	ldr	r2, [pc, #320]	@ (8101588 <HAL_DMA_Abort_IT+0x1c0>)
 8101446:	4293      	cmp	r3, r2
 8101448:	d022      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 810144a:	687b      	ldr	r3, [r7, #4]
 810144c:	681b      	ldr	r3, [r3, #0]
 810144e:	4a4f      	ldr	r2, [pc, #316]	@ (810158c <HAL_DMA_Abort_IT+0x1c4>)
 8101450:	4293      	cmp	r3, r2
 8101452:	d01d      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 8101454:	687b      	ldr	r3, [r7, #4]
 8101456:	681b      	ldr	r3, [r3, #0]
 8101458:	4a4d      	ldr	r2, [pc, #308]	@ (8101590 <HAL_DMA_Abort_IT+0x1c8>)
 810145a:	4293      	cmp	r3, r2
 810145c:	d018      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 810145e:	687b      	ldr	r3, [r7, #4]
 8101460:	681b      	ldr	r3, [r3, #0]
 8101462:	4a4c      	ldr	r2, [pc, #304]	@ (8101594 <HAL_DMA_Abort_IT+0x1cc>)
 8101464:	4293      	cmp	r3, r2
 8101466:	d013      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 8101468:	687b      	ldr	r3, [r7, #4]
 810146a:	681b      	ldr	r3, [r3, #0]
 810146c:	4a4a      	ldr	r2, [pc, #296]	@ (8101598 <HAL_DMA_Abort_IT+0x1d0>)
 810146e:	4293      	cmp	r3, r2
 8101470:	d00e      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 8101472:	687b      	ldr	r3, [r7, #4]
 8101474:	681b      	ldr	r3, [r3, #0]
 8101476:	4a49      	ldr	r2, [pc, #292]	@ (810159c <HAL_DMA_Abort_IT+0x1d4>)
 8101478:	4293      	cmp	r3, r2
 810147a:	d009      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 810147c:	687b      	ldr	r3, [r7, #4]
 810147e:	681b      	ldr	r3, [r3, #0]
 8101480:	4a47      	ldr	r2, [pc, #284]	@ (81015a0 <HAL_DMA_Abort_IT+0x1d8>)
 8101482:	4293      	cmp	r3, r2
 8101484:	d004      	beq.n	8101490 <HAL_DMA_Abort_IT+0xc8>
 8101486:	687b      	ldr	r3, [r7, #4]
 8101488:	681b      	ldr	r3, [r3, #0]
 810148a:	4a46      	ldr	r2, [pc, #280]	@ (81015a4 <HAL_DMA_Abort_IT+0x1dc>)
 810148c:	4293      	cmp	r3, r2
 810148e:	d101      	bne.n	8101494 <HAL_DMA_Abort_IT+0xcc>
 8101490:	2301      	movs	r3, #1
 8101492:	e000      	b.n	8101496 <HAL_DMA_Abort_IT+0xce>
 8101494:	2300      	movs	r3, #0
 8101496:	2b00      	cmp	r3, #0
 8101498:	f000 8086 	beq.w	81015a8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810149c:	687b      	ldr	r3, [r7, #4]
 810149e:	2204      	movs	r2, #4
 81014a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81014a4:	687b      	ldr	r3, [r7, #4]
 81014a6:	681b      	ldr	r3, [r3, #0]
 81014a8:	4a2f      	ldr	r2, [pc, #188]	@ (8101568 <HAL_DMA_Abort_IT+0x1a0>)
 81014aa:	4293      	cmp	r3, r2
 81014ac:	d04a      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 81014ae:	687b      	ldr	r3, [r7, #4]
 81014b0:	681b      	ldr	r3, [r3, #0]
 81014b2:	4a2e      	ldr	r2, [pc, #184]	@ (810156c <HAL_DMA_Abort_IT+0x1a4>)
 81014b4:	4293      	cmp	r3, r2
 81014b6:	d045      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 81014b8:	687b      	ldr	r3, [r7, #4]
 81014ba:	681b      	ldr	r3, [r3, #0]
 81014bc:	4a2c      	ldr	r2, [pc, #176]	@ (8101570 <HAL_DMA_Abort_IT+0x1a8>)
 81014be:	4293      	cmp	r3, r2
 81014c0:	d040      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 81014c2:	687b      	ldr	r3, [r7, #4]
 81014c4:	681b      	ldr	r3, [r3, #0]
 81014c6:	4a2b      	ldr	r2, [pc, #172]	@ (8101574 <HAL_DMA_Abort_IT+0x1ac>)
 81014c8:	4293      	cmp	r3, r2
 81014ca:	d03b      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 81014cc:	687b      	ldr	r3, [r7, #4]
 81014ce:	681b      	ldr	r3, [r3, #0]
 81014d0:	4a29      	ldr	r2, [pc, #164]	@ (8101578 <HAL_DMA_Abort_IT+0x1b0>)
 81014d2:	4293      	cmp	r3, r2
 81014d4:	d036      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 81014d6:	687b      	ldr	r3, [r7, #4]
 81014d8:	681b      	ldr	r3, [r3, #0]
 81014da:	4a28      	ldr	r2, [pc, #160]	@ (810157c <HAL_DMA_Abort_IT+0x1b4>)
 81014dc:	4293      	cmp	r3, r2
 81014de:	d031      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 81014e0:	687b      	ldr	r3, [r7, #4]
 81014e2:	681b      	ldr	r3, [r3, #0]
 81014e4:	4a26      	ldr	r2, [pc, #152]	@ (8101580 <HAL_DMA_Abort_IT+0x1b8>)
 81014e6:	4293      	cmp	r3, r2
 81014e8:	d02c      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 81014ea:	687b      	ldr	r3, [r7, #4]
 81014ec:	681b      	ldr	r3, [r3, #0]
 81014ee:	4a25      	ldr	r2, [pc, #148]	@ (8101584 <HAL_DMA_Abort_IT+0x1bc>)
 81014f0:	4293      	cmp	r3, r2
 81014f2:	d027      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 81014f4:	687b      	ldr	r3, [r7, #4]
 81014f6:	681b      	ldr	r3, [r3, #0]
 81014f8:	4a23      	ldr	r2, [pc, #140]	@ (8101588 <HAL_DMA_Abort_IT+0x1c0>)
 81014fa:	4293      	cmp	r3, r2
 81014fc:	d022      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 81014fe:	687b      	ldr	r3, [r7, #4]
 8101500:	681b      	ldr	r3, [r3, #0]
 8101502:	4a22      	ldr	r2, [pc, #136]	@ (810158c <HAL_DMA_Abort_IT+0x1c4>)
 8101504:	4293      	cmp	r3, r2
 8101506:	d01d      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 8101508:	687b      	ldr	r3, [r7, #4]
 810150a:	681b      	ldr	r3, [r3, #0]
 810150c:	4a20      	ldr	r2, [pc, #128]	@ (8101590 <HAL_DMA_Abort_IT+0x1c8>)
 810150e:	4293      	cmp	r3, r2
 8101510:	d018      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 8101512:	687b      	ldr	r3, [r7, #4]
 8101514:	681b      	ldr	r3, [r3, #0]
 8101516:	4a1f      	ldr	r2, [pc, #124]	@ (8101594 <HAL_DMA_Abort_IT+0x1cc>)
 8101518:	4293      	cmp	r3, r2
 810151a:	d013      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 810151c:	687b      	ldr	r3, [r7, #4]
 810151e:	681b      	ldr	r3, [r3, #0]
 8101520:	4a1d      	ldr	r2, [pc, #116]	@ (8101598 <HAL_DMA_Abort_IT+0x1d0>)
 8101522:	4293      	cmp	r3, r2
 8101524:	d00e      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 8101526:	687b      	ldr	r3, [r7, #4]
 8101528:	681b      	ldr	r3, [r3, #0]
 810152a:	4a1c      	ldr	r2, [pc, #112]	@ (810159c <HAL_DMA_Abort_IT+0x1d4>)
 810152c:	4293      	cmp	r3, r2
 810152e:	d009      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 8101530:	687b      	ldr	r3, [r7, #4]
 8101532:	681b      	ldr	r3, [r3, #0]
 8101534:	4a1a      	ldr	r2, [pc, #104]	@ (81015a0 <HAL_DMA_Abort_IT+0x1d8>)
 8101536:	4293      	cmp	r3, r2
 8101538:	d004      	beq.n	8101544 <HAL_DMA_Abort_IT+0x17c>
 810153a:	687b      	ldr	r3, [r7, #4]
 810153c:	681b      	ldr	r3, [r3, #0]
 810153e:	4a19      	ldr	r2, [pc, #100]	@ (81015a4 <HAL_DMA_Abort_IT+0x1dc>)
 8101540:	4293      	cmp	r3, r2
 8101542:	d108      	bne.n	8101556 <HAL_DMA_Abort_IT+0x18e>
 8101544:	687b      	ldr	r3, [r7, #4]
 8101546:	681b      	ldr	r3, [r3, #0]
 8101548:	681a      	ldr	r2, [r3, #0]
 810154a:	687b      	ldr	r3, [r7, #4]
 810154c:	681b      	ldr	r3, [r3, #0]
 810154e:	f022 0201 	bic.w	r2, r2, #1
 8101552:	601a      	str	r2, [r3, #0]
 8101554:	e178      	b.n	8101848 <HAL_DMA_Abort_IT+0x480>
 8101556:	687b      	ldr	r3, [r7, #4]
 8101558:	681b      	ldr	r3, [r3, #0]
 810155a:	681a      	ldr	r2, [r3, #0]
 810155c:	687b      	ldr	r3, [r7, #4]
 810155e:	681b      	ldr	r3, [r3, #0]
 8101560:	f022 0201 	bic.w	r2, r2, #1
 8101564:	601a      	str	r2, [r3, #0]
 8101566:	e16f      	b.n	8101848 <HAL_DMA_Abort_IT+0x480>
 8101568:	40020010 	.word	0x40020010
 810156c:	40020028 	.word	0x40020028
 8101570:	40020040 	.word	0x40020040
 8101574:	40020058 	.word	0x40020058
 8101578:	40020070 	.word	0x40020070
 810157c:	40020088 	.word	0x40020088
 8101580:	400200a0 	.word	0x400200a0
 8101584:	400200b8 	.word	0x400200b8
 8101588:	40020410 	.word	0x40020410
 810158c:	40020428 	.word	0x40020428
 8101590:	40020440 	.word	0x40020440
 8101594:	40020458 	.word	0x40020458
 8101598:	40020470 	.word	0x40020470
 810159c:	40020488 	.word	0x40020488
 81015a0:	400204a0 	.word	0x400204a0
 81015a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81015a8:	687b      	ldr	r3, [r7, #4]
 81015aa:	681b      	ldr	r3, [r3, #0]
 81015ac:	681a      	ldr	r2, [r3, #0]
 81015ae:	687b      	ldr	r3, [r7, #4]
 81015b0:	681b      	ldr	r3, [r3, #0]
 81015b2:	f022 020e 	bic.w	r2, r2, #14
 81015b6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 81015b8:	687b      	ldr	r3, [r7, #4]
 81015ba:	681b      	ldr	r3, [r3, #0]
 81015bc:	4a6c      	ldr	r2, [pc, #432]	@ (8101770 <HAL_DMA_Abort_IT+0x3a8>)
 81015be:	4293      	cmp	r3, r2
 81015c0:	d04a      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 81015c2:	687b      	ldr	r3, [r7, #4]
 81015c4:	681b      	ldr	r3, [r3, #0]
 81015c6:	4a6b      	ldr	r2, [pc, #428]	@ (8101774 <HAL_DMA_Abort_IT+0x3ac>)
 81015c8:	4293      	cmp	r3, r2
 81015ca:	d045      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 81015cc:	687b      	ldr	r3, [r7, #4]
 81015ce:	681b      	ldr	r3, [r3, #0]
 81015d0:	4a69      	ldr	r2, [pc, #420]	@ (8101778 <HAL_DMA_Abort_IT+0x3b0>)
 81015d2:	4293      	cmp	r3, r2
 81015d4:	d040      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 81015d6:	687b      	ldr	r3, [r7, #4]
 81015d8:	681b      	ldr	r3, [r3, #0]
 81015da:	4a68      	ldr	r2, [pc, #416]	@ (810177c <HAL_DMA_Abort_IT+0x3b4>)
 81015dc:	4293      	cmp	r3, r2
 81015de:	d03b      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 81015e0:	687b      	ldr	r3, [r7, #4]
 81015e2:	681b      	ldr	r3, [r3, #0]
 81015e4:	4a66      	ldr	r2, [pc, #408]	@ (8101780 <HAL_DMA_Abort_IT+0x3b8>)
 81015e6:	4293      	cmp	r3, r2
 81015e8:	d036      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 81015ea:	687b      	ldr	r3, [r7, #4]
 81015ec:	681b      	ldr	r3, [r3, #0]
 81015ee:	4a65      	ldr	r2, [pc, #404]	@ (8101784 <HAL_DMA_Abort_IT+0x3bc>)
 81015f0:	4293      	cmp	r3, r2
 81015f2:	d031      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 81015f4:	687b      	ldr	r3, [r7, #4]
 81015f6:	681b      	ldr	r3, [r3, #0]
 81015f8:	4a63      	ldr	r2, [pc, #396]	@ (8101788 <HAL_DMA_Abort_IT+0x3c0>)
 81015fa:	4293      	cmp	r3, r2
 81015fc:	d02c      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 81015fe:	687b      	ldr	r3, [r7, #4]
 8101600:	681b      	ldr	r3, [r3, #0]
 8101602:	4a62      	ldr	r2, [pc, #392]	@ (810178c <HAL_DMA_Abort_IT+0x3c4>)
 8101604:	4293      	cmp	r3, r2
 8101606:	d027      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 8101608:	687b      	ldr	r3, [r7, #4]
 810160a:	681b      	ldr	r3, [r3, #0]
 810160c:	4a60      	ldr	r2, [pc, #384]	@ (8101790 <HAL_DMA_Abort_IT+0x3c8>)
 810160e:	4293      	cmp	r3, r2
 8101610:	d022      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 8101612:	687b      	ldr	r3, [r7, #4]
 8101614:	681b      	ldr	r3, [r3, #0]
 8101616:	4a5f      	ldr	r2, [pc, #380]	@ (8101794 <HAL_DMA_Abort_IT+0x3cc>)
 8101618:	4293      	cmp	r3, r2
 810161a:	d01d      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 810161c:	687b      	ldr	r3, [r7, #4]
 810161e:	681b      	ldr	r3, [r3, #0]
 8101620:	4a5d      	ldr	r2, [pc, #372]	@ (8101798 <HAL_DMA_Abort_IT+0x3d0>)
 8101622:	4293      	cmp	r3, r2
 8101624:	d018      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 8101626:	687b      	ldr	r3, [r7, #4]
 8101628:	681b      	ldr	r3, [r3, #0]
 810162a:	4a5c      	ldr	r2, [pc, #368]	@ (810179c <HAL_DMA_Abort_IT+0x3d4>)
 810162c:	4293      	cmp	r3, r2
 810162e:	d013      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 8101630:	687b      	ldr	r3, [r7, #4]
 8101632:	681b      	ldr	r3, [r3, #0]
 8101634:	4a5a      	ldr	r2, [pc, #360]	@ (81017a0 <HAL_DMA_Abort_IT+0x3d8>)
 8101636:	4293      	cmp	r3, r2
 8101638:	d00e      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 810163a:	687b      	ldr	r3, [r7, #4]
 810163c:	681b      	ldr	r3, [r3, #0]
 810163e:	4a59      	ldr	r2, [pc, #356]	@ (81017a4 <HAL_DMA_Abort_IT+0x3dc>)
 8101640:	4293      	cmp	r3, r2
 8101642:	d009      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 8101644:	687b      	ldr	r3, [r7, #4]
 8101646:	681b      	ldr	r3, [r3, #0]
 8101648:	4a57      	ldr	r2, [pc, #348]	@ (81017a8 <HAL_DMA_Abort_IT+0x3e0>)
 810164a:	4293      	cmp	r3, r2
 810164c:	d004      	beq.n	8101658 <HAL_DMA_Abort_IT+0x290>
 810164e:	687b      	ldr	r3, [r7, #4]
 8101650:	681b      	ldr	r3, [r3, #0]
 8101652:	4a56      	ldr	r2, [pc, #344]	@ (81017ac <HAL_DMA_Abort_IT+0x3e4>)
 8101654:	4293      	cmp	r3, r2
 8101656:	d108      	bne.n	810166a <HAL_DMA_Abort_IT+0x2a2>
 8101658:	687b      	ldr	r3, [r7, #4]
 810165a:	681b      	ldr	r3, [r3, #0]
 810165c:	681a      	ldr	r2, [r3, #0]
 810165e:	687b      	ldr	r3, [r7, #4]
 8101660:	681b      	ldr	r3, [r3, #0]
 8101662:	f022 0201 	bic.w	r2, r2, #1
 8101666:	601a      	str	r2, [r3, #0]
 8101668:	e007      	b.n	810167a <HAL_DMA_Abort_IT+0x2b2>
 810166a:	687b      	ldr	r3, [r7, #4]
 810166c:	681b      	ldr	r3, [r3, #0]
 810166e:	681a      	ldr	r2, [r3, #0]
 8101670:	687b      	ldr	r3, [r7, #4]
 8101672:	681b      	ldr	r3, [r3, #0]
 8101674:	f022 0201 	bic.w	r2, r2, #1
 8101678:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810167a:	687b      	ldr	r3, [r7, #4]
 810167c:	681b      	ldr	r3, [r3, #0]
 810167e:	4a3c      	ldr	r2, [pc, #240]	@ (8101770 <HAL_DMA_Abort_IT+0x3a8>)
 8101680:	4293      	cmp	r3, r2
 8101682:	d072      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 8101684:	687b      	ldr	r3, [r7, #4]
 8101686:	681b      	ldr	r3, [r3, #0]
 8101688:	4a3a      	ldr	r2, [pc, #232]	@ (8101774 <HAL_DMA_Abort_IT+0x3ac>)
 810168a:	4293      	cmp	r3, r2
 810168c:	d06d      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 810168e:	687b      	ldr	r3, [r7, #4]
 8101690:	681b      	ldr	r3, [r3, #0]
 8101692:	4a39      	ldr	r2, [pc, #228]	@ (8101778 <HAL_DMA_Abort_IT+0x3b0>)
 8101694:	4293      	cmp	r3, r2
 8101696:	d068      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 8101698:	687b      	ldr	r3, [r7, #4]
 810169a:	681b      	ldr	r3, [r3, #0]
 810169c:	4a37      	ldr	r2, [pc, #220]	@ (810177c <HAL_DMA_Abort_IT+0x3b4>)
 810169e:	4293      	cmp	r3, r2
 81016a0:	d063      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 81016a2:	687b      	ldr	r3, [r7, #4]
 81016a4:	681b      	ldr	r3, [r3, #0]
 81016a6:	4a36      	ldr	r2, [pc, #216]	@ (8101780 <HAL_DMA_Abort_IT+0x3b8>)
 81016a8:	4293      	cmp	r3, r2
 81016aa:	d05e      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 81016ac:	687b      	ldr	r3, [r7, #4]
 81016ae:	681b      	ldr	r3, [r3, #0]
 81016b0:	4a34      	ldr	r2, [pc, #208]	@ (8101784 <HAL_DMA_Abort_IT+0x3bc>)
 81016b2:	4293      	cmp	r3, r2
 81016b4:	d059      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 81016b6:	687b      	ldr	r3, [r7, #4]
 81016b8:	681b      	ldr	r3, [r3, #0]
 81016ba:	4a33      	ldr	r2, [pc, #204]	@ (8101788 <HAL_DMA_Abort_IT+0x3c0>)
 81016bc:	4293      	cmp	r3, r2
 81016be:	d054      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 81016c0:	687b      	ldr	r3, [r7, #4]
 81016c2:	681b      	ldr	r3, [r3, #0]
 81016c4:	4a31      	ldr	r2, [pc, #196]	@ (810178c <HAL_DMA_Abort_IT+0x3c4>)
 81016c6:	4293      	cmp	r3, r2
 81016c8:	d04f      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 81016ca:	687b      	ldr	r3, [r7, #4]
 81016cc:	681b      	ldr	r3, [r3, #0]
 81016ce:	4a30      	ldr	r2, [pc, #192]	@ (8101790 <HAL_DMA_Abort_IT+0x3c8>)
 81016d0:	4293      	cmp	r3, r2
 81016d2:	d04a      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 81016d4:	687b      	ldr	r3, [r7, #4]
 81016d6:	681b      	ldr	r3, [r3, #0]
 81016d8:	4a2e      	ldr	r2, [pc, #184]	@ (8101794 <HAL_DMA_Abort_IT+0x3cc>)
 81016da:	4293      	cmp	r3, r2
 81016dc:	d045      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 81016de:	687b      	ldr	r3, [r7, #4]
 81016e0:	681b      	ldr	r3, [r3, #0]
 81016e2:	4a2d      	ldr	r2, [pc, #180]	@ (8101798 <HAL_DMA_Abort_IT+0x3d0>)
 81016e4:	4293      	cmp	r3, r2
 81016e6:	d040      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 81016e8:	687b      	ldr	r3, [r7, #4]
 81016ea:	681b      	ldr	r3, [r3, #0]
 81016ec:	4a2b      	ldr	r2, [pc, #172]	@ (810179c <HAL_DMA_Abort_IT+0x3d4>)
 81016ee:	4293      	cmp	r3, r2
 81016f0:	d03b      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 81016f2:	687b      	ldr	r3, [r7, #4]
 81016f4:	681b      	ldr	r3, [r3, #0]
 81016f6:	4a2a      	ldr	r2, [pc, #168]	@ (81017a0 <HAL_DMA_Abort_IT+0x3d8>)
 81016f8:	4293      	cmp	r3, r2
 81016fa:	d036      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 81016fc:	687b      	ldr	r3, [r7, #4]
 81016fe:	681b      	ldr	r3, [r3, #0]
 8101700:	4a28      	ldr	r2, [pc, #160]	@ (81017a4 <HAL_DMA_Abort_IT+0x3dc>)
 8101702:	4293      	cmp	r3, r2
 8101704:	d031      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 8101706:	687b      	ldr	r3, [r7, #4]
 8101708:	681b      	ldr	r3, [r3, #0]
 810170a:	4a27      	ldr	r2, [pc, #156]	@ (81017a8 <HAL_DMA_Abort_IT+0x3e0>)
 810170c:	4293      	cmp	r3, r2
 810170e:	d02c      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 8101710:	687b      	ldr	r3, [r7, #4]
 8101712:	681b      	ldr	r3, [r3, #0]
 8101714:	4a25      	ldr	r2, [pc, #148]	@ (81017ac <HAL_DMA_Abort_IT+0x3e4>)
 8101716:	4293      	cmp	r3, r2
 8101718:	d027      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 810171a:	687b      	ldr	r3, [r7, #4]
 810171c:	681b      	ldr	r3, [r3, #0]
 810171e:	4a24      	ldr	r2, [pc, #144]	@ (81017b0 <HAL_DMA_Abort_IT+0x3e8>)
 8101720:	4293      	cmp	r3, r2
 8101722:	d022      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 8101724:	687b      	ldr	r3, [r7, #4]
 8101726:	681b      	ldr	r3, [r3, #0]
 8101728:	4a22      	ldr	r2, [pc, #136]	@ (81017b4 <HAL_DMA_Abort_IT+0x3ec>)
 810172a:	4293      	cmp	r3, r2
 810172c:	d01d      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 810172e:	687b      	ldr	r3, [r7, #4]
 8101730:	681b      	ldr	r3, [r3, #0]
 8101732:	4a21      	ldr	r2, [pc, #132]	@ (81017b8 <HAL_DMA_Abort_IT+0x3f0>)
 8101734:	4293      	cmp	r3, r2
 8101736:	d018      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 8101738:	687b      	ldr	r3, [r7, #4]
 810173a:	681b      	ldr	r3, [r3, #0]
 810173c:	4a1f      	ldr	r2, [pc, #124]	@ (81017bc <HAL_DMA_Abort_IT+0x3f4>)
 810173e:	4293      	cmp	r3, r2
 8101740:	d013      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 8101742:	687b      	ldr	r3, [r7, #4]
 8101744:	681b      	ldr	r3, [r3, #0]
 8101746:	4a1e      	ldr	r2, [pc, #120]	@ (81017c0 <HAL_DMA_Abort_IT+0x3f8>)
 8101748:	4293      	cmp	r3, r2
 810174a:	d00e      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 810174c:	687b      	ldr	r3, [r7, #4]
 810174e:	681b      	ldr	r3, [r3, #0]
 8101750:	4a1c      	ldr	r2, [pc, #112]	@ (81017c4 <HAL_DMA_Abort_IT+0x3fc>)
 8101752:	4293      	cmp	r3, r2
 8101754:	d009      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 8101756:	687b      	ldr	r3, [r7, #4]
 8101758:	681b      	ldr	r3, [r3, #0]
 810175a:	4a1b      	ldr	r2, [pc, #108]	@ (81017c8 <HAL_DMA_Abort_IT+0x400>)
 810175c:	4293      	cmp	r3, r2
 810175e:	d004      	beq.n	810176a <HAL_DMA_Abort_IT+0x3a2>
 8101760:	687b      	ldr	r3, [r7, #4]
 8101762:	681b      	ldr	r3, [r3, #0]
 8101764:	4a19      	ldr	r2, [pc, #100]	@ (81017cc <HAL_DMA_Abort_IT+0x404>)
 8101766:	4293      	cmp	r3, r2
 8101768:	d132      	bne.n	81017d0 <HAL_DMA_Abort_IT+0x408>
 810176a:	2301      	movs	r3, #1
 810176c:	e031      	b.n	81017d2 <HAL_DMA_Abort_IT+0x40a>
 810176e:	bf00      	nop
 8101770:	40020010 	.word	0x40020010
 8101774:	40020028 	.word	0x40020028
 8101778:	40020040 	.word	0x40020040
 810177c:	40020058 	.word	0x40020058
 8101780:	40020070 	.word	0x40020070
 8101784:	40020088 	.word	0x40020088
 8101788:	400200a0 	.word	0x400200a0
 810178c:	400200b8 	.word	0x400200b8
 8101790:	40020410 	.word	0x40020410
 8101794:	40020428 	.word	0x40020428
 8101798:	40020440 	.word	0x40020440
 810179c:	40020458 	.word	0x40020458
 81017a0:	40020470 	.word	0x40020470
 81017a4:	40020488 	.word	0x40020488
 81017a8:	400204a0 	.word	0x400204a0
 81017ac:	400204b8 	.word	0x400204b8
 81017b0:	58025408 	.word	0x58025408
 81017b4:	5802541c 	.word	0x5802541c
 81017b8:	58025430 	.word	0x58025430
 81017bc:	58025444 	.word	0x58025444
 81017c0:	58025458 	.word	0x58025458
 81017c4:	5802546c 	.word	0x5802546c
 81017c8:	58025480 	.word	0x58025480
 81017cc:	58025494 	.word	0x58025494
 81017d0:	2300      	movs	r3, #0
 81017d2:	2b00      	cmp	r3, #0
 81017d4:	d028      	beq.n	8101828 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81017d6:	687b      	ldr	r3, [r7, #4]
 81017d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81017da:	681a      	ldr	r2, [r3, #0]
 81017dc:	687b      	ldr	r3, [r7, #4]
 81017de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81017e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81017e4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81017e6:	687b      	ldr	r3, [r7, #4]
 81017e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81017ea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81017ec:	687b      	ldr	r3, [r7, #4]
 81017ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81017f0:	f003 031f 	and.w	r3, r3, #31
 81017f4:	2201      	movs	r2, #1
 81017f6:	409a      	lsls	r2, r3
 81017f8:	68fb      	ldr	r3, [r7, #12]
 81017fa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81017fc:	687b      	ldr	r3, [r7, #4]
 81017fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101800:	687a      	ldr	r2, [r7, #4]
 8101802:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8101804:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8101806:	687b      	ldr	r3, [r7, #4]
 8101808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810180a:	2b00      	cmp	r3, #0
 810180c:	d00c      	beq.n	8101828 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810180e:	687b      	ldr	r3, [r7, #4]
 8101810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101812:	681a      	ldr	r2, [r3, #0]
 8101814:	687b      	ldr	r3, [r7, #4]
 8101816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101818:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810181c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810181e:	687b      	ldr	r3, [r7, #4]
 8101820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101822:	687a      	ldr	r2, [r7, #4]
 8101824:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8101826:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8101828:	687b      	ldr	r3, [r7, #4]
 810182a:	2201      	movs	r2, #1
 810182c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8101830:	687b      	ldr	r3, [r7, #4]
 8101832:	2200      	movs	r2, #0
 8101834:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8101838:	687b      	ldr	r3, [r7, #4]
 810183a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810183c:	2b00      	cmp	r3, #0
 810183e:	d003      	beq.n	8101848 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8101840:	687b      	ldr	r3, [r7, #4]
 8101842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101844:	6878      	ldr	r0, [r7, #4]
 8101846:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8101848:	2300      	movs	r3, #0
}
 810184a:	4618      	mov	r0, r3
 810184c:	3710      	adds	r7, #16
 810184e:	46bd      	mov	sp, r7
 8101850:	bd80      	pop	{r7, pc}
 8101852:	bf00      	nop

08101854 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8101854:	b580      	push	{r7, lr}
 8101856:	b08a      	sub	sp, #40	@ 0x28
 8101858:	af00      	add	r7, sp, #0
 810185a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 810185c:	2300      	movs	r3, #0
 810185e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8101860:	4b67      	ldr	r3, [pc, #412]	@ (8101a00 <HAL_DMA_IRQHandler+0x1ac>)
 8101862:	681b      	ldr	r3, [r3, #0]
 8101864:	4a67      	ldr	r2, [pc, #412]	@ (8101a04 <HAL_DMA_IRQHandler+0x1b0>)
 8101866:	fba2 2303 	umull	r2, r3, r2, r3
 810186a:	0a9b      	lsrs	r3, r3, #10
 810186c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810186e:	687b      	ldr	r3, [r7, #4]
 8101870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101872:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8101874:	687b      	ldr	r3, [r7, #4]
 8101876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101878:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 810187a:	6a3b      	ldr	r3, [r7, #32]
 810187c:	681b      	ldr	r3, [r3, #0]
 810187e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8101880:	69fb      	ldr	r3, [r7, #28]
 8101882:	681b      	ldr	r3, [r3, #0]
 8101884:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8101886:	687b      	ldr	r3, [r7, #4]
 8101888:	681b      	ldr	r3, [r3, #0]
 810188a:	4a5f      	ldr	r2, [pc, #380]	@ (8101a08 <HAL_DMA_IRQHandler+0x1b4>)
 810188c:	4293      	cmp	r3, r2
 810188e:	d04a      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 8101890:	687b      	ldr	r3, [r7, #4]
 8101892:	681b      	ldr	r3, [r3, #0]
 8101894:	4a5d      	ldr	r2, [pc, #372]	@ (8101a0c <HAL_DMA_IRQHandler+0x1b8>)
 8101896:	4293      	cmp	r3, r2
 8101898:	d045      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 810189a:	687b      	ldr	r3, [r7, #4]
 810189c:	681b      	ldr	r3, [r3, #0]
 810189e:	4a5c      	ldr	r2, [pc, #368]	@ (8101a10 <HAL_DMA_IRQHandler+0x1bc>)
 81018a0:	4293      	cmp	r3, r2
 81018a2:	d040      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 81018a4:	687b      	ldr	r3, [r7, #4]
 81018a6:	681b      	ldr	r3, [r3, #0]
 81018a8:	4a5a      	ldr	r2, [pc, #360]	@ (8101a14 <HAL_DMA_IRQHandler+0x1c0>)
 81018aa:	4293      	cmp	r3, r2
 81018ac:	d03b      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 81018ae:	687b      	ldr	r3, [r7, #4]
 81018b0:	681b      	ldr	r3, [r3, #0]
 81018b2:	4a59      	ldr	r2, [pc, #356]	@ (8101a18 <HAL_DMA_IRQHandler+0x1c4>)
 81018b4:	4293      	cmp	r3, r2
 81018b6:	d036      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 81018b8:	687b      	ldr	r3, [r7, #4]
 81018ba:	681b      	ldr	r3, [r3, #0]
 81018bc:	4a57      	ldr	r2, [pc, #348]	@ (8101a1c <HAL_DMA_IRQHandler+0x1c8>)
 81018be:	4293      	cmp	r3, r2
 81018c0:	d031      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 81018c2:	687b      	ldr	r3, [r7, #4]
 81018c4:	681b      	ldr	r3, [r3, #0]
 81018c6:	4a56      	ldr	r2, [pc, #344]	@ (8101a20 <HAL_DMA_IRQHandler+0x1cc>)
 81018c8:	4293      	cmp	r3, r2
 81018ca:	d02c      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 81018cc:	687b      	ldr	r3, [r7, #4]
 81018ce:	681b      	ldr	r3, [r3, #0]
 81018d0:	4a54      	ldr	r2, [pc, #336]	@ (8101a24 <HAL_DMA_IRQHandler+0x1d0>)
 81018d2:	4293      	cmp	r3, r2
 81018d4:	d027      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 81018d6:	687b      	ldr	r3, [r7, #4]
 81018d8:	681b      	ldr	r3, [r3, #0]
 81018da:	4a53      	ldr	r2, [pc, #332]	@ (8101a28 <HAL_DMA_IRQHandler+0x1d4>)
 81018dc:	4293      	cmp	r3, r2
 81018de:	d022      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 81018e0:	687b      	ldr	r3, [r7, #4]
 81018e2:	681b      	ldr	r3, [r3, #0]
 81018e4:	4a51      	ldr	r2, [pc, #324]	@ (8101a2c <HAL_DMA_IRQHandler+0x1d8>)
 81018e6:	4293      	cmp	r3, r2
 81018e8:	d01d      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 81018ea:	687b      	ldr	r3, [r7, #4]
 81018ec:	681b      	ldr	r3, [r3, #0]
 81018ee:	4a50      	ldr	r2, [pc, #320]	@ (8101a30 <HAL_DMA_IRQHandler+0x1dc>)
 81018f0:	4293      	cmp	r3, r2
 81018f2:	d018      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 81018f4:	687b      	ldr	r3, [r7, #4]
 81018f6:	681b      	ldr	r3, [r3, #0]
 81018f8:	4a4e      	ldr	r2, [pc, #312]	@ (8101a34 <HAL_DMA_IRQHandler+0x1e0>)
 81018fa:	4293      	cmp	r3, r2
 81018fc:	d013      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	681b      	ldr	r3, [r3, #0]
 8101902:	4a4d      	ldr	r2, [pc, #308]	@ (8101a38 <HAL_DMA_IRQHandler+0x1e4>)
 8101904:	4293      	cmp	r3, r2
 8101906:	d00e      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 8101908:	687b      	ldr	r3, [r7, #4]
 810190a:	681b      	ldr	r3, [r3, #0]
 810190c:	4a4b      	ldr	r2, [pc, #300]	@ (8101a3c <HAL_DMA_IRQHandler+0x1e8>)
 810190e:	4293      	cmp	r3, r2
 8101910:	d009      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 8101912:	687b      	ldr	r3, [r7, #4]
 8101914:	681b      	ldr	r3, [r3, #0]
 8101916:	4a4a      	ldr	r2, [pc, #296]	@ (8101a40 <HAL_DMA_IRQHandler+0x1ec>)
 8101918:	4293      	cmp	r3, r2
 810191a:	d004      	beq.n	8101926 <HAL_DMA_IRQHandler+0xd2>
 810191c:	687b      	ldr	r3, [r7, #4]
 810191e:	681b      	ldr	r3, [r3, #0]
 8101920:	4a48      	ldr	r2, [pc, #288]	@ (8101a44 <HAL_DMA_IRQHandler+0x1f0>)
 8101922:	4293      	cmp	r3, r2
 8101924:	d101      	bne.n	810192a <HAL_DMA_IRQHandler+0xd6>
 8101926:	2301      	movs	r3, #1
 8101928:	e000      	b.n	810192c <HAL_DMA_IRQHandler+0xd8>
 810192a:	2300      	movs	r3, #0
 810192c:	2b00      	cmp	r3, #0
 810192e:	f000 842b 	beq.w	8102188 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101932:	687b      	ldr	r3, [r7, #4]
 8101934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101936:	f003 031f 	and.w	r3, r3, #31
 810193a:	2208      	movs	r2, #8
 810193c:	409a      	lsls	r2, r3
 810193e:	69bb      	ldr	r3, [r7, #24]
 8101940:	4013      	ands	r3, r2
 8101942:	2b00      	cmp	r3, #0
 8101944:	f000 80a2 	beq.w	8101a8c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8101948:	687b      	ldr	r3, [r7, #4]
 810194a:	681b      	ldr	r3, [r3, #0]
 810194c:	4a2e      	ldr	r2, [pc, #184]	@ (8101a08 <HAL_DMA_IRQHandler+0x1b4>)
 810194e:	4293      	cmp	r3, r2
 8101950:	d04a      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 8101952:	687b      	ldr	r3, [r7, #4]
 8101954:	681b      	ldr	r3, [r3, #0]
 8101956:	4a2d      	ldr	r2, [pc, #180]	@ (8101a0c <HAL_DMA_IRQHandler+0x1b8>)
 8101958:	4293      	cmp	r3, r2
 810195a:	d045      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 810195c:	687b      	ldr	r3, [r7, #4]
 810195e:	681b      	ldr	r3, [r3, #0]
 8101960:	4a2b      	ldr	r2, [pc, #172]	@ (8101a10 <HAL_DMA_IRQHandler+0x1bc>)
 8101962:	4293      	cmp	r3, r2
 8101964:	d040      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 8101966:	687b      	ldr	r3, [r7, #4]
 8101968:	681b      	ldr	r3, [r3, #0]
 810196a:	4a2a      	ldr	r2, [pc, #168]	@ (8101a14 <HAL_DMA_IRQHandler+0x1c0>)
 810196c:	4293      	cmp	r3, r2
 810196e:	d03b      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 8101970:	687b      	ldr	r3, [r7, #4]
 8101972:	681b      	ldr	r3, [r3, #0]
 8101974:	4a28      	ldr	r2, [pc, #160]	@ (8101a18 <HAL_DMA_IRQHandler+0x1c4>)
 8101976:	4293      	cmp	r3, r2
 8101978:	d036      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 810197a:	687b      	ldr	r3, [r7, #4]
 810197c:	681b      	ldr	r3, [r3, #0]
 810197e:	4a27      	ldr	r2, [pc, #156]	@ (8101a1c <HAL_DMA_IRQHandler+0x1c8>)
 8101980:	4293      	cmp	r3, r2
 8101982:	d031      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 8101984:	687b      	ldr	r3, [r7, #4]
 8101986:	681b      	ldr	r3, [r3, #0]
 8101988:	4a25      	ldr	r2, [pc, #148]	@ (8101a20 <HAL_DMA_IRQHandler+0x1cc>)
 810198a:	4293      	cmp	r3, r2
 810198c:	d02c      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 810198e:	687b      	ldr	r3, [r7, #4]
 8101990:	681b      	ldr	r3, [r3, #0]
 8101992:	4a24      	ldr	r2, [pc, #144]	@ (8101a24 <HAL_DMA_IRQHandler+0x1d0>)
 8101994:	4293      	cmp	r3, r2
 8101996:	d027      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 8101998:	687b      	ldr	r3, [r7, #4]
 810199a:	681b      	ldr	r3, [r3, #0]
 810199c:	4a22      	ldr	r2, [pc, #136]	@ (8101a28 <HAL_DMA_IRQHandler+0x1d4>)
 810199e:	4293      	cmp	r3, r2
 81019a0:	d022      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 81019a2:	687b      	ldr	r3, [r7, #4]
 81019a4:	681b      	ldr	r3, [r3, #0]
 81019a6:	4a21      	ldr	r2, [pc, #132]	@ (8101a2c <HAL_DMA_IRQHandler+0x1d8>)
 81019a8:	4293      	cmp	r3, r2
 81019aa:	d01d      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 81019ac:	687b      	ldr	r3, [r7, #4]
 81019ae:	681b      	ldr	r3, [r3, #0]
 81019b0:	4a1f      	ldr	r2, [pc, #124]	@ (8101a30 <HAL_DMA_IRQHandler+0x1dc>)
 81019b2:	4293      	cmp	r3, r2
 81019b4:	d018      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 81019b6:	687b      	ldr	r3, [r7, #4]
 81019b8:	681b      	ldr	r3, [r3, #0]
 81019ba:	4a1e      	ldr	r2, [pc, #120]	@ (8101a34 <HAL_DMA_IRQHandler+0x1e0>)
 81019bc:	4293      	cmp	r3, r2
 81019be:	d013      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 81019c0:	687b      	ldr	r3, [r7, #4]
 81019c2:	681b      	ldr	r3, [r3, #0]
 81019c4:	4a1c      	ldr	r2, [pc, #112]	@ (8101a38 <HAL_DMA_IRQHandler+0x1e4>)
 81019c6:	4293      	cmp	r3, r2
 81019c8:	d00e      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 81019ca:	687b      	ldr	r3, [r7, #4]
 81019cc:	681b      	ldr	r3, [r3, #0]
 81019ce:	4a1b      	ldr	r2, [pc, #108]	@ (8101a3c <HAL_DMA_IRQHandler+0x1e8>)
 81019d0:	4293      	cmp	r3, r2
 81019d2:	d009      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 81019d4:	687b      	ldr	r3, [r7, #4]
 81019d6:	681b      	ldr	r3, [r3, #0]
 81019d8:	4a19      	ldr	r2, [pc, #100]	@ (8101a40 <HAL_DMA_IRQHandler+0x1ec>)
 81019da:	4293      	cmp	r3, r2
 81019dc:	d004      	beq.n	81019e8 <HAL_DMA_IRQHandler+0x194>
 81019de:	687b      	ldr	r3, [r7, #4]
 81019e0:	681b      	ldr	r3, [r3, #0]
 81019e2:	4a18      	ldr	r2, [pc, #96]	@ (8101a44 <HAL_DMA_IRQHandler+0x1f0>)
 81019e4:	4293      	cmp	r3, r2
 81019e6:	d12f      	bne.n	8101a48 <HAL_DMA_IRQHandler+0x1f4>
 81019e8:	687b      	ldr	r3, [r7, #4]
 81019ea:	681b      	ldr	r3, [r3, #0]
 81019ec:	681b      	ldr	r3, [r3, #0]
 81019ee:	f003 0304 	and.w	r3, r3, #4
 81019f2:	2b00      	cmp	r3, #0
 81019f4:	bf14      	ite	ne
 81019f6:	2301      	movne	r3, #1
 81019f8:	2300      	moveq	r3, #0
 81019fa:	b2db      	uxtb	r3, r3
 81019fc:	e02e      	b.n	8101a5c <HAL_DMA_IRQHandler+0x208>
 81019fe:	bf00      	nop
 8101a00:	10000000 	.word	0x10000000
 8101a04:	1b4e81b5 	.word	0x1b4e81b5
 8101a08:	40020010 	.word	0x40020010
 8101a0c:	40020028 	.word	0x40020028
 8101a10:	40020040 	.word	0x40020040
 8101a14:	40020058 	.word	0x40020058
 8101a18:	40020070 	.word	0x40020070
 8101a1c:	40020088 	.word	0x40020088
 8101a20:	400200a0 	.word	0x400200a0
 8101a24:	400200b8 	.word	0x400200b8
 8101a28:	40020410 	.word	0x40020410
 8101a2c:	40020428 	.word	0x40020428
 8101a30:	40020440 	.word	0x40020440
 8101a34:	40020458 	.word	0x40020458
 8101a38:	40020470 	.word	0x40020470
 8101a3c:	40020488 	.word	0x40020488
 8101a40:	400204a0 	.word	0x400204a0
 8101a44:	400204b8 	.word	0x400204b8
 8101a48:	687b      	ldr	r3, [r7, #4]
 8101a4a:	681b      	ldr	r3, [r3, #0]
 8101a4c:	681b      	ldr	r3, [r3, #0]
 8101a4e:	f003 0308 	and.w	r3, r3, #8
 8101a52:	2b00      	cmp	r3, #0
 8101a54:	bf14      	ite	ne
 8101a56:	2301      	movne	r3, #1
 8101a58:	2300      	moveq	r3, #0
 8101a5a:	b2db      	uxtb	r3, r3
 8101a5c:	2b00      	cmp	r3, #0
 8101a5e:	d015      	beq.n	8101a8c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	681b      	ldr	r3, [r3, #0]
 8101a64:	681a      	ldr	r2, [r3, #0]
 8101a66:	687b      	ldr	r3, [r7, #4]
 8101a68:	681b      	ldr	r3, [r3, #0]
 8101a6a:	f022 0204 	bic.w	r2, r2, #4
 8101a6e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8101a70:	687b      	ldr	r3, [r7, #4]
 8101a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101a74:	f003 031f 	and.w	r3, r3, #31
 8101a78:	2208      	movs	r2, #8
 8101a7a:	409a      	lsls	r2, r3
 8101a7c:	6a3b      	ldr	r3, [r7, #32]
 8101a7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8101a80:	687b      	ldr	r3, [r7, #4]
 8101a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101a84:	f043 0201 	orr.w	r2, r3, #1
 8101a88:	687b      	ldr	r3, [r7, #4]
 8101a8a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101a8c:	687b      	ldr	r3, [r7, #4]
 8101a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101a90:	f003 031f 	and.w	r3, r3, #31
 8101a94:	69ba      	ldr	r2, [r7, #24]
 8101a96:	fa22 f303 	lsr.w	r3, r2, r3
 8101a9a:	f003 0301 	and.w	r3, r3, #1
 8101a9e:	2b00      	cmp	r3, #0
 8101aa0:	d06e      	beq.n	8101b80 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8101aa2:	687b      	ldr	r3, [r7, #4]
 8101aa4:	681b      	ldr	r3, [r3, #0]
 8101aa6:	4a69      	ldr	r2, [pc, #420]	@ (8101c4c <HAL_DMA_IRQHandler+0x3f8>)
 8101aa8:	4293      	cmp	r3, r2
 8101aaa:	d04a      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101aac:	687b      	ldr	r3, [r7, #4]
 8101aae:	681b      	ldr	r3, [r3, #0]
 8101ab0:	4a67      	ldr	r2, [pc, #412]	@ (8101c50 <HAL_DMA_IRQHandler+0x3fc>)
 8101ab2:	4293      	cmp	r3, r2
 8101ab4:	d045      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101ab6:	687b      	ldr	r3, [r7, #4]
 8101ab8:	681b      	ldr	r3, [r3, #0]
 8101aba:	4a66      	ldr	r2, [pc, #408]	@ (8101c54 <HAL_DMA_IRQHandler+0x400>)
 8101abc:	4293      	cmp	r3, r2
 8101abe:	d040      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101ac0:	687b      	ldr	r3, [r7, #4]
 8101ac2:	681b      	ldr	r3, [r3, #0]
 8101ac4:	4a64      	ldr	r2, [pc, #400]	@ (8101c58 <HAL_DMA_IRQHandler+0x404>)
 8101ac6:	4293      	cmp	r3, r2
 8101ac8:	d03b      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	681b      	ldr	r3, [r3, #0]
 8101ace:	4a63      	ldr	r2, [pc, #396]	@ (8101c5c <HAL_DMA_IRQHandler+0x408>)
 8101ad0:	4293      	cmp	r3, r2
 8101ad2:	d036      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101ad4:	687b      	ldr	r3, [r7, #4]
 8101ad6:	681b      	ldr	r3, [r3, #0]
 8101ad8:	4a61      	ldr	r2, [pc, #388]	@ (8101c60 <HAL_DMA_IRQHandler+0x40c>)
 8101ada:	4293      	cmp	r3, r2
 8101adc:	d031      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	681b      	ldr	r3, [r3, #0]
 8101ae2:	4a60      	ldr	r2, [pc, #384]	@ (8101c64 <HAL_DMA_IRQHandler+0x410>)
 8101ae4:	4293      	cmp	r3, r2
 8101ae6:	d02c      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101ae8:	687b      	ldr	r3, [r7, #4]
 8101aea:	681b      	ldr	r3, [r3, #0]
 8101aec:	4a5e      	ldr	r2, [pc, #376]	@ (8101c68 <HAL_DMA_IRQHandler+0x414>)
 8101aee:	4293      	cmp	r3, r2
 8101af0:	d027      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101af2:	687b      	ldr	r3, [r7, #4]
 8101af4:	681b      	ldr	r3, [r3, #0]
 8101af6:	4a5d      	ldr	r2, [pc, #372]	@ (8101c6c <HAL_DMA_IRQHandler+0x418>)
 8101af8:	4293      	cmp	r3, r2
 8101afa:	d022      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101afc:	687b      	ldr	r3, [r7, #4]
 8101afe:	681b      	ldr	r3, [r3, #0]
 8101b00:	4a5b      	ldr	r2, [pc, #364]	@ (8101c70 <HAL_DMA_IRQHandler+0x41c>)
 8101b02:	4293      	cmp	r3, r2
 8101b04:	d01d      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101b06:	687b      	ldr	r3, [r7, #4]
 8101b08:	681b      	ldr	r3, [r3, #0]
 8101b0a:	4a5a      	ldr	r2, [pc, #360]	@ (8101c74 <HAL_DMA_IRQHandler+0x420>)
 8101b0c:	4293      	cmp	r3, r2
 8101b0e:	d018      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	681b      	ldr	r3, [r3, #0]
 8101b14:	4a58      	ldr	r2, [pc, #352]	@ (8101c78 <HAL_DMA_IRQHandler+0x424>)
 8101b16:	4293      	cmp	r3, r2
 8101b18:	d013      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101b1a:	687b      	ldr	r3, [r7, #4]
 8101b1c:	681b      	ldr	r3, [r3, #0]
 8101b1e:	4a57      	ldr	r2, [pc, #348]	@ (8101c7c <HAL_DMA_IRQHandler+0x428>)
 8101b20:	4293      	cmp	r3, r2
 8101b22:	d00e      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	681b      	ldr	r3, [r3, #0]
 8101b28:	4a55      	ldr	r2, [pc, #340]	@ (8101c80 <HAL_DMA_IRQHandler+0x42c>)
 8101b2a:	4293      	cmp	r3, r2
 8101b2c:	d009      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101b2e:	687b      	ldr	r3, [r7, #4]
 8101b30:	681b      	ldr	r3, [r3, #0]
 8101b32:	4a54      	ldr	r2, [pc, #336]	@ (8101c84 <HAL_DMA_IRQHandler+0x430>)
 8101b34:	4293      	cmp	r3, r2
 8101b36:	d004      	beq.n	8101b42 <HAL_DMA_IRQHandler+0x2ee>
 8101b38:	687b      	ldr	r3, [r7, #4]
 8101b3a:	681b      	ldr	r3, [r3, #0]
 8101b3c:	4a52      	ldr	r2, [pc, #328]	@ (8101c88 <HAL_DMA_IRQHandler+0x434>)
 8101b3e:	4293      	cmp	r3, r2
 8101b40:	d10a      	bne.n	8101b58 <HAL_DMA_IRQHandler+0x304>
 8101b42:	687b      	ldr	r3, [r7, #4]
 8101b44:	681b      	ldr	r3, [r3, #0]
 8101b46:	695b      	ldr	r3, [r3, #20]
 8101b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101b4c:	2b00      	cmp	r3, #0
 8101b4e:	bf14      	ite	ne
 8101b50:	2301      	movne	r3, #1
 8101b52:	2300      	moveq	r3, #0
 8101b54:	b2db      	uxtb	r3, r3
 8101b56:	e003      	b.n	8101b60 <HAL_DMA_IRQHandler+0x30c>
 8101b58:	687b      	ldr	r3, [r7, #4]
 8101b5a:	681b      	ldr	r3, [r3, #0]
 8101b5c:	681b      	ldr	r3, [r3, #0]
 8101b5e:	2300      	movs	r3, #0
 8101b60:	2b00      	cmp	r3, #0
 8101b62:	d00d      	beq.n	8101b80 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101b68:	f003 031f 	and.w	r3, r3, #31
 8101b6c:	2201      	movs	r2, #1
 8101b6e:	409a      	lsls	r2, r3
 8101b70:	6a3b      	ldr	r3, [r7, #32]
 8101b72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8101b74:	687b      	ldr	r3, [r7, #4]
 8101b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101b78:	f043 0202 	orr.w	r2, r3, #2
 8101b7c:	687b      	ldr	r3, [r7, #4]
 8101b7e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101b80:	687b      	ldr	r3, [r7, #4]
 8101b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101b84:	f003 031f 	and.w	r3, r3, #31
 8101b88:	2204      	movs	r2, #4
 8101b8a:	409a      	lsls	r2, r3
 8101b8c:	69bb      	ldr	r3, [r7, #24]
 8101b8e:	4013      	ands	r3, r2
 8101b90:	2b00      	cmp	r3, #0
 8101b92:	f000 808f 	beq.w	8101cb4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8101b96:	687b      	ldr	r3, [r7, #4]
 8101b98:	681b      	ldr	r3, [r3, #0]
 8101b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8101c4c <HAL_DMA_IRQHandler+0x3f8>)
 8101b9c:	4293      	cmp	r3, r2
 8101b9e:	d04a      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	681b      	ldr	r3, [r3, #0]
 8101ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8101c50 <HAL_DMA_IRQHandler+0x3fc>)
 8101ba6:	4293      	cmp	r3, r2
 8101ba8:	d045      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101baa:	687b      	ldr	r3, [r7, #4]
 8101bac:	681b      	ldr	r3, [r3, #0]
 8101bae:	4a29      	ldr	r2, [pc, #164]	@ (8101c54 <HAL_DMA_IRQHandler+0x400>)
 8101bb0:	4293      	cmp	r3, r2
 8101bb2:	d040      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	681b      	ldr	r3, [r3, #0]
 8101bb8:	4a27      	ldr	r2, [pc, #156]	@ (8101c58 <HAL_DMA_IRQHandler+0x404>)
 8101bba:	4293      	cmp	r3, r2
 8101bbc:	d03b      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101bbe:	687b      	ldr	r3, [r7, #4]
 8101bc0:	681b      	ldr	r3, [r3, #0]
 8101bc2:	4a26      	ldr	r2, [pc, #152]	@ (8101c5c <HAL_DMA_IRQHandler+0x408>)
 8101bc4:	4293      	cmp	r3, r2
 8101bc6:	d036      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101bc8:	687b      	ldr	r3, [r7, #4]
 8101bca:	681b      	ldr	r3, [r3, #0]
 8101bcc:	4a24      	ldr	r2, [pc, #144]	@ (8101c60 <HAL_DMA_IRQHandler+0x40c>)
 8101bce:	4293      	cmp	r3, r2
 8101bd0:	d031      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101bd2:	687b      	ldr	r3, [r7, #4]
 8101bd4:	681b      	ldr	r3, [r3, #0]
 8101bd6:	4a23      	ldr	r2, [pc, #140]	@ (8101c64 <HAL_DMA_IRQHandler+0x410>)
 8101bd8:	4293      	cmp	r3, r2
 8101bda:	d02c      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101bdc:	687b      	ldr	r3, [r7, #4]
 8101bde:	681b      	ldr	r3, [r3, #0]
 8101be0:	4a21      	ldr	r2, [pc, #132]	@ (8101c68 <HAL_DMA_IRQHandler+0x414>)
 8101be2:	4293      	cmp	r3, r2
 8101be4:	d027      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101be6:	687b      	ldr	r3, [r7, #4]
 8101be8:	681b      	ldr	r3, [r3, #0]
 8101bea:	4a20      	ldr	r2, [pc, #128]	@ (8101c6c <HAL_DMA_IRQHandler+0x418>)
 8101bec:	4293      	cmp	r3, r2
 8101bee:	d022      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101bf0:	687b      	ldr	r3, [r7, #4]
 8101bf2:	681b      	ldr	r3, [r3, #0]
 8101bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8101c70 <HAL_DMA_IRQHandler+0x41c>)
 8101bf6:	4293      	cmp	r3, r2
 8101bf8:	d01d      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101bfa:	687b      	ldr	r3, [r7, #4]
 8101bfc:	681b      	ldr	r3, [r3, #0]
 8101bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8101c74 <HAL_DMA_IRQHandler+0x420>)
 8101c00:	4293      	cmp	r3, r2
 8101c02:	d018      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101c04:	687b      	ldr	r3, [r7, #4]
 8101c06:	681b      	ldr	r3, [r3, #0]
 8101c08:	4a1b      	ldr	r2, [pc, #108]	@ (8101c78 <HAL_DMA_IRQHandler+0x424>)
 8101c0a:	4293      	cmp	r3, r2
 8101c0c:	d013      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	681b      	ldr	r3, [r3, #0]
 8101c12:	4a1a      	ldr	r2, [pc, #104]	@ (8101c7c <HAL_DMA_IRQHandler+0x428>)
 8101c14:	4293      	cmp	r3, r2
 8101c16:	d00e      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101c18:	687b      	ldr	r3, [r7, #4]
 8101c1a:	681b      	ldr	r3, [r3, #0]
 8101c1c:	4a18      	ldr	r2, [pc, #96]	@ (8101c80 <HAL_DMA_IRQHandler+0x42c>)
 8101c1e:	4293      	cmp	r3, r2
 8101c20:	d009      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101c22:	687b      	ldr	r3, [r7, #4]
 8101c24:	681b      	ldr	r3, [r3, #0]
 8101c26:	4a17      	ldr	r2, [pc, #92]	@ (8101c84 <HAL_DMA_IRQHandler+0x430>)
 8101c28:	4293      	cmp	r3, r2
 8101c2a:	d004      	beq.n	8101c36 <HAL_DMA_IRQHandler+0x3e2>
 8101c2c:	687b      	ldr	r3, [r7, #4]
 8101c2e:	681b      	ldr	r3, [r3, #0]
 8101c30:	4a15      	ldr	r2, [pc, #84]	@ (8101c88 <HAL_DMA_IRQHandler+0x434>)
 8101c32:	4293      	cmp	r3, r2
 8101c34:	d12a      	bne.n	8101c8c <HAL_DMA_IRQHandler+0x438>
 8101c36:	687b      	ldr	r3, [r7, #4]
 8101c38:	681b      	ldr	r3, [r3, #0]
 8101c3a:	681b      	ldr	r3, [r3, #0]
 8101c3c:	f003 0302 	and.w	r3, r3, #2
 8101c40:	2b00      	cmp	r3, #0
 8101c42:	bf14      	ite	ne
 8101c44:	2301      	movne	r3, #1
 8101c46:	2300      	moveq	r3, #0
 8101c48:	b2db      	uxtb	r3, r3
 8101c4a:	e023      	b.n	8101c94 <HAL_DMA_IRQHandler+0x440>
 8101c4c:	40020010 	.word	0x40020010
 8101c50:	40020028 	.word	0x40020028
 8101c54:	40020040 	.word	0x40020040
 8101c58:	40020058 	.word	0x40020058
 8101c5c:	40020070 	.word	0x40020070
 8101c60:	40020088 	.word	0x40020088
 8101c64:	400200a0 	.word	0x400200a0
 8101c68:	400200b8 	.word	0x400200b8
 8101c6c:	40020410 	.word	0x40020410
 8101c70:	40020428 	.word	0x40020428
 8101c74:	40020440 	.word	0x40020440
 8101c78:	40020458 	.word	0x40020458
 8101c7c:	40020470 	.word	0x40020470
 8101c80:	40020488 	.word	0x40020488
 8101c84:	400204a0 	.word	0x400204a0
 8101c88:	400204b8 	.word	0x400204b8
 8101c8c:	687b      	ldr	r3, [r7, #4]
 8101c8e:	681b      	ldr	r3, [r3, #0]
 8101c90:	681b      	ldr	r3, [r3, #0]
 8101c92:	2300      	movs	r3, #0
 8101c94:	2b00      	cmp	r3, #0
 8101c96:	d00d      	beq.n	8101cb4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8101c98:	687b      	ldr	r3, [r7, #4]
 8101c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101c9c:	f003 031f 	and.w	r3, r3, #31
 8101ca0:	2204      	movs	r2, #4
 8101ca2:	409a      	lsls	r2, r3
 8101ca4:	6a3b      	ldr	r3, [r7, #32]
 8101ca6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8101ca8:	687b      	ldr	r3, [r7, #4]
 8101caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101cac:	f043 0204 	orr.w	r2, r3, #4
 8101cb0:	687b      	ldr	r3, [r7, #4]
 8101cb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101cb8:	f003 031f 	and.w	r3, r3, #31
 8101cbc:	2210      	movs	r2, #16
 8101cbe:	409a      	lsls	r2, r3
 8101cc0:	69bb      	ldr	r3, [r7, #24]
 8101cc2:	4013      	ands	r3, r2
 8101cc4:	2b00      	cmp	r3, #0
 8101cc6:	f000 80a6 	beq.w	8101e16 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8101cca:	687b      	ldr	r3, [r7, #4]
 8101ccc:	681b      	ldr	r3, [r3, #0]
 8101cce:	4a85      	ldr	r2, [pc, #532]	@ (8101ee4 <HAL_DMA_IRQHandler+0x690>)
 8101cd0:	4293      	cmp	r3, r2
 8101cd2:	d04a      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101cd4:	687b      	ldr	r3, [r7, #4]
 8101cd6:	681b      	ldr	r3, [r3, #0]
 8101cd8:	4a83      	ldr	r2, [pc, #524]	@ (8101ee8 <HAL_DMA_IRQHandler+0x694>)
 8101cda:	4293      	cmp	r3, r2
 8101cdc:	d045      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101cde:	687b      	ldr	r3, [r7, #4]
 8101ce0:	681b      	ldr	r3, [r3, #0]
 8101ce2:	4a82      	ldr	r2, [pc, #520]	@ (8101eec <HAL_DMA_IRQHandler+0x698>)
 8101ce4:	4293      	cmp	r3, r2
 8101ce6:	d040      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101ce8:	687b      	ldr	r3, [r7, #4]
 8101cea:	681b      	ldr	r3, [r3, #0]
 8101cec:	4a80      	ldr	r2, [pc, #512]	@ (8101ef0 <HAL_DMA_IRQHandler+0x69c>)
 8101cee:	4293      	cmp	r3, r2
 8101cf0:	d03b      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101cf2:	687b      	ldr	r3, [r7, #4]
 8101cf4:	681b      	ldr	r3, [r3, #0]
 8101cf6:	4a7f      	ldr	r2, [pc, #508]	@ (8101ef4 <HAL_DMA_IRQHandler+0x6a0>)
 8101cf8:	4293      	cmp	r3, r2
 8101cfa:	d036      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101cfc:	687b      	ldr	r3, [r7, #4]
 8101cfe:	681b      	ldr	r3, [r3, #0]
 8101d00:	4a7d      	ldr	r2, [pc, #500]	@ (8101ef8 <HAL_DMA_IRQHandler+0x6a4>)
 8101d02:	4293      	cmp	r3, r2
 8101d04:	d031      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101d06:	687b      	ldr	r3, [r7, #4]
 8101d08:	681b      	ldr	r3, [r3, #0]
 8101d0a:	4a7c      	ldr	r2, [pc, #496]	@ (8101efc <HAL_DMA_IRQHandler+0x6a8>)
 8101d0c:	4293      	cmp	r3, r2
 8101d0e:	d02c      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101d10:	687b      	ldr	r3, [r7, #4]
 8101d12:	681b      	ldr	r3, [r3, #0]
 8101d14:	4a7a      	ldr	r2, [pc, #488]	@ (8101f00 <HAL_DMA_IRQHandler+0x6ac>)
 8101d16:	4293      	cmp	r3, r2
 8101d18:	d027      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101d1a:	687b      	ldr	r3, [r7, #4]
 8101d1c:	681b      	ldr	r3, [r3, #0]
 8101d1e:	4a79      	ldr	r2, [pc, #484]	@ (8101f04 <HAL_DMA_IRQHandler+0x6b0>)
 8101d20:	4293      	cmp	r3, r2
 8101d22:	d022      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101d24:	687b      	ldr	r3, [r7, #4]
 8101d26:	681b      	ldr	r3, [r3, #0]
 8101d28:	4a77      	ldr	r2, [pc, #476]	@ (8101f08 <HAL_DMA_IRQHandler+0x6b4>)
 8101d2a:	4293      	cmp	r3, r2
 8101d2c:	d01d      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101d2e:	687b      	ldr	r3, [r7, #4]
 8101d30:	681b      	ldr	r3, [r3, #0]
 8101d32:	4a76      	ldr	r2, [pc, #472]	@ (8101f0c <HAL_DMA_IRQHandler+0x6b8>)
 8101d34:	4293      	cmp	r3, r2
 8101d36:	d018      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101d38:	687b      	ldr	r3, [r7, #4]
 8101d3a:	681b      	ldr	r3, [r3, #0]
 8101d3c:	4a74      	ldr	r2, [pc, #464]	@ (8101f10 <HAL_DMA_IRQHandler+0x6bc>)
 8101d3e:	4293      	cmp	r3, r2
 8101d40:	d013      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101d42:	687b      	ldr	r3, [r7, #4]
 8101d44:	681b      	ldr	r3, [r3, #0]
 8101d46:	4a73      	ldr	r2, [pc, #460]	@ (8101f14 <HAL_DMA_IRQHandler+0x6c0>)
 8101d48:	4293      	cmp	r3, r2
 8101d4a:	d00e      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101d4c:	687b      	ldr	r3, [r7, #4]
 8101d4e:	681b      	ldr	r3, [r3, #0]
 8101d50:	4a71      	ldr	r2, [pc, #452]	@ (8101f18 <HAL_DMA_IRQHandler+0x6c4>)
 8101d52:	4293      	cmp	r3, r2
 8101d54:	d009      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	681b      	ldr	r3, [r3, #0]
 8101d5a:	4a70      	ldr	r2, [pc, #448]	@ (8101f1c <HAL_DMA_IRQHandler+0x6c8>)
 8101d5c:	4293      	cmp	r3, r2
 8101d5e:	d004      	beq.n	8101d6a <HAL_DMA_IRQHandler+0x516>
 8101d60:	687b      	ldr	r3, [r7, #4]
 8101d62:	681b      	ldr	r3, [r3, #0]
 8101d64:	4a6e      	ldr	r2, [pc, #440]	@ (8101f20 <HAL_DMA_IRQHandler+0x6cc>)
 8101d66:	4293      	cmp	r3, r2
 8101d68:	d10a      	bne.n	8101d80 <HAL_DMA_IRQHandler+0x52c>
 8101d6a:	687b      	ldr	r3, [r7, #4]
 8101d6c:	681b      	ldr	r3, [r3, #0]
 8101d6e:	681b      	ldr	r3, [r3, #0]
 8101d70:	f003 0308 	and.w	r3, r3, #8
 8101d74:	2b00      	cmp	r3, #0
 8101d76:	bf14      	ite	ne
 8101d78:	2301      	movne	r3, #1
 8101d7a:	2300      	moveq	r3, #0
 8101d7c:	b2db      	uxtb	r3, r3
 8101d7e:	e009      	b.n	8101d94 <HAL_DMA_IRQHandler+0x540>
 8101d80:	687b      	ldr	r3, [r7, #4]
 8101d82:	681b      	ldr	r3, [r3, #0]
 8101d84:	681b      	ldr	r3, [r3, #0]
 8101d86:	f003 0304 	and.w	r3, r3, #4
 8101d8a:	2b00      	cmp	r3, #0
 8101d8c:	bf14      	ite	ne
 8101d8e:	2301      	movne	r3, #1
 8101d90:	2300      	moveq	r3, #0
 8101d92:	b2db      	uxtb	r3, r3
 8101d94:	2b00      	cmp	r3, #0
 8101d96:	d03e      	beq.n	8101e16 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8101d98:	687b      	ldr	r3, [r7, #4]
 8101d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101d9c:	f003 031f 	and.w	r3, r3, #31
 8101da0:	2210      	movs	r2, #16
 8101da2:	409a      	lsls	r2, r3
 8101da4:	6a3b      	ldr	r3, [r7, #32]
 8101da6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8101da8:	687b      	ldr	r3, [r7, #4]
 8101daa:	681b      	ldr	r3, [r3, #0]
 8101dac:	681b      	ldr	r3, [r3, #0]
 8101dae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8101db2:	2b00      	cmp	r3, #0
 8101db4:	d018      	beq.n	8101de8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8101db6:	687b      	ldr	r3, [r7, #4]
 8101db8:	681b      	ldr	r3, [r3, #0]
 8101dba:	681b      	ldr	r3, [r3, #0]
 8101dbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8101dc0:	2b00      	cmp	r3, #0
 8101dc2:	d108      	bne.n	8101dd6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8101dc4:	687b      	ldr	r3, [r7, #4]
 8101dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101dc8:	2b00      	cmp	r3, #0
 8101dca:	d024      	beq.n	8101e16 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8101dcc:	687b      	ldr	r3, [r7, #4]
 8101dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101dd0:	6878      	ldr	r0, [r7, #4]
 8101dd2:	4798      	blx	r3
 8101dd4:	e01f      	b.n	8101e16 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8101dd6:	687b      	ldr	r3, [r7, #4]
 8101dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101dda:	2b00      	cmp	r3, #0
 8101ddc:	d01b      	beq.n	8101e16 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101de2:	6878      	ldr	r0, [r7, #4]
 8101de4:	4798      	blx	r3
 8101de6:	e016      	b.n	8101e16 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8101de8:	687b      	ldr	r3, [r7, #4]
 8101dea:	681b      	ldr	r3, [r3, #0]
 8101dec:	681b      	ldr	r3, [r3, #0]
 8101dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101df2:	2b00      	cmp	r3, #0
 8101df4:	d107      	bne.n	8101e06 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	681b      	ldr	r3, [r3, #0]
 8101dfa:	681a      	ldr	r2, [r3, #0]
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	681b      	ldr	r3, [r3, #0]
 8101e00:	f022 0208 	bic.w	r2, r2, #8
 8101e04:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8101e06:	687b      	ldr	r3, [r7, #4]
 8101e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101e0a:	2b00      	cmp	r3, #0
 8101e0c:	d003      	beq.n	8101e16 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8101e0e:	687b      	ldr	r3, [r7, #4]
 8101e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101e12:	6878      	ldr	r0, [r7, #4]
 8101e14:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8101e16:	687b      	ldr	r3, [r7, #4]
 8101e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101e1a:	f003 031f 	and.w	r3, r3, #31
 8101e1e:	2220      	movs	r2, #32
 8101e20:	409a      	lsls	r2, r3
 8101e22:	69bb      	ldr	r3, [r7, #24]
 8101e24:	4013      	ands	r3, r2
 8101e26:	2b00      	cmp	r3, #0
 8101e28:	f000 8110 	beq.w	810204c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8101e2c:	687b      	ldr	r3, [r7, #4]
 8101e2e:	681b      	ldr	r3, [r3, #0]
 8101e30:	4a2c      	ldr	r2, [pc, #176]	@ (8101ee4 <HAL_DMA_IRQHandler+0x690>)
 8101e32:	4293      	cmp	r3, r2
 8101e34:	d04a      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101e36:	687b      	ldr	r3, [r7, #4]
 8101e38:	681b      	ldr	r3, [r3, #0]
 8101e3a:	4a2b      	ldr	r2, [pc, #172]	@ (8101ee8 <HAL_DMA_IRQHandler+0x694>)
 8101e3c:	4293      	cmp	r3, r2
 8101e3e:	d045      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101e40:	687b      	ldr	r3, [r7, #4]
 8101e42:	681b      	ldr	r3, [r3, #0]
 8101e44:	4a29      	ldr	r2, [pc, #164]	@ (8101eec <HAL_DMA_IRQHandler+0x698>)
 8101e46:	4293      	cmp	r3, r2
 8101e48:	d040      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	681b      	ldr	r3, [r3, #0]
 8101e4e:	4a28      	ldr	r2, [pc, #160]	@ (8101ef0 <HAL_DMA_IRQHandler+0x69c>)
 8101e50:	4293      	cmp	r3, r2
 8101e52:	d03b      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101e54:	687b      	ldr	r3, [r7, #4]
 8101e56:	681b      	ldr	r3, [r3, #0]
 8101e58:	4a26      	ldr	r2, [pc, #152]	@ (8101ef4 <HAL_DMA_IRQHandler+0x6a0>)
 8101e5a:	4293      	cmp	r3, r2
 8101e5c:	d036      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101e5e:	687b      	ldr	r3, [r7, #4]
 8101e60:	681b      	ldr	r3, [r3, #0]
 8101e62:	4a25      	ldr	r2, [pc, #148]	@ (8101ef8 <HAL_DMA_IRQHandler+0x6a4>)
 8101e64:	4293      	cmp	r3, r2
 8101e66:	d031      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101e68:	687b      	ldr	r3, [r7, #4]
 8101e6a:	681b      	ldr	r3, [r3, #0]
 8101e6c:	4a23      	ldr	r2, [pc, #140]	@ (8101efc <HAL_DMA_IRQHandler+0x6a8>)
 8101e6e:	4293      	cmp	r3, r2
 8101e70:	d02c      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101e72:	687b      	ldr	r3, [r7, #4]
 8101e74:	681b      	ldr	r3, [r3, #0]
 8101e76:	4a22      	ldr	r2, [pc, #136]	@ (8101f00 <HAL_DMA_IRQHandler+0x6ac>)
 8101e78:	4293      	cmp	r3, r2
 8101e7a:	d027      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101e7c:	687b      	ldr	r3, [r7, #4]
 8101e7e:	681b      	ldr	r3, [r3, #0]
 8101e80:	4a20      	ldr	r2, [pc, #128]	@ (8101f04 <HAL_DMA_IRQHandler+0x6b0>)
 8101e82:	4293      	cmp	r3, r2
 8101e84:	d022      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101e86:	687b      	ldr	r3, [r7, #4]
 8101e88:	681b      	ldr	r3, [r3, #0]
 8101e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8101f08 <HAL_DMA_IRQHandler+0x6b4>)
 8101e8c:	4293      	cmp	r3, r2
 8101e8e:	d01d      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101e90:	687b      	ldr	r3, [r7, #4]
 8101e92:	681b      	ldr	r3, [r3, #0]
 8101e94:	4a1d      	ldr	r2, [pc, #116]	@ (8101f0c <HAL_DMA_IRQHandler+0x6b8>)
 8101e96:	4293      	cmp	r3, r2
 8101e98:	d018      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101e9a:	687b      	ldr	r3, [r7, #4]
 8101e9c:	681b      	ldr	r3, [r3, #0]
 8101e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8101f10 <HAL_DMA_IRQHandler+0x6bc>)
 8101ea0:	4293      	cmp	r3, r2
 8101ea2:	d013      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101ea4:	687b      	ldr	r3, [r7, #4]
 8101ea6:	681b      	ldr	r3, [r3, #0]
 8101ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8101f14 <HAL_DMA_IRQHandler+0x6c0>)
 8101eaa:	4293      	cmp	r3, r2
 8101eac:	d00e      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101eae:	687b      	ldr	r3, [r7, #4]
 8101eb0:	681b      	ldr	r3, [r3, #0]
 8101eb2:	4a19      	ldr	r2, [pc, #100]	@ (8101f18 <HAL_DMA_IRQHandler+0x6c4>)
 8101eb4:	4293      	cmp	r3, r2
 8101eb6:	d009      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101eb8:	687b      	ldr	r3, [r7, #4]
 8101eba:	681b      	ldr	r3, [r3, #0]
 8101ebc:	4a17      	ldr	r2, [pc, #92]	@ (8101f1c <HAL_DMA_IRQHandler+0x6c8>)
 8101ebe:	4293      	cmp	r3, r2
 8101ec0:	d004      	beq.n	8101ecc <HAL_DMA_IRQHandler+0x678>
 8101ec2:	687b      	ldr	r3, [r7, #4]
 8101ec4:	681b      	ldr	r3, [r3, #0]
 8101ec6:	4a16      	ldr	r2, [pc, #88]	@ (8101f20 <HAL_DMA_IRQHandler+0x6cc>)
 8101ec8:	4293      	cmp	r3, r2
 8101eca:	d12b      	bne.n	8101f24 <HAL_DMA_IRQHandler+0x6d0>
 8101ecc:	687b      	ldr	r3, [r7, #4]
 8101ece:	681b      	ldr	r3, [r3, #0]
 8101ed0:	681b      	ldr	r3, [r3, #0]
 8101ed2:	f003 0310 	and.w	r3, r3, #16
 8101ed6:	2b00      	cmp	r3, #0
 8101ed8:	bf14      	ite	ne
 8101eda:	2301      	movne	r3, #1
 8101edc:	2300      	moveq	r3, #0
 8101ede:	b2db      	uxtb	r3, r3
 8101ee0:	e02a      	b.n	8101f38 <HAL_DMA_IRQHandler+0x6e4>
 8101ee2:	bf00      	nop
 8101ee4:	40020010 	.word	0x40020010
 8101ee8:	40020028 	.word	0x40020028
 8101eec:	40020040 	.word	0x40020040
 8101ef0:	40020058 	.word	0x40020058
 8101ef4:	40020070 	.word	0x40020070
 8101ef8:	40020088 	.word	0x40020088
 8101efc:	400200a0 	.word	0x400200a0
 8101f00:	400200b8 	.word	0x400200b8
 8101f04:	40020410 	.word	0x40020410
 8101f08:	40020428 	.word	0x40020428
 8101f0c:	40020440 	.word	0x40020440
 8101f10:	40020458 	.word	0x40020458
 8101f14:	40020470 	.word	0x40020470
 8101f18:	40020488 	.word	0x40020488
 8101f1c:	400204a0 	.word	0x400204a0
 8101f20:	400204b8 	.word	0x400204b8
 8101f24:	687b      	ldr	r3, [r7, #4]
 8101f26:	681b      	ldr	r3, [r3, #0]
 8101f28:	681b      	ldr	r3, [r3, #0]
 8101f2a:	f003 0302 	and.w	r3, r3, #2
 8101f2e:	2b00      	cmp	r3, #0
 8101f30:	bf14      	ite	ne
 8101f32:	2301      	movne	r3, #1
 8101f34:	2300      	moveq	r3, #0
 8101f36:	b2db      	uxtb	r3, r3
 8101f38:	2b00      	cmp	r3, #0
 8101f3a:	f000 8087 	beq.w	810204c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8101f3e:	687b      	ldr	r3, [r7, #4]
 8101f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101f42:	f003 031f 	and.w	r3, r3, #31
 8101f46:	2220      	movs	r2, #32
 8101f48:	409a      	lsls	r2, r3
 8101f4a:	6a3b      	ldr	r3, [r7, #32]
 8101f4c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8101f54:	b2db      	uxtb	r3, r3
 8101f56:	2b04      	cmp	r3, #4
 8101f58:	d139      	bne.n	8101fce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	681b      	ldr	r3, [r3, #0]
 8101f5e:	681a      	ldr	r2, [r3, #0]
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	f022 0216 	bic.w	r2, r2, #22
 8101f68:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8101f6a:	687b      	ldr	r3, [r7, #4]
 8101f6c:	681b      	ldr	r3, [r3, #0]
 8101f6e:	695a      	ldr	r2, [r3, #20]
 8101f70:	687b      	ldr	r3, [r7, #4]
 8101f72:	681b      	ldr	r3, [r3, #0]
 8101f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8101f78:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8101f7a:	687b      	ldr	r3, [r7, #4]
 8101f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8101f7e:	2b00      	cmp	r3, #0
 8101f80:	d103      	bne.n	8101f8a <HAL_DMA_IRQHandler+0x736>
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101f86:	2b00      	cmp	r3, #0
 8101f88:	d007      	beq.n	8101f9a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	681a      	ldr	r2, [r3, #0]
 8101f90:	687b      	ldr	r3, [r7, #4]
 8101f92:	681b      	ldr	r3, [r3, #0]
 8101f94:	f022 0208 	bic.w	r2, r2, #8
 8101f98:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101f9e:	f003 031f 	and.w	r3, r3, #31
 8101fa2:	223f      	movs	r2, #63	@ 0x3f
 8101fa4:	409a      	lsls	r2, r3
 8101fa6:	6a3b      	ldr	r3, [r7, #32]
 8101fa8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	2201      	movs	r2, #1
 8101fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	2200      	movs	r2, #0
 8101fb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8101fba:	687b      	ldr	r3, [r7, #4]
 8101fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101fbe:	2b00      	cmp	r3, #0
 8101fc0:	f000 834a 	beq.w	8102658 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101fc8:	6878      	ldr	r0, [r7, #4]
 8101fca:	4798      	blx	r3
          }
          return;
 8101fcc:	e344      	b.n	8102658 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	681b      	ldr	r3, [r3, #0]
 8101fd2:	681b      	ldr	r3, [r3, #0]
 8101fd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8101fd8:	2b00      	cmp	r3, #0
 8101fda:	d018      	beq.n	810200e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8101fdc:	687b      	ldr	r3, [r7, #4]
 8101fde:	681b      	ldr	r3, [r3, #0]
 8101fe0:	681b      	ldr	r3, [r3, #0]
 8101fe2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8101fe6:	2b00      	cmp	r3, #0
 8101fe8:	d108      	bne.n	8101ffc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8101fee:	2b00      	cmp	r3, #0
 8101ff0:	d02c      	beq.n	810204c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8101ff2:	687b      	ldr	r3, [r7, #4]
 8101ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8101ff6:	6878      	ldr	r0, [r7, #4]
 8101ff8:	4798      	blx	r3
 8101ffa:	e027      	b.n	810204c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8101ffc:	687b      	ldr	r3, [r7, #4]
 8101ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102000:	2b00      	cmp	r3, #0
 8102002:	d023      	beq.n	810204c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8102004:	687b      	ldr	r3, [r7, #4]
 8102006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102008:	6878      	ldr	r0, [r7, #4]
 810200a:	4798      	blx	r3
 810200c:	e01e      	b.n	810204c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	681b      	ldr	r3, [r3, #0]
 8102012:	681b      	ldr	r3, [r3, #0]
 8102014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102018:	2b00      	cmp	r3, #0
 810201a:	d10f      	bne.n	810203c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	681b      	ldr	r3, [r3, #0]
 8102020:	681a      	ldr	r2, [r3, #0]
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	681b      	ldr	r3, [r3, #0]
 8102026:	f022 0210 	bic.w	r2, r2, #16
 810202a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 810202c:	687b      	ldr	r3, [r7, #4]
 810202e:	2201      	movs	r2, #1
 8102030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	2200      	movs	r2, #0
 8102038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 810203c:	687b      	ldr	r3, [r7, #4]
 810203e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102040:	2b00      	cmp	r3, #0
 8102042:	d003      	beq.n	810204c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102048:	6878      	ldr	r0, [r7, #4]
 810204a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102050:	2b00      	cmp	r3, #0
 8102052:	f000 8306 	beq.w	8102662 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810205a:	f003 0301 	and.w	r3, r3, #1
 810205e:	2b00      	cmp	r3, #0
 8102060:	f000 8088 	beq.w	8102174 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8102064:	687b      	ldr	r3, [r7, #4]
 8102066:	2204      	movs	r2, #4
 8102068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	681b      	ldr	r3, [r3, #0]
 8102070:	4a7a      	ldr	r2, [pc, #488]	@ (810225c <HAL_DMA_IRQHandler+0xa08>)
 8102072:	4293      	cmp	r3, r2
 8102074:	d04a      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	4a79      	ldr	r2, [pc, #484]	@ (8102260 <HAL_DMA_IRQHandler+0xa0c>)
 810207c:	4293      	cmp	r3, r2
 810207e:	d045      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 8102080:	687b      	ldr	r3, [r7, #4]
 8102082:	681b      	ldr	r3, [r3, #0]
 8102084:	4a77      	ldr	r2, [pc, #476]	@ (8102264 <HAL_DMA_IRQHandler+0xa10>)
 8102086:	4293      	cmp	r3, r2
 8102088:	d040      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 810208a:	687b      	ldr	r3, [r7, #4]
 810208c:	681b      	ldr	r3, [r3, #0]
 810208e:	4a76      	ldr	r2, [pc, #472]	@ (8102268 <HAL_DMA_IRQHandler+0xa14>)
 8102090:	4293      	cmp	r3, r2
 8102092:	d03b      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	681b      	ldr	r3, [r3, #0]
 8102098:	4a74      	ldr	r2, [pc, #464]	@ (810226c <HAL_DMA_IRQHandler+0xa18>)
 810209a:	4293      	cmp	r3, r2
 810209c:	d036      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	681b      	ldr	r3, [r3, #0]
 81020a2:	4a73      	ldr	r2, [pc, #460]	@ (8102270 <HAL_DMA_IRQHandler+0xa1c>)
 81020a4:	4293      	cmp	r3, r2
 81020a6:	d031      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 81020a8:	687b      	ldr	r3, [r7, #4]
 81020aa:	681b      	ldr	r3, [r3, #0]
 81020ac:	4a71      	ldr	r2, [pc, #452]	@ (8102274 <HAL_DMA_IRQHandler+0xa20>)
 81020ae:	4293      	cmp	r3, r2
 81020b0:	d02c      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	681b      	ldr	r3, [r3, #0]
 81020b6:	4a70      	ldr	r2, [pc, #448]	@ (8102278 <HAL_DMA_IRQHandler+0xa24>)
 81020b8:	4293      	cmp	r3, r2
 81020ba:	d027      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 81020bc:	687b      	ldr	r3, [r7, #4]
 81020be:	681b      	ldr	r3, [r3, #0]
 81020c0:	4a6e      	ldr	r2, [pc, #440]	@ (810227c <HAL_DMA_IRQHandler+0xa28>)
 81020c2:	4293      	cmp	r3, r2
 81020c4:	d022      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 81020c6:	687b      	ldr	r3, [r7, #4]
 81020c8:	681b      	ldr	r3, [r3, #0]
 81020ca:	4a6d      	ldr	r2, [pc, #436]	@ (8102280 <HAL_DMA_IRQHandler+0xa2c>)
 81020cc:	4293      	cmp	r3, r2
 81020ce:	d01d      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 81020d0:	687b      	ldr	r3, [r7, #4]
 81020d2:	681b      	ldr	r3, [r3, #0]
 81020d4:	4a6b      	ldr	r2, [pc, #428]	@ (8102284 <HAL_DMA_IRQHandler+0xa30>)
 81020d6:	4293      	cmp	r3, r2
 81020d8:	d018      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 81020da:	687b      	ldr	r3, [r7, #4]
 81020dc:	681b      	ldr	r3, [r3, #0]
 81020de:	4a6a      	ldr	r2, [pc, #424]	@ (8102288 <HAL_DMA_IRQHandler+0xa34>)
 81020e0:	4293      	cmp	r3, r2
 81020e2:	d013      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 81020e4:	687b      	ldr	r3, [r7, #4]
 81020e6:	681b      	ldr	r3, [r3, #0]
 81020e8:	4a68      	ldr	r2, [pc, #416]	@ (810228c <HAL_DMA_IRQHandler+0xa38>)
 81020ea:	4293      	cmp	r3, r2
 81020ec:	d00e      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	681b      	ldr	r3, [r3, #0]
 81020f2:	4a67      	ldr	r2, [pc, #412]	@ (8102290 <HAL_DMA_IRQHandler+0xa3c>)
 81020f4:	4293      	cmp	r3, r2
 81020f6:	d009      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	681b      	ldr	r3, [r3, #0]
 81020fc:	4a65      	ldr	r2, [pc, #404]	@ (8102294 <HAL_DMA_IRQHandler+0xa40>)
 81020fe:	4293      	cmp	r3, r2
 8102100:	d004      	beq.n	810210c <HAL_DMA_IRQHandler+0x8b8>
 8102102:	687b      	ldr	r3, [r7, #4]
 8102104:	681b      	ldr	r3, [r3, #0]
 8102106:	4a64      	ldr	r2, [pc, #400]	@ (8102298 <HAL_DMA_IRQHandler+0xa44>)
 8102108:	4293      	cmp	r3, r2
 810210a:	d108      	bne.n	810211e <HAL_DMA_IRQHandler+0x8ca>
 810210c:	687b      	ldr	r3, [r7, #4]
 810210e:	681b      	ldr	r3, [r3, #0]
 8102110:	681a      	ldr	r2, [r3, #0]
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	681b      	ldr	r3, [r3, #0]
 8102116:	f022 0201 	bic.w	r2, r2, #1
 810211a:	601a      	str	r2, [r3, #0]
 810211c:	e007      	b.n	810212e <HAL_DMA_IRQHandler+0x8da>
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	681b      	ldr	r3, [r3, #0]
 8102122:	681a      	ldr	r2, [r3, #0]
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	681b      	ldr	r3, [r3, #0]
 8102128:	f022 0201 	bic.w	r2, r2, #1
 810212c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810212e:	68fb      	ldr	r3, [r7, #12]
 8102130:	3301      	adds	r3, #1
 8102132:	60fb      	str	r3, [r7, #12]
 8102134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102136:	429a      	cmp	r2, r3
 8102138:	d307      	bcc.n	810214a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810213a:	687b      	ldr	r3, [r7, #4]
 810213c:	681b      	ldr	r3, [r3, #0]
 810213e:	681b      	ldr	r3, [r3, #0]
 8102140:	f003 0301 	and.w	r3, r3, #1
 8102144:	2b00      	cmp	r3, #0
 8102146:	d1f2      	bne.n	810212e <HAL_DMA_IRQHandler+0x8da>
 8102148:	e000      	b.n	810214c <HAL_DMA_IRQHandler+0x8f8>
            break;
 810214a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810214c:	687b      	ldr	r3, [r7, #4]
 810214e:	681b      	ldr	r3, [r3, #0]
 8102150:	681b      	ldr	r3, [r3, #0]
 8102152:	f003 0301 	and.w	r3, r3, #1
 8102156:	2b00      	cmp	r3, #0
 8102158:	d004      	beq.n	8102164 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810215a:	687b      	ldr	r3, [r7, #4]
 810215c:	2203      	movs	r2, #3
 810215e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8102162:	e003      	b.n	810216c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8102164:	687b      	ldr	r3, [r7, #4]
 8102166:	2201      	movs	r2, #1
 8102168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	2200      	movs	r2, #0
 8102170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102178:	2b00      	cmp	r3, #0
 810217a:	f000 8272 	beq.w	8102662 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810217e:	687b      	ldr	r3, [r7, #4]
 8102180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102182:	6878      	ldr	r0, [r7, #4]
 8102184:	4798      	blx	r3
 8102186:	e26c      	b.n	8102662 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8102188:	687b      	ldr	r3, [r7, #4]
 810218a:	681b      	ldr	r3, [r3, #0]
 810218c:	4a43      	ldr	r2, [pc, #268]	@ (810229c <HAL_DMA_IRQHandler+0xa48>)
 810218e:	4293      	cmp	r3, r2
 8102190:	d022      	beq.n	81021d8 <HAL_DMA_IRQHandler+0x984>
 8102192:	687b      	ldr	r3, [r7, #4]
 8102194:	681b      	ldr	r3, [r3, #0]
 8102196:	4a42      	ldr	r2, [pc, #264]	@ (81022a0 <HAL_DMA_IRQHandler+0xa4c>)
 8102198:	4293      	cmp	r3, r2
 810219a:	d01d      	beq.n	81021d8 <HAL_DMA_IRQHandler+0x984>
 810219c:	687b      	ldr	r3, [r7, #4]
 810219e:	681b      	ldr	r3, [r3, #0]
 81021a0:	4a40      	ldr	r2, [pc, #256]	@ (81022a4 <HAL_DMA_IRQHandler+0xa50>)
 81021a2:	4293      	cmp	r3, r2
 81021a4:	d018      	beq.n	81021d8 <HAL_DMA_IRQHandler+0x984>
 81021a6:	687b      	ldr	r3, [r7, #4]
 81021a8:	681b      	ldr	r3, [r3, #0]
 81021aa:	4a3f      	ldr	r2, [pc, #252]	@ (81022a8 <HAL_DMA_IRQHandler+0xa54>)
 81021ac:	4293      	cmp	r3, r2
 81021ae:	d013      	beq.n	81021d8 <HAL_DMA_IRQHandler+0x984>
 81021b0:	687b      	ldr	r3, [r7, #4]
 81021b2:	681b      	ldr	r3, [r3, #0]
 81021b4:	4a3d      	ldr	r2, [pc, #244]	@ (81022ac <HAL_DMA_IRQHandler+0xa58>)
 81021b6:	4293      	cmp	r3, r2
 81021b8:	d00e      	beq.n	81021d8 <HAL_DMA_IRQHandler+0x984>
 81021ba:	687b      	ldr	r3, [r7, #4]
 81021bc:	681b      	ldr	r3, [r3, #0]
 81021be:	4a3c      	ldr	r2, [pc, #240]	@ (81022b0 <HAL_DMA_IRQHandler+0xa5c>)
 81021c0:	4293      	cmp	r3, r2
 81021c2:	d009      	beq.n	81021d8 <HAL_DMA_IRQHandler+0x984>
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	681b      	ldr	r3, [r3, #0]
 81021c8:	4a3a      	ldr	r2, [pc, #232]	@ (81022b4 <HAL_DMA_IRQHandler+0xa60>)
 81021ca:	4293      	cmp	r3, r2
 81021cc:	d004      	beq.n	81021d8 <HAL_DMA_IRQHandler+0x984>
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	681b      	ldr	r3, [r3, #0]
 81021d2:	4a39      	ldr	r2, [pc, #228]	@ (81022b8 <HAL_DMA_IRQHandler+0xa64>)
 81021d4:	4293      	cmp	r3, r2
 81021d6:	d101      	bne.n	81021dc <HAL_DMA_IRQHandler+0x988>
 81021d8:	2301      	movs	r3, #1
 81021da:	e000      	b.n	81021de <HAL_DMA_IRQHandler+0x98a>
 81021dc:	2300      	movs	r3, #0
 81021de:	2b00      	cmp	r3, #0
 81021e0:	f000 823f 	beq.w	8102662 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81021e4:	687b      	ldr	r3, [r7, #4]
 81021e6:	681b      	ldr	r3, [r3, #0]
 81021e8:	681b      	ldr	r3, [r3, #0]
 81021ea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81021ec:	687b      	ldr	r3, [r7, #4]
 81021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81021f0:	f003 031f 	and.w	r3, r3, #31
 81021f4:	2204      	movs	r2, #4
 81021f6:	409a      	lsls	r2, r3
 81021f8:	697b      	ldr	r3, [r7, #20]
 81021fa:	4013      	ands	r3, r2
 81021fc:	2b00      	cmp	r3, #0
 81021fe:	f000 80cd 	beq.w	810239c <HAL_DMA_IRQHandler+0xb48>
 8102202:	693b      	ldr	r3, [r7, #16]
 8102204:	f003 0304 	and.w	r3, r3, #4
 8102208:	2b00      	cmp	r3, #0
 810220a:	f000 80c7 	beq.w	810239c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102212:	f003 031f 	and.w	r3, r3, #31
 8102216:	2204      	movs	r2, #4
 8102218:	409a      	lsls	r2, r3
 810221a:	69fb      	ldr	r3, [r7, #28]
 810221c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810221e:	693b      	ldr	r3, [r7, #16]
 8102220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102224:	2b00      	cmp	r3, #0
 8102226:	d049      	beq.n	81022bc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8102228:	693b      	ldr	r3, [r7, #16]
 810222a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810222e:	2b00      	cmp	r3, #0
 8102230:	d109      	bne.n	8102246 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102236:	2b00      	cmp	r3, #0
 8102238:	f000 8210 	beq.w	810265c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102240:	6878      	ldr	r0, [r7, #4]
 8102242:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102244:	e20a      	b.n	810265c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8102246:	687b      	ldr	r3, [r7, #4]
 8102248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810224a:	2b00      	cmp	r3, #0
 810224c:	f000 8206 	beq.w	810265c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102254:	6878      	ldr	r0, [r7, #4]
 8102256:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102258:	e200      	b.n	810265c <HAL_DMA_IRQHandler+0xe08>
 810225a:	bf00      	nop
 810225c:	40020010 	.word	0x40020010
 8102260:	40020028 	.word	0x40020028
 8102264:	40020040 	.word	0x40020040
 8102268:	40020058 	.word	0x40020058
 810226c:	40020070 	.word	0x40020070
 8102270:	40020088 	.word	0x40020088
 8102274:	400200a0 	.word	0x400200a0
 8102278:	400200b8 	.word	0x400200b8
 810227c:	40020410 	.word	0x40020410
 8102280:	40020428 	.word	0x40020428
 8102284:	40020440 	.word	0x40020440
 8102288:	40020458 	.word	0x40020458
 810228c:	40020470 	.word	0x40020470
 8102290:	40020488 	.word	0x40020488
 8102294:	400204a0 	.word	0x400204a0
 8102298:	400204b8 	.word	0x400204b8
 810229c:	58025408 	.word	0x58025408
 81022a0:	5802541c 	.word	0x5802541c
 81022a4:	58025430 	.word	0x58025430
 81022a8:	58025444 	.word	0x58025444
 81022ac:	58025458 	.word	0x58025458
 81022b0:	5802546c 	.word	0x5802546c
 81022b4:	58025480 	.word	0x58025480
 81022b8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81022bc:	693b      	ldr	r3, [r7, #16]
 81022be:	f003 0320 	and.w	r3, r3, #32
 81022c2:	2b00      	cmp	r3, #0
 81022c4:	d160      	bne.n	8102388 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	4a7f      	ldr	r2, [pc, #508]	@ (81024c8 <HAL_DMA_IRQHandler+0xc74>)
 81022cc:	4293      	cmp	r3, r2
 81022ce:	d04a      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 81022d0:	687b      	ldr	r3, [r7, #4]
 81022d2:	681b      	ldr	r3, [r3, #0]
 81022d4:	4a7d      	ldr	r2, [pc, #500]	@ (81024cc <HAL_DMA_IRQHandler+0xc78>)
 81022d6:	4293      	cmp	r3, r2
 81022d8:	d045      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 81022da:	687b      	ldr	r3, [r7, #4]
 81022dc:	681b      	ldr	r3, [r3, #0]
 81022de:	4a7c      	ldr	r2, [pc, #496]	@ (81024d0 <HAL_DMA_IRQHandler+0xc7c>)
 81022e0:	4293      	cmp	r3, r2
 81022e2:	d040      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 81022e4:	687b      	ldr	r3, [r7, #4]
 81022e6:	681b      	ldr	r3, [r3, #0]
 81022e8:	4a7a      	ldr	r2, [pc, #488]	@ (81024d4 <HAL_DMA_IRQHandler+0xc80>)
 81022ea:	4293      	cmp	r3, r2
 81022ec:	d03b      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 81022ee:	687b      	ldr	r3, [r7, #4]
 81022f0:	681b      	ldr	r3, [r3, #0]
 81022f2:	4a79      	ldr	r2, [pc, #484]	@ (81024d8 <HAL_DMA_IRQHandler+0xc84>)
 81022f4:	4293      	cmp	r3, r2
 81022f6:	d036      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 81022f8:	687b      	ldr	r3, [r7, #4]
 81022fa:	681b      	ldr	r3, [r3, #0]
 81022fc:	4a77      	ldr	r2, [pc, #476]	@ (81024dc <HAL_DMA_IRQHandler+0xc88>)
 81022fe:	4293      	cmp	r3, r2
 8102300:	d031      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 8102302:	687b      	ldr	r3, [r7, #4]
 8102304:	681b      	ldr	r3, [r3, #0]
 8102306:	4a76      	ldr	r2, [pc, #472]	@ (81024e0 <HAL_DMA_IRQHandler+0xc8c>)
 8102308:	4293      	cmp	r3, r2
 810230a:	d02c      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 810230c:	687b      	ldr	r3, [r7, #4]
 810230e:	681b      	ldr	r3, [r3, #0]
 8102310:	4a74      	ldr	r2, [pc, #464]	@ (81024e4 <HAL_DMA_IRQHandler+0xc90>)
 8102312:	4293      	cmp	r3, r2
 8102314:	d027      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 8102316:	687b      	ldr	r3, [r7, #4]
 8102318:	681b      	ldr	r3, [r3, #0]
 810231a:	4a73      	ldr	r2, [pc, #460]	@ (81024e8 <HAL_DMA_IRQHandler+0xc94>)
 810231c:	4293      	cmp	r3, r2
 810231e:	d022      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	681b      	ldr	r3, [r3, #0]
 8102324:	4a71      	ldr	r2, [pc, #452]	@ (81024ec <HAL_DMA_IRQHandler+0xc98>)
 8102326:	4293      	cmp	r3, r2
 8102328:	d01d      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 810232a:	687b      	ldr	r3, [r7, #4]
 810232c:	681b      	ldr	r3, [r3, #0]
 810232e:	4a70      	ldr	r2, [pc, #448]	@ (81024f0 <HAL_DMA_IRQHandler+0xc9c>)
 8102330:	4293      	cmp	r3, r2
 8102332:	d018      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 8102334:	687b      	ldr	r3, [r7, #4]
 8102336:	681b      	ldr	r3, [r3, #0]
 8102338:	4a6e      	ldr	r2, [pc, #440]	@ (81024f4 <HAL_DMA_IRQHandler+0xca0>)
 810233a:	4293      	cmp	r3, r2
 810233c:	d013      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	681b      	ldr	r3, [r3, #0]
 8102342:	4a6d      	ldr	r2, [pc, #436]	@ (81024f8 <HAL_DMA_IRQHandler+0xca4>)
 8102344:	4293      	cmp	r3, r2
 8102346:	d00e      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 8102348:	687b      	ldr	r3, [r7, #4]
 810234a:	681b      	ldr	r3, [r3, #0]
 810234c:	4a6b      	ldr	r2, [pc, #428]	@ (81024fc <HAL_DMA_IRQHandler+0xca8>)
 810234e:	4293      	cmp	r3, r2
 8102350:	d009      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	681b      	ldr	r3, [r3, #0]
 8102356:	4a6a      	ldr	r2, [pc, #424]	@ (8102500 <HAL_DMA_IRQHandler+0xcac>)
 8102358:	4293      	cmp	r3, r2
 810235a:	d004      	beq.n	8102366 <HAL_DMA_IRQHandler+0xb12>
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	681b      	ldr	r3, [r3, #0]
 8102360:	4a68      	ldr	r2, [pc, #416]	@ (8102504 <HAL_DMA_IRQHandler+0xcb0>)
 8102362:	4293      	cmp	r3, r2
 8102364:	d108      	bne.n	8102378 <HAL_DMA_IRQHandler+0xb24>
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	681b      	ldr	r3, [r3, #0]
 810236a:	681a      	ldr	r2, [r3, #0]
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	681b      	ldr	r3, [r3, #0]
 8102370:	f022 0208 	bic.w	r2, r2, #8
 8102374:	601a      	str	r2, [r3, #0]
 8102376:	e007      	b.n	8102388 <HAL_DMA_IRQHandler+0xb34>
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	681b      	ldr	r3, [r3, #0]
 810237c:	681a      	ldr	r2, [r3, #0]
 810237e:	687b      	ldr	r3, [r7, #4]
 8102380:	681b      	ldr	r3, [r3, #0]
 8102382:	f022 0204 	bic.w	r2, r2, #4
 8102386:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810238c:	2b00      	cmp	r3, #0
 810238e:	f000 8165 	beq.w	810265c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8102392:	687b      	ldr	r3, [r7, #4]
 8102394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102396:	6878      	ldr	r0, [r7, #4]
 8102398:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810239a:	e15f      	b.n	810265c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 810239c:	687b      	ldr	r3, [r7, #4]
 810239e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81023a0:	f003 031f 	and.w	r3, r3, #31
 81023a4:	2202      	movs	r2, #2
 81023a6:	409a      	lsls	r2, r3
 81023a8:	697b      	ldr	r3, [r7, #20]
 81023aa:	4013      	ands	r3, r2
 81023ac:	2b00      	cmp	r3, #0
 81023ae:	f000 80c5 	beq.w	810253c <HAL_DMA_IRQHandler+0xce8>
 81023b2:	693b      	ldr	r3, [r7, #16]
 81023b4:	f003 0302 	and.w	r3, r3, #2
 81023b8:	2b00      	cmp	r3, #0
 81023ba:	f000 80bf 	beq.w	810253c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81023c2:	f003 031f 	and.w	r3, r3, #31
 81023c6:	2202      	movs	r2, #2
 81023c8:	409a      	lsls	r2, r3
 81023ca:	69fb      	ldr	r3, [r7, #28]
 81023cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81023ce:	693b      	ldr	r3, [r7, #16]
 81023d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81023d4:	2b00      	cmp	r3, #0
 81023d6:	d018      	beq.n	810240a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81023d8:	693b      	ldr	r3, [r7, #16]
 81023da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81023de:	2b00      	cmp	r3, #0
 81023e0:	d109      	bne.n	81023f6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81023e2:	687b      	ldr	r3, [r7, #4]
 81023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81023e6:	2b00      	cmp	r3, #0
 81023e8:	f000 813a 	beq.w	8102660 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81023f0:	6878      	ldr	r0, [r7, #4]
 81023f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81023f4:	e134      	b.n	8102660 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81023f6:	687b      	ldr	r3, [r7, #4]
 81023f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81023fa:	2b00      	cmp	r3, #0
 81023fc:	f000 8130 	beq.w	8102660 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8102400:	687b      	ldr	r3, [r7, #4]
 8102402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102404:	6878      	ldr	r0, [r7, #4]
 8102406:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102408:	e12a      	b.n	8102660 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810240a:	693b      	ldr	r3, [r7, #16]
 810240c:	f003 0320 	and.w	r3, r3, #32
 8102410:	2b00      	cmp	r3, #0
 8102412:	f040 8089 	bne.w	8102528 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	681b      	ldr	r3, [r3, #0]
 810241a:	4a2b      	ldr	r2, [pc, #172]	@ (81024c8 <HAL_DMA_IRQHandler+0xc74>)
 810241c:	4293      	cmp	r3, r2
 810241e:	d04a      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 8102420:	687b      	ldr	r3, [r7, #4]
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	4a29      	ldr	r2, [pc, #164]	@ (81024cc <HAL_DMA_IRQHandler+0xc78>)
 8102426:	4293      	cmp	r3, r2
 8102428:	d045      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	681b      	ldr	r3, [r3, #0]
 810242e:	4a28      	ldr	r2, [pc, #160]	@ (81024d0 <HAL_DMA_IRQHandler+0xc7c>)
 8102430:	4293      	cmp	r3, r2
 8102432:	d040      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	4a26      	ldr	r2, [pc, #152]	@ (81024d4 <HAL_DMA_IRQHandler+0xc80>)
 810243a:	4293      	cmp	r3, r2
 810243c:	d03b      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 810243e:	687b      	ldr	r3, [r7, #4]
 8102440:	681b      	ldr	r3, [r3, #0]
 8102442:	4a25      	ldr	r2, [pc, #148]	@ (81024d8 <HAL_DMA_IRQHandler+0xc84>)
 8102444:	4293      	cmp	r3, r2
 8102446:	d036      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	4a23      	ldr	r2, [pc, #140]	@ (81024dc <HAL_DMA_IRQHandler+0xc88>)
 810244e:	4293      	cmp	r3, r2
 8102450:	d031      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	681b      	ldr	r3, [r3, #0]
 8102456:	4a22      	ldr	r2, [pc, #136]	@ (81024e0 <HAL_DMA_IRQHandler+0xc8c>)
 8102458:	4293      	cmp	r3, r2
 810245a:	d02c      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	681b      	ldr	r3, [r3, #0]
 8102460:	4a20      	ldr	r2, [pc, #128]	@ (81024e4 <HAL_DMA_IRQHandler+0xc90>)
 8102462:	4293      	cmp	r3, r2
 8102464:	d027      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	681b      	ldr	r3, [r3, #0]
 810246a:	4a1f      	ldr	r2, [pc, #124]	@ (81024e8 <HAL_DMA_IRQHandler+0xc94>)
 810246c:	4293      	cmp	r3, r2
 810246e:	d022      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 8102470:	687b      	ldr	r3, [r7, #4]
 8102472:	681b      	ldr	r3, [r3, #0]
 8102474:	4a1d      	ldr	r2, [pc, #116]	@ (81024ec <HAL_DMA_IRQHandler+0xc98>)
 8102476:	4293      	cmp	r3, r2
 8102478:	d01d      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	681b      	ldr	r3, [r3, #0]
 810247e:	4a1c      	ldr	r2, [pc, #112]	@ (81024f0 <HAL_DMA_IRQHandler+0xc9c>)
 8102480:	4293      	cmp	r3, r2
 8102482:	d018      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	681b      	ldr	r3, [r3, #0]
 8102488:	4a1a      	ldr	r2, [pc, #104]	@ (81024f4 <HAL_DMA_IRQHandler+0xca0>)
 810248a:	4293      	cmp	r3, r2
 810248c:	d013      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	681b      	ldr	r3, [r3, #0]
 8102492:	4a19      	ldr	r2, [pc, #100]	@ (81024f8 <HAL_DMA_IRQHandler+0xca4>)
 8102494:	4293      	cmp	r3, r2
 8102496:	d00e      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	681b      	ldr	r3, [r3, #0]
 810249c:	4a17      	ldr	r2, [pc, #92]	@ (81024fc <HAL_DMA_IRQHandler+0xca8>)
 810249e:	4293      	cmp	r3, r2
 81024a0:	d009      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	681b      	ldr	r3, [r3, #0]
 81024a6:	4a16      	ldr	r2, [pc, #88]	@ (8102500 <HAL_DMA_IRQHandler+0xcac>)
 81024a8:	4293      	cmp	r3, r2
 81024aa:	d004      	beq.n	81024b6 <HAL_DMA_IRQHandler+0xc62>
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	681b      	ldr	r3, [r3, #0]
 81024b0:	4a14      	ldr	r2, [pc, #80]	@ (8102504 <HAL_DMA_IRQHandler+0xcb0>)
 81024b2:	4293      	cmp	r3, r2
 81024b4:	d128      	bne.n	8102508 <HAL_DMA_IRQHandler+0xcb4>
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	681a      	ldr	r2, [r3, #0]
 81024bc:	687b      	ldr	r3, [r7, #4]
 81024be:	681b      	ldr	r3, [r3, #0]
 81024c0:	f022 0214 	bic.w	r2, r2, #20
 81024c4:	601a      	str	r2, [r3, #0]
 81024c6:	e027      	b.n	8102518 <HAL_DMA_IRQHandler+0xcc4>
 81024c8:	40020010 	.word	0x40020010
 81024cc:	40020028 	.word	0x40020028
 81024d0:	40020040 	.word	0x40020040
 81024d4:	40020058 	.word	0x40020058
 81024d8:	40020070 	.word	0x40020070
 81024dc:	40020088 	.word	0x40020088
 81024e0:	400200a0 	.word	0x400200a0
 81024e4:	400200b8 	.word	0x400200b8
 81024e8:	40020410 	.word	0x40020410
 81024ec:	40020428 	.word	0x40020428
 81024f0:	40020440 	.word	0x40020440
 81024f4:	40020458 	.word	0x40020458
 81024f8:	40020470 	.word	0x40020470
 81024fc:	40020488 	.word	0x40020488
 8102500:	400204a0 	.word	0x400204a0
 8102504:	400204b8 	.word	0x400204b8
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	681b      	ldr	r3, [r3, #0]
 810250c:	681a      	ldr	r2, [r3, #0]
 810250e:	687b      	ldr	r3, [r7, #4]
 8102510:	681b      	ldr	r3, [r3, #0]
 8102512:	f022 020a 	bic.w	r2, r2, #10
 8102516:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	2201      	movs	r2, #1
 810251c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	2200      	movs	r2, #0
 8102524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810252c:	2b00      	cmp	r3, #0
 810252e:	f000 8097 	beq.w	8102660 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8102532:	687b      	ldr	r3, [r7, #4]
 8102534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102536:	6878      	ldr	r0, [r7, #4]
 8102538:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810253a:	e091      	b.n	8102660 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 810253c:	687b      	ldr	r3, [r7, #4]
 810253e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102540:	f003 031f 	and.w	r3, r3, #31
 8102544:	2208      	movs	r2, #8
 8102546:	409a      	lsls	r2, r3
 8102548:	697b      	ldr	r3, [r7, #20]
 810254a:	4013      	ands	r3, r2
 810254c:	2b00      	cmp	r3, #0
 810254e:	f000 8088 	beq.w	8102662 <HAL_DMA_IRQHandler+0xe0e>
 8102552:	693b      	ldr	r3, [r7, #16]
 8102554:	f003 0308 	and.w	r3, r3, #8
 8102558:	2b00      	cmp	r3, #0
 810255a:	f000 8082 	beq.w	8102662 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	681b      	ldr	r3, [r3, #0]
 8102562:	4a41      	ldr	r2, [pc, #260]	@ (8102668 <HAL_DMA_IRQHandler+0xe14>)
 8102564:	4293      	cmp	r3, r2
 8102566:	d04a      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	681b      	ldr	r3, [r3, #0]
 810256c:	4a3f      	ldr	r2, [pc, #252]	@ (810266c <HAL_DMA_IRQHandler+0xe18>)
 810256e:	4293      	cmp	r3, r2
 8102570:	d045      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	681b      	ldr	r3, [r3, #0]
 8102576:	4a3e      	ldr	r2, [pc, #248]	@ (8102670 <HAL_DMA_IRQHandler+0xe1c>)
 8102578:	4293      	cmp	r3, r2
 810257a:	d040      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	681b      	ldr	r3, [r3, #0]
 8102580:	4a3c      	ldr	r2, [pc, #240]	@ (8102674 <HAL_DMA_IRQHandler+0xe20>)
 8102582:	4293      	cmp	r3, r2
 8102584:	d03b      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 8102586:	687b      	ldr	r3, [r7, #4]
 8102588:	681b      	ldr	r3, [r3, #0]
 810258a:	4a3b      	ldr	r2, [pc, #236]	@ (8102678 <HAL_DMA_IRQHandler+0xe24>)
 810258c:	4293      	cmp	r3, r2
 810258e:	d036      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	681b      	ldr	r3, [r3, #0]
 8102594:	4a39      	ldr	r2, [pc, #228]	@ (810267c <HAL_DMA_IRQHandler+0xe28>)
 8102596:	4293      	cmp	r3, r2
 8102598:	d031      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 810259a:	687b      	ldr	r3, [r7, #4]
 810259c:	681b      	ldr	r3, [r3, #0]
 810259e:	4a38      	ldr	r2, [pc, #224]	@ (8102680 <HAL_DMA_IRQHandler+0xe2c>)
 81025a0:	4293      	cmp	r3, r2
 81025a2:	d02c      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	681b      	ldr	r3, [r3, #0]
 81025a8:	4a36      	ldr	r2, [pc, #216]	@ (8102684 <HAL_DMA_IRQHandler+0xe30>)
 81025aa:	4293      	cmp	r3, r2
 81025ac:	d027      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	681b      	ldr	r3, [r3, #0]
 81025b2:	4a35      	ldr	r2, [pc, #212]	@ (8102688 <HAL_DMA_IRQHandler+0xe34>)
 81025b4:	4293      	cmp	r3, r2
 81025b6:	d022      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	681b      	ldr	r3, [r3, #0]
 81025bc:	4a33      	ldr	r2, [pc, #204]	@ (810268c <HAL_DMA_IRQHandler+0xe38>)
 81025be:	4293      	cmp	r3, r2
 81025c0:	d01d      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	681b      	ldr	r3, [r3, #0]
 81025c6:	4a32      	ldr	r2, [pc, #200]	@ (8102690 <HAL_DMA_IRQHandler+0xe3c>)
 81025c8:	4293      	cmp	r3, r2
 81025ca:	d018      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 81025cc:	687b      	ldr	r3, [r7, #4]
 81025ce:	681b      	ldr	r3, [r3, #0]
 81025d0:	4a30      	ldr	r2, [pc, #192]	@ (8102694 <HAL_DMA_IRQHandler+0xe40>)
 81025d2:	4293      	cmp	r3, r2
 81025d4:	d013      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 81025d6:	687b      	ldr	r3, [r7, #4]
 81025d8:	681b      	ldr	r3, [r3, #0]
 81025da:	4a2f      	ldr	r2, [pc, #188]	@ (8102698 <HAL_DMA_IRQHandler+0xe44>)
 81025dc:	4293      	cmp	r3, r2
 81025de:	d00e      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	681b      	ldr	r3, [r3, #0]
 81025e4:	4a2d      	ldr	r2, [pc, #180]	@ (810269c <HAL_DMA_IRQHandler+0xe48>)
 81025e6:	4293      	cmp	r3, r2
 81025e8:	d009      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	681b      	ldr	r3, [r3, #0]
 81025ee:	4a2c      	ldr	r2, [pc, #176]	@ (81026a0 <HAL_DMA_IRQHandler+0xe4c>)
 81025f0:	4293      	cmp	r3, r2
 81025f2:	d004      	beq.n	81025fe <HAL_DMA_IRQHandler+0xdaa>
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	681b      	ldr	r3, [r3, #0]
 81025f8:	4a2a      	ldr	r2, [pc, #168]	@ (81026a4 <HAL_DMA_IRQHandler+0xe50>)
 81025fa:	4293      	cmp	r3, r2
 81025fc:	d108      	bne.n	8102610 <HAL_DMA_IRQHandler+0xdbc>
 81025fe:	687b      	ldr	r3, [r7, #4]
 8102600:	681b      	ldr	r3, [r3, #0]
 8102602:	681a      	ldr	r2, [r3, #0]
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	681b      	ldr	r3, [r3, #0]
 8102608:	f022 021c 	bic.w	r2, r2, #28
 810260c:	601a      	str	r2, [r3, #0]
 810260e:	e007      	b.n	8102620 <HAL_DMA_IRQHandler+0xdcc>
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	681b      	ldr	r3, [r3, #0]
 8102614:	681a      	ldr	r2, [r3, #0]
 8102616:	687b      	ldr	r3, [r7, #4]
 8102618:	681b      	ldr	r3, [r3, #0]
 810261a:	f022 020e 	bic.w	r2, r2, #14
 810261e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8102620:	687b      	ldr	r3, [r7, #4]
 8102622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102624:	f003 031f 	and.w	r3, r3, #31
 8102628:	2201      	movs	r2, #1
 810262a:	409a      	lsls	r2, r3
 810262c:	69fb      	ldr	r3, [r7, #28]
 810262e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8102630:	687b      	ldr	r3, [r7, #4]
 8102632:	2201      	movs	r2, #1
 8102634:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	2201      	movs	r2, #1
 810263a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810263e:	687b      	ldr	r3, [r7, #4]
 8102640:	2200      	movs	r2, #0
 8102642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810264a:	2b00      	cmp	r3, #0
 810264c:	d009      	beq.n	8102662 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810264e:	687b      	ldr	r3, [r7, #4]
 8102650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102652:	6878      	ldr	r0, [r7, #4]
 8102654:	4798      	blx	r3
 8102656:	e004      	b.n	8102662 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8102658:	bf00      	nop
 810265a:	e002      	b.n	8102662 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810265c:	bf00      	nop
 810265e:	e000      	b.n	8102662 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102660:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8102662:	3728      	adds	r7, #40	@ 0x28
 8102664:	46bd      	mov	sp, r7
 8102666:	bd80      	pop	{r7, pc}
 8102668:	40020010 	.word	0x40020010
 810266c:	40020028 	.word	0x40020028
 8102670:	40020040 	.word	0x40020040
 8102674:	40020058 	.word	0x40020058
 8102678:	40020070 	.word	0x40020070
 810267c:	40020088 	.word	0x40020088
 8102680:	400200a0 	.word	0x400200a0
 8102684:	400200b8 	.word	0x400200b8
 8102688:	40020410 	.word	0x40020410
 810268c:	40020428 	.word	0x40020428
 8102690:	40020440 	.word	0x40020440
 8102694:	40020458 	.word	0x40020458
 8102698:	40020470 	.word	0x40020470
 810269c:	40020488 	.word	0x40020488
 81026a0:	400204a0 	.word	0x400204a0
 81026a4:	400204b8 	.word	0x400204b8

081026a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81026a8:	b480      	push	{r7}
 81026aa:	b085      	sub	sp, #20
 81026ac:	af00      	add	r7, sp, #0
 81026ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	4a43      	ldr	r2, [pc, #268]	@ (81027c4 <DMA_CalcBaseAndBitshift+0x11c>)
 81026b6:	4293      	cmp	r3, r2
 81026b8:	d04a      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 81026ba:	687b      	ldr	r3, [r7, #4]
 81026bc:	681b      	ldr	r3, [r3, #0]
 81026be:	4a42      	ldr	r2, [pc, #264]	@ (81027c8 <DMA_CalcBaseAndBitshift+0x120>)
 81026c0:	4293      	cmp	r3, r2
 81026c2:	d045      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	681b      	ldr	r3, [r3, #0]
 81026c8:	4a40      	ldr	r2, [pc, #256]	@ (81027cc <DMA_CalcBaseAndBitshift+0x124>)
 81026ca:	4293      	cmp	r3, r2
 81026cc:	d040      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	681b      	ldr	r3, [r3, #0]
 81026d2:	4a3f      	ldr	r2, [pc, #252]	@ (81027d0 <DMA_CalcBaseAndBitshift+0x128>)
 81026d4:	4293      	cmp	r3, r2
 81026d6:	d03b      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 81026d8:	687b      	ldr	r3, [r7, #4]
 81026da:	681b      	ldr	r3, [r3, #0]
 81026dc:	4a3d      	ldr	r2, [pc, #244]	@ (81027d4 <DMA_CalcBaseAndBitshift+0x12c>)
 81026de:	4293      	cmp	r3, r2
 81026e0:	d036      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 81026e2:	687b      	ldr	r3, [r7, #4]
 81026e4:	681b      	ldr	r3, [r3, #0]
 81026e6:	4a3c      	ldr	r2, [pc, #240]	@ (81027d8 <DMA_CalcBaseAndBitshift+0x130>)
 81026e8:	4293      	cmp	r3, r2
 81026ea:	d031      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 81026ec:	687b      	ldr	r3, [r7, #4]
 81026ee:	681b      	ldr	r3, [r3, #0]
 81026f0:	4a3a      	ldr	r2, [pc, #232]	@ (81027dc <DMA_CalcBaseAndBitshift+0x134>)
 81026f2:	4293      	cmp	r3, r2
 81026f4:	d02c      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 81026f6:	687b      	ldr	r3, [r7, #4]
 81026f8:	681b      	ldr	r3, [r3, #0]
 81026fa:	4a39      	ldr	r2, [pc, #228]	@ (81027e0 <DMA_CalcBaseAndBitshift+0x138>)
 81026fc:	4293      	cmp	r3, r2
 81026fe:	d027      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 8102700:	687b      	ldr	r3, [r7, #4]
 8102702:	681b      	ldr	r3, [r3, #0]
 8102704:	4a37      	ldr	r2, [pc, #220]	@ (81027e4 <DMA_CalcBaseAndBitshift+0x13c>)
 8102706:	4293      	cmp	r3, r2
 8102708:	d022      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 810270a:	687b      	ldr	r3, [r7, #4]
 810270c:	681b      	ldr	r3, [r3, #0]
 810270e:	4a36      	ldr	r2, [pc, #216]	@ (81027e8 <DMA_CalcBaseAndBitshift+0x140>)
 8102710:	4293      	cmp	r3, r2
 8102712:	d01d      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	681b      	ldr	r3, [r3, #0]
 8102718:	4a34      	ldr	r2, [pc, #208]	@ (81027ec <DMA_CalcBaseAndBitshift+0x144>)
 810271a:	4293      	cmp	r3, r2
 810271c:	d018      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 810271e:	687b      	ldr	r3, [r7, #4]
 8102720:	681b      	ldr	r3, [r3, #0]
 8102722:	4a33      	ldr	r2, [pc, #204]	@ (81027f0 <DMA_CalcBaseAndBitshift+0x148>)
 8102724:	4293      	cmp	r3, r2
 8102726:	d013      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 8102728:	687b      	ldr	r3, [r7, #4]
 810272a:	681b      	ldr	r3, [r3, #0]
 810272c:	4a31      	ldr	r2, [pc, #196]	@ (81027f4 <DMA_CalcBaseAndBitshift+0x14c>)
 810272e:	4293      	cmp	r3, r2
 8102730:	d00e      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 8102732:	687b      	ldr	r3, [r7, #4]
 8102734:	681b      	ldr	r3, [r3, #0]
 8102736:	4a30      	ldr	r2, [pc, #192]	@ (81027f8 <DMA_CalcBaseAndBitshift+0x150>)
 8102738:	4293      	cmp	r3, r2
 810273a:	d009      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	4a2e      	ldr	r2, [pc, #184]	@ (81027fc <DMA_CalcBaseAndBitshift+0x154>)
 8102742:	4293      	cmp	r3, r2
 8102744:	d004      	beq.n	8102750 <DMA_CalcBaseAndBitshift+0xa8>
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	681b      	ldr	r3, [r3, #0]
 810274a:	4a2d      	ldr	r2, [pc, #180]	@ (8102800 <DMA_CalcBaseAndBitshift+0x158>)
 810274c:	4293      	cmp	r3, r2
 810274e:	d101      	bne.n	8102754 <DMA_CalcBaseAndBitshift+0xac>
 8102750:	2301      	movs	r3, #1
 8102752:	e000      	b.n	8102756 <DMA_CalcBaseAndBitshift+0xae>
 8102754:	2300      	movs	r3, #0
 8102756:	2b00      	cmp	r3, #0
 8102758:	d026      	beq.n	81027a8 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	681b      	ldr	r3, [r3, #0]
 810275e:	b2db      	uxtb	r3, r3
 8102760:	3b10      	subs	r3, #16
 8102762:	4a28      	ldr	r2, [pc, #160]	@ (8102804 <DMA_CalcBaseAndBitshift+0x15c>)
 8102764:	fba2 2303 	umull	r2, r3, r2, r3
 8102768:	091b      	lsrs	r3, r3, #4
 810276a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 810276c:	68fb      	ldr	r3, [r7, #12]
 810276e:	f003 0307 	and.w	r3, r3, #7
 8102772:	4a25      	ldr	r2, [pc, #148]	@ (8102808 <DMA_CalcBaseAndBitshift+0x160>)
 8102774:	5cd3      	ldrb	r3, [r2, r3]
 8102776:	461a      	mov	r2, r3
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 810277c:	68fb      	ldr	r3, [r7, #12]
 810277e:	2b03      	cmp	r3, #3
 8102780:	d909      	bls.n	8102796 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8102782:	687b      	ldr	r3, [r7, #4]
 8102784:	681b      	ldr	r3, [r3, #0]
 8102786:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 810278a:	f023 0303 	bic.w	r3, r3, #3
 810278e:	1d1a      	adds	r2, r3, #4
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	659a      	str	r2, [r3, #88]	@ 0x58
 8102794:	e00e      	b.n	81027b4 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8102796:	687b      	ldr	r3, [r7, #4]
 8102798:	681b      	ldr	r3, [r3, #0]
 810279a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 810279e:	f023 0303 	bic.w	r3, r3, #3
 81027a2:	687a      	ldr	r2, [r7, #4]
 81027a4:	6593      	str	r3, [r2, #88]	@ 0x58
 81027a6:	e005      	b.n	81027b4 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	681b      	ldr	r3, [r3, #0]
 81027ac:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 81027b4:	687b      	ldr	r3, [r7, #4]
 81027b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 81027b8:	4618      	mov	r0, r3
 81027ba:	3714      	adds	r7, #20
 81027bc:	46bd      	mov	sp, r7
 81027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027c2:	4770      	bx	lr
 81027c4:	40020010 	.word	0x40020010
 81027c8:	40020028 	.word	0x40020028
 81027cc:	40020040 	.word	0x40020040
 81027d0:	40020058 	.word	0x40020058
 81027d4:	40020070 	.word	0x40020070
 81027d8:	40020088 	.word	0x40020088
 81027dc:	400200a0 	.word	0x400200a0
 81027e0:	400200b8 	.word	0x400200b8
 81027e4:	40020410 	.word	0x40020410
 81027e8:	40020428 	.word	0x40020428
 81027ec:	40020440 	.word	0x40020440
 81027f0:	40020458 	.word	0x40020458
 81027f4:	40020470 	.word	0x40020470
 81027f8:	40020488 	.word	0x40020488
 81027fc:	400204a0 	.word	0x400204a0
 8102800:	400204b8 	.word	0x400204b8
 8102804:	aaaaaaab 	.word	0xaaaaaaab
 8102808:	08104524 	.word	0x08104524

0810280c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 810280c:	b480      	push	{r7}
 810280e:	b085      	sub	sp, #20
 8102810:	af00      	add	r7, sp, #0
 8102812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102814:	2300      	movs	r3, #0
 8102816:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8102818:	687b      	ldr	r3, [r7, #4]
 810281a:	699b      	ldr	r3, [r3, #24]
 810281c:	2b00      	cmp	r3, #0
 810281e:	d120      	bne.n	8102862 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8102820:	687b      	ldr	r3, [r7, #4]
 8102822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102824:	2b03      	cmp	r3, #3
 8102826:	d858      	bhi.n	81028da <DMA_CheckFifoParam+0xce>
 8102828:	a201      	add	r2, pc, #4	@ (adr r2, 8102830 <DMA_CheckFifoParam+0x24>)
 810282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810282e:	bf00      	nop
 8102830:	08102841 	.word	0x08102841
 8102834:	08102853 	.word	0x08102853
 8102838:	08102841 	.word	0x08102841
 810283c:	081028db 	.word	0x081028db
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8102840:	687b      	ldr	r3, [r7, #4]
 8102842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102844:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8102848:	2b00      	cmp	r3, #0
 810284a:	d048      	beq.n	81028de <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 810284c:	2301      	movs	r3, #1
 810284e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8102850:	e045      	b.n	81028de <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8102852:	687b      	ldr	r3, [r7, #4]
 8102854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102856:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 810285a:	d142      	bne.n	81028e2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 810285c:	2301      	movs	r3, #1
 810285e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8102860:	e03f      	b.n	81028e2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	699b      	ldr	r3, [r3, #24]
 8102866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810286a:	d123      	bne.n	81028b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 810286c:	687b      	ldr	r3, [r7, #4]
 810286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102870:	2b03      	cmp	r3, #3
 8102872:	d838      	bhi.n	81028e6 <DMA_CheckFifoParam+0xda>
 8102874:	a201      	add	r2, pc, #4	@ (adr r2, 810287c <DMA_CheckFifoParam+0x70>)
 8102876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810287a:	bf00      	nop
 810287c:	0810288d 	.word	0x0810288d
 8102880:	08102893 	.word	0x08102893
 8102884:	0810288d 	.word	0x0810288d
 8102888:	081028a5 	.word	0x081028a5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 810288c:	2301      	movs	r3, #1
 810288e:	73fb      	strb	r3, [r7, #15]
        break;
 8102890:	e030      	b.n	81028f4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8102892:	687b      	ldr	r3, [r7, #4]
 8102894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810289a:	2b00      	cmp	r3, #0
 810289c:	d025      	beq.n	81028ea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 810289e:	2301      	movs	r3, #1
 81028a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81028a2:	e022      	b.n	81028ea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81028a4:	687b      	ldr	r3, [r7, #4]
 81028a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81028a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 81028ac:	d11f      	bne.n	81028ee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81028ae:	2301      	movs	r3, #1
 81028b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81028b2:	e01c      	b.n	81028ee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81028b8:	2b02      	cmp	r3, #2
 81028ba:	d902      	bls.n	81028c2 <DMA_CheckFifoParam+0xb6>
 81028bc:	2b03      	cmp	r3, #3
 81028be:	d003      	beq.n	81028c8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81028c0:	e018      	b.n	81028f4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81028c2:	2301      	movs	r3, #1
 81028c4:	73fb      	strb	r3, [r7, #15]
        break;
 81028c6:	e015      	b.n	81028f4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81028c8:	687b      	ldr	r3, [r7, #4]
 81028ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81028cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 81028d0:	2b00      	cmp	r3, #0
 81028d2:	d00e      	beq.n	81028f2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81028d4:	2301      	movs	r3, #1
 81028d6:	73fb      	strb	r3, [r7, #15]
    break;
 81028d8:	e00b      	b.n	81028f2 <DMA_CheckFifoParam+0xe6>
        break;
 81028da:	bf00      	nop
 81028dc:	e00a      	b.n	81028f4 <DMA_CheckFifoParam+0xe8>
        break;
 81028de:	bf00      	nop
 81028e0:	e008      	b.n	81028f4 <DMA_CheckFifoParam+0xe8>
        break;
 81028e2:	bf00      	nop
 81028e4:	e006      	b.n	81028f4 <DMA_CheckFifoParam+0xe8>
        break;
 81028e6:	bf00      	nop
 81028e8:	e004      	b.n	81028f4 <DMA_CheckFifoParam+0xe8>
        break;
 81028ea:	bf00      	nop
 81028ec:	e002      	b.n	81028f4 <DMA_CheckFifoParam+0xe8>
        break;
 81028ee:	bf00      	nop
 81028f0:	e000      	b.n	81028f4 <DMA_CheckFifoParam+0xe8>
    break;
 81028f2:	bf00      	nop
    }
  }

  return status;
 81028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 81028f6:	4618      	mov	r0, r3
 81028f8:	3714      	adds	r7, #20
 81028fa:	46bd      	mov	sp, r7
 81028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102900:	4770      	bx	lr
 8102902:	bf00      	nop

08102904 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8102904:	b480      	push	{r7}
 8102906:	b085      	sub	sp, #20
 8102908:	af00      	add	r7, sp, #0
 810290a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 810290c:	687b      	ldr	r3, [r7, #4]
 810290e:	681b      	ldr	r3, [r3, #0]
 8102910:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102912:	687b      	ldr	r3, [r7, #4]
 8102914:	681b      	ldr	r3, [r3, #0]
 8102916:	4a3a      	ldr	r2, [pc, #232]	@ (8102a00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8102918:	4293      	cmp	r3, r2
 810291a:	d022      	beq.n	8102962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810291c:	687b      	ldr	r3, [r7, #4]
 810291e:	681b      	ldr	r3, [r3, #0]
 8102920:	4a38      	ldr	r2, [pc, #224]	@ (8102a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8102922:	4293      	cmp	r3, r2
 8102924:	d01d      	beq.n	8102962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	681b      	ldr	r3, [r3, #0]
 810292a:	4a37      	ldr	r2, [pc, #220]	@ (8102a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 810292c:	4293      	cmp	r3, r2
 810292e:	d018      	beq.n	8102962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102930:	687b      	ldr	r3, [r7, #4]
 8102932:	681b      	ldr	r3, [r3, #0]
 8102934:	4a35      	ldr	r2, [pc, #212]	@ (8102a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8102936:	4293      	cmp	r3, r2
 8102938:	d013      	beq.n	8102962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	681b      	ldr	r3, [r3, #0]
 810293e:	4a34      	ldr	r2, [pc, #208]	@ (8102a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8102940:	4293      	cmp	r3, r2
 8102942:	d00e      	beq.n	8102962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102944:	687b      	ldr	r3, [r7, #4]
 8102946:	681b      	ldr	r3, [r3, #0]
 8102948:	4a32      	ldr	r2, [pc, #200]	@ (8102a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810294a:	4293      	cmp	r3, r2
 810294c:	d009      	beq.n	8102962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810294e:	687b      	ldr	r3, [r7, #4]
 8102950:	681b      	ldr	r3, [r3, #0]
 8102952:	4a31      	ldr	r2, [pc, #196]	@ (8102a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8102954:	4293      	cmp	r3, r2
 8102956:	d004      	beq.n	8102962 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	4a2f      	ldr	r2, [pc, #188]	@ (8102a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810295e:	4293      	cmp	r3, r2
 8102960:	d101      	bne.n	8102966 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8102962:	2301      	movs	r3, #1
 8102964:	e000      	b.n	8102968 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8102966:	2300      	movs	r3, #0
 8102968:	2b00      	cmp	r3, #0
 810296a:	d01c      	beq.n	81029a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	681b      	ldr	r3, [r3, #0]
 8102970:	b2db      	uxtb	r3, r3
 8102972:	3b08      	subs	r3, #8
 8102974:	4a2a      	ldr	r2, [pc, #168]	@ (8102a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8102976:	fba2 2303 	umull	r2, r3, r2, r3
 810297a:	091b      	lsrs	r3, r3, #4
 810297c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810297e:	68fb      	ldr	r3, [r7, #12]
 8102980:	f103 53b0 	add.w	r3, r3, #369098752	@ 0x16000000
 8102984:	f503 4316 	add.w	r3, r3, #38400	@ 0x9600
 8102988:	009b      	lsls	r3, r3, #2
 810298a:	461a      	mov	r2, r3
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8102990:	687b      	ldr	r3, [r7, #4]
 8102992:	4a24      	ldr	r2, [pc, #144]	@ (8102a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8102994:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8102996:	68fb      	ldr	r3, [r7, #12]
 8102998:	f003 031f 	and.w	r3, r3, #31
 810299c:	2201      	movs	r2, #1
 810299e:	409a      	lsls	r2, r3
 81029a0:	687b      	ldr	r3, [r7, #4]
 81029a2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81029a4:	e026      	b.n	81029f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	681b      	ldr	r3, [r3, #0]
 81029aa:	b2db      	uxtb	r3, r3
 81029ac:	3b10      	subs	r3, #16
 81029ae:	4a1e      	ldr	r2, [pc, #120]	@ (8102a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 81029b0:	fba2 2303 	umull	r2, r3, r2, r3
 81029b4:	091b      	lsrs	r3, r3, #4
 81029b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 81029b8:	68bb      	ldr	r3, [r7, #8]
 81029ba:	4a1c      	ldr	r2, [pc, #112]	@ (8102a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81029bc:	4293      	cmp	r3, r2
 81029be:	d806      	bhi.n	81029ce <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81029c0:	68bb      	ldr	r3, [r7, #8]
 81029c2:	4a1b      	ldr	r2, [pc, #108]	@ (8102a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81029c4:	4293      	cmp	r3, r2
 81029c6:	d902      	bls.n	81029ce <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81029c8:	68fb      	ldr	r3, [r7, #12]
 81029ca:	3308      	adds	r3, #8
 81029cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81029ce:	68fb      	ldr	r3, [r7, #12]
 81029d0:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 81029d4:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 81029d8:	009b      	lsls	r3, r3, #2
 81029da:	461a      	mov	r2, r3
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81029e0:	687b      	ldr	r3, [r7, #4]
 81029e2:	4a14      	ldr	r2, [pc, #80]	@ (8102a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81029e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81029e6:	68fb      	ldr	r3, [r7, #12]
 81029e8:	f003 031f 	and.w	r3, r3, #31
 81029ec:	2201      	movs	r2, #1
 81029ee:	409a      	lsls	r2, r3
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 81029f4:	bf00      	nop
 81029f6:	3714      	adds	r7, #20
 81029f8:	46bd      	mov	sp, r7
 81029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029fe:	4770      	bx	lr
 8102a00:	58025408 	.word	0x58025408
 8102a04:	5802541c 	.word	0x5802541c
 8102a08:	58025430 	.word	0x58025430
 8102a0c:	58025444 	.word	0x58025444
 8102a10:	58025458 	.word	0x58025458
 8102a14:	5802546c 	.word	0x5802546c
 8102a18:	58025480 	.word	0x58025480
 8102a1c:	58025494 	.word	0x58025494
 8102a20:	cccccccd 	.word	0xcccccccd
 8102a24:	58025880 	.word	0x58025880
 8102a28:	aaaaaaab 	.word	0xaaaaaaab
 8102a2c:	400204b8 	.word	0x400204b8
 8102a30:	4002040f 	.word	0x4002040f
 8102a34:	40020880 	.word	0x40020880

08102a38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8102a38:	b480      	push	{r7}
 8102a3a:	b085      	sub	sp, #20
 8102a3c:	af00      	add	r7, sp, #0
 8102a3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8102a40:	687b      	ldr	r3, [r7, #4]
 8102a42:	685b      	ldr	r3, [r3, #4]
 8102a44:	b2db      	uxtb	r3, r3
 8102a46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8102a48:	68fb      	ldr	r3, [r7, #12]
 8102a4a:	2b00      	cmp	r3, #0
 8102a4c:	d04a      	beq.n	8102ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8102a4e:	68fb      	ldr	r3, [r7, #12]
 8102a50:	2b08      	cmp	r3, #8
 8102a52:	d847      	bhi.n	8102ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	4a25      	ldr	r2, [pc, #148]	@ (8102af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8102a5a:	4293      	cmp	r3, r2
 8102a5c:	d022      	beq.n	8102aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8102a5e:	687b      	ldr	r3, [r7, #4]
 8102a60:	681b      	ldr	r3, [r3, #0]
 8102a62:	4a24      	ldr	r2, [pc, #144]	@ (8102af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8102a64:	4293      	cmp	r3, r2
 8102a66:	d01d      	beq.n	8102aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	681b      	ldr	r3, [r3, #0]
 8102a6c:	4a22      	ldr	r2, [pc, #136]	@ (8102af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8102a6e:	4293      	cmp	r3, r2
 8102a70:	d018      	beq.n	8102aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	681b      	ldr	r3, [r3, #0]
 8102a76:	4a21      	ldr	r2, [pc, #132]	@ (8102afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8102a78:	4293      	cmp	r3, r2
 8102a7a:	d013      	beq.n	8102aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	681b      	ldr	r3, [r3, #0]
 8102a80:	4a1f      	ldr	r2, [pc, #124]	@ (8102b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8102a82:	4293      	cmp	r3, r2
 8102a84:	d00e      	beq.n	8102aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	681b      	ldr	r3, [r3, #0]
 8102a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8102b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8102a8c:	4293      	cmp	r3, r2
 8102a8e:	d009      	beq.n	8102aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	4a1c      	ldr	r2, [pc, #112]	@ (8102b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8102a96:	4293      	cmp	r3, r2
 8102a98:	d004      	beq.n	8102aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	681b      	ldr	r3, [r3, #0]
 8102a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8102b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8102aa0:	4293      	cmp	r3, r2
 8102aa2:	d101      	bne.n	8102aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8102aa4:	2301      	movs	r3, #1
 8102aa6:	e000      	b.n	8102aaa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8102aa8:	2300      	movs	r3, #0
 8102aaa:	2b00      	cmp	r3, #0
 8102aac:	d00a      	beq.n	8102ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8102aae:	68fa      	ldr	r2, [r7, #12]
 8102ab0:	4b17      	ldr	r3, [pc, #92]	@ (8102b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8102ab2:	4413      	add	r3, r2
 8102ab4:	009b      	lsls	r3, r3, #2
 8102ab6:	461a      	mov	r2, r3
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8102abc:	687b      	ldr	r3, [r7, #4]
 8102abe:	4a15      	ldr	r2, [pc, #84]	@ (8102b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8102ac0:	671a      	str	r2, [r3, #112]	@ 0x70
 8102ac2:	e009      	b.n	8102ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8102ac4:	68fa      	ldr	r2, [r7, #12]
 8102ac6:	4b14      	ldr	r3, [pc, #80]	@ (8102b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8102ac8:	4413      	add	r3, r2
 8102aca:	009b      	lsls	r3, r3, #2
 8102acc:	461a      	mov	r2, r3
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	4a11      	ldr	r2, [pc, #68]	@ (8102b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8102ad6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8102ad8:	68fb      	ldr	r3, [r7, #12]
 8102ada:	3b01      	subs	r3, #1
 8102adc:	2201      	movs	r2, #1
 8102ade:	409a      	lsls	r2, r3
 8102ae0:	687b      	ldr	r3, [r7, #4]
 8102ae2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8102ae4:	bf00      	nop
 8102ae6:	3714      	adds	r7, #20
 8102ae8:	46bd      	mov	sp, r7
 8102aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aee:	4770      	bx	lr
 8102af0:	58025408 	.word	0x58025408
 8102af4:	5802541c 	.word	0x5802541c
 8102af8:	58025430 	.word	0x58025430
 8102afc:	58025444 	.word	0x58025444
 8102b00:	58025458 	.word	0x58025458
 8102b04:	5802546c 	.word	0x5802546c
 8102b08:	58025480 	.word	0x58025480
 8102b0c:	58025494 	.word	0x58025494
 8102b10:	1600963f 	.word	0x1600963f
 8102b14:	58025940 	.word	0x58025940
 8102b18:	1000823f 	.word	0x1000823f
 8102b1c:	40020940 	.word	0x40020940

08102b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8102b20:	b480      	push	{r7}
 8102b22:	b089      	sub	sp, #36	@ 0x24
 8102b24:	af00      	add	r7, sp, #0
 8102b26:	6078      	str	r0, [r7, #4]
 8102b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102b2a:	2300      	movs	r3, #0
 8102b2c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102b2e:	4b89      	ldr	r3, [pc, #548]	@ (8102d54 <HAL_GPIO_Init+0x234>)
 8102b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102b32:	e194      	b.n	8102e5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102b34:	683b      	ldr	r3, [r7, #0]
 8102b36:	681a      	ldr	r2, [r3, #0]
 8102b38:	2101      	movs	r1, #1
 8102b3a:	69fb      	ldr	r3, [r7, #28]
 8102b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8102b40:	4013      	ands	r3, r2
 8102b42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102b44:	693b      	ldr	r3, [r7, #16]
 8102b46:	2b00      	cmp	r3, #0
 8102b48:	f000 8186 	beq.w	8102e58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102b4c:	683b      	ldr	r3, [r7, #0]
 8102b4e:	685b      	ldr	r3, [r3, #4]
 8102b50:	f003 0303 	and.w	r3, r3, #3
 8102b54:	2b01      	cmp	r3, #1
 8102b56:	d005      	beq.n	8102b64 <HAL_GPIO_Init+0x44>
 8102b58:	683b      	ldr	r3, [r7, #0]
 8102b5a:	685b      	ldr	r3, [r3, #4]
 8102b5c:	f003 0303 	and.w	r3, r3, #3
 8102b60:	2b02      	cmp	r3, #2
 8102b62:	d130      	bne.n	8102bc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	689b      	ldr	r3, [r3, #8]
 8102b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102b6a:	69fb      	ldr	r3, [r7, #28]
 8102b6c:	005b      	lsls	r3, r3, #1
 8102b6e:	2203      	movs	r2, #3
 8102b70:	fa02 f303 	lsl.w	r3, r2, r3
 8102b74:	43db      	mvns	r3, r3
 8102b76:	69ba      	ldr	r2, [r7, #24]
 8102b78:	4013      	ands	r3, r2
 8102b7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102b7c:	683b      	ldr	r3, [r7, #0]
 8102b7e:	68da      	ldr	r2, [r3, #12]
 8102b80:	69fb      	ldr	r3, [r7, #28]
 8102b82:	005b      	lsls	r3, r3, #1
 8102b84:	fa02 f303 	lsl.w	r3, r2, r3
 8102b88:	69ba      	ldr	r2, [r7, #24]
 8102b8a:	4313      	orrs	r3, r2
 8102b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102b8e:	687b      	ldr	r3, [r7, #4]
 8102b90:	69ba      	ldr	r2, [r7, #24]
 8102b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102b94:	687b      	ldr	r3, [r7, #4]
 8102b96:	685b      	ldr	r3, [r3, #4]
 8102b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102b9a:	2201      	movs	r2, #1
 8102b9c:	69fb      	ldr	r3, [r7, #28]
 8102b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8102ba2:	43db      	mvns	r3, r3
 8102ba4:	69ba      	ldr	r2, [r7, #24]
 8102ba6:	4013      	ands	r3, r2
 8102ba8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102baa:	683b      	ldr	r3, [r7, #0]
 8102bac:	685b      	ldr	r3, [r3, #4]
 8102bae:	091b      	lsrs	r3, r3, #4
 8102bb0:	f003 0201 	and.w	r2, r3, #1
 8102bb4:	69fb      	ldr	r3, [r7, #28]
 8102bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8102bba:	69ba      	ldr	r2, [r7, #24]
 8102bbc:	4313      	orrs	r3, r2
 8102bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102bc0:	687b      	ldr	r3, [r7, #4]
 8102bc2:	69ba      	ldr	r2, [r7, #24]
 8102bc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102bc6:	683b      	ldr	r3, [r7, #0]
 8102bc8:	685b      	ldr	r3, [r3, #4]
 8102bca:	f003 0303 	and.w	r3, r3, #3
 8102bce:	2b03      	cmp	r3, #3
 8102bd0:	d017      	beq.n	8102c02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	68db      	ldr	r3, [r3, #12]
 8102bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102bd8:	69fb      	ldr	r3, [r7, #28]
 8102bda:	005b      	lsls	r3, r3, #1
 8102bdc:	2203      	movs	r2, #3
 8102bde:	fa02 f303 	lsl.w	r3, r2, r3
 8102be2:	43db      	mvns	r3, r3
 8102be4:	69ba      	ldr	r2, [r7, #24]
 8102be6:	4013      	ands	r3, r2
 8102be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102bea:	683b      	ldr	r3, [r7, #0]
 8102bec:	689a      	ldr	r2, [r3, #8]
 8102bee:	69fb      	ldr	r3, [r7, #28]
 8102bf0:	005b      	lsls	r3, r3, #1
 8102bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8102bf6:	69ba      	ldr	r2, [r7, #24]
 8102bf8:	4313      	orrs	r3, r2
 8102bfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	69ba      	ldr	r2, [r7, #24]
 8102c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102c02:	683b      	ldr	r3, [r7, #0]
 8102c04:	685b      	ldr	r3, [r3, #4]
 8102c06:	f003 0303 	and.w	r3, r3, #3
 8102c0a:	2b02      	cmp	r3, #2
 8102c0c:	d123      	bne.n	8102c56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102c0e:	69fb      	ldr	r3, [r7, #28]
 8102c10:	08da      	lsrs	r2, r3, #3
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	3208      	adds	r2, #8
 8102c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102c1c:	69fb      	ldr	r3, [r7, #28]
 8102c1e:	f003 0307 	and.w	r3, r3, #7
 8102c22:	009b      	lsls	r3, r3, #2
 8102c24:	220f      	movs	r2, #15
 8102c26:	fa02 f303 	lsl.w	r3, r2, r3
 8102c2a:	43db      	mvns	r3, r3
 8102c2c:	69ba      	ldr	r2, [r7, #24]
 8102c2e:	4013      	ands	r3, r2
 8102c30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102c32:	683b      	ldr	r3, [r7, #0]
 8102c34:	691a      	ldr	r2, [r3, #16]
 8102c36:	69fb      	ldr	r3, [r7, #28]
 8102c38:	f003 0307 	and.w	r3, r3, #7
 8102c3c:	009b      	lsls	r3, r3, #2
 8102c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8102c42:	69ba      	ldr	r2, [r7, #24]
 8102c44:	4313      	orrs	r3, r2
 8102c46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102c48:	69fb      	ldr	r3, [r7, #28]
 8102c4a:	08da      	lsrs	r2, r3, #3
 8102c4c:	687b      	ldr	r3, [r7, #4]
 8102c4e:	3208      	adds	r2, #8
 8102c50:	69b9      	ldr	r1, [r7, #24]
 8102c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	681b      	ldr	r3, [r3, #0]
 8102c5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102c5c:	69fb      	ldr	r3, [r7, #28]
 8102c5e:	005b      	lsls	r3, r3, #1
 8102c60:	2203      	movs	r2, #3
 8102c62:	fa02 f303 	lsl.w	r3, r2, r3
 8102c66:	43db      	mvns	r3, r3
 8102c68:	69ba      	ldr	r2, [r7, #24]
 8102c6a:	4013      	ands	r3, r2
 8102c6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102c6e:	683b      	ldr	r3, [r7, #0]
 8102c70:	685b      	ldr	r3, [r3, #4]
 8102c72:	f003 0203 	and.w	r2, r3, #3
 8102c76:	69fb      	ldr	r3, [r7, #28]
 8102c78:	005b      	lsls	r3, r3, #1
 8102c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8102c7e:	69ba      	ldr	r2, [r7, #24]
 8102c80:	4313      	orrs	r3, r2
 8102c82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102c84:	687b      	ldr	r3, [r7, #4]
 8102c86:	69ba      	ldr	r2, [r7, #24]
 8102c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102c8a:	683b      	ldr	r3, [r7, #0]
 8102c8c:	685b      	ldr	r3, [r3, #4]
 8102c8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102c92:	2b00      	cmp	r3, #0
 8102c94:	f000 80e0 	beq.w	8102e58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102c98:	4b2f      	ldr	r3, [pc, #188]	@ (8102d58 <HAL_GPIO_Init+0x238>)
 8102c9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8102d58 <HAL_GPIO_Init+0x238>)
 8102ca0:	f043 0302 	orr.w	r3, r3, #2
 8102ca4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8102d58 <HAL_GPIO_Init+0x238>)
 8102caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102cae:	f003 0302 	and.w	r3, r3, #2
 8102cb2:	60fb      	str	r3, [r7, #12]
 8102cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102cb6:	4a29      	ldr	r2, [pc, #164]	@ (8102d5c <HAL_GPIO_Init+0x23c>)
 8102cb8:	69fb      	ldr	r3, [r7, #28]
 8102cba:	089b      	lsrs	r3, r3, #2
 8102cbc:	3302      	adds	r3, #2
 8102cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102cc4:	69fb      	ldr	r3, [r7, #28]
 8102cc6:	f003 0303 	and.w	r3, r3, #3
 8102cca:	009b      	lsls	r3, r3, #2
 8102ccc:	220f      	movs	r2, #15
 8102cce:	fa02 f303 	lsl.w	r3, r2, r3
 8102cd2:	43db      	mvns	r3, r3
 8102cd4:	69ba      	ldr	r2, [r7, #24]
 8102cd6:	4013      	ands	r3, r2
 8102cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102cda:	687b      	ldr	r3, [r7, #4]
 8102cdc:	4a20      	ldr	r2, [pc, #128]	@ (8102d60 <HAL_GPIO_Init+0x240>)
 8102cde:	4293      	cmp	r3, r2
 8102ce0:	d052      	beq.n	8102d88 <HAL_GPIO_Init+0x268>
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8102d64 <HAL_GPIO_Init+0x244>)
 8102ce6:	4293      	cmp	r3, r2
 8102ce8:	d031      	beq.n	8102d4e <HAL_GPIO_Init+0x22e>
 8102cea:	687b      	ldr	r3, [r7, #4]
 8102cec:	4a1e      	ldr	r2, [pc, #120]	@ (8102d68 <HAL_GPIO_Init+0x248>)
 8102cee:	4293      	cmp	r3, r2
 8102cf0:	d02b      	beq.n	8102d4a <HAL_GPIO_Init+0x22a>
 8102cf2:	687b      	ldr	r3, [r7, #4]
 8102cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8102d6c <HAL_GPIO_Init+0x24c>)
 8102cf6:	4293      	cmp	r3, r2
 8102cf8:	d025      	beq.n	8102d46 <HAL_GPIO_Init+0x226>
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8102d70 <HAL_GPIO_Init+0x250>)
 8102cfe:	4293      	cmp	r3, r2
 8102d00:	d01f      	beq.n	8102d42 <HAL_GPIO_Init+0x222>
 8102d02:	687b      	ldr	r3, [r7, #4]
 8102d04:	4a1b      	ldr	r2, [pc, #108]	@ (8102d74 <HAL_GPIO_Init+0x254>)
 8102d06:	4293      	cmp	r3, r2
 8102d08:	d019      	beq.n	8102d3e <HAL_GPIO_Init+0x21e>
 8102d0a:	687b      	ldr	r3, [r7, #4]
 8102d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8102d78 <HAL_GPIO_Init+0x258>)
 8102d0e:	4293      	cmp	r3, r2
 8102d10:	d013      	beq.n	8102d3a <HAL_GPIO_Init+0x21a>
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	4a19      	ldr	r2, [pc, #100]	@ (8102d7c <HAL_GPIO_Init+0x25c>)
 8102d16:	4293      	cmp	r3, r2
 8102d18:	d00d      	beq.n	8102d36 <HAL_GPIO_Init+0x216>
 8102d1a:	687b      	ldr	r3, [r7, #4]
 8102d1c:	4a18      	ldr	r2, [pc, #96]	@ (8102d80 <HAL_GPIO_Init+0x260>)
 8102d1e:	4293      	cmp	r3, r2
 8102d20:	d007      	beq.n	8102d32 <HAL_GPIO_Init+0x212>
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	4a17      	ldr	r2, [pc, #92]	@ (8102d84 <HAL_GPIO_Init+0x264>)
 8102d26:	4293      	cmp	r3, r2
 8102d28:	d101      	bne.n	8102d2e <HAL_GPIO_Init+0x20e>
 8102d2a:	2309      	movs	r3, #9
 8102d2c:	e02d      	b.n	8102d8a <HAL_GPIO_Init+0x26a>
 8102d2e:	230a      	movs	r3, #10
 8102d30:	e02b      	b.n	8102d8a <HAL_GPIO_Init+0x26a>
 8102d32:	2308      	movs	r3, #8
 8102d34:	e029      	b.n	8102d8a <HAL_GPIO_Init+0x26a>
 8102d36:	2307      	movs	r3, #7
 8102d38:	e027      	b.n	8102d8a <HAL_GPIO_Init+0x26a>
 8102d3a:	2306      	movs	r3, #6
 8102d3c:	e025      	b.n	8102d8a <HAL_GPIO_Init+0x26a>
 8102d3e:	2305      	movs	r3, #5
 8102d40:	e023      	b.n	8102d8a <HAL_GPIO_Init+0x26a>
 8102d42:	2304      	movs	r3, #4
 8102d44:	e021      	b.n	8102d8a <HAL_GPIO_Init+0x26a>
 8102d46:	2303      	movs	r3, #3
 8102d48:	e01f      	b.n	8102d8a <HAL_GPIO_Init+0x26a>
 8102d4a:	2302      	movs	r3, #2
 8102d4c:	e01d      	b.n	8102d8a <HAL_GPIO_Init+0x26a>
 8102d4e:	2301      	movs	r3, #1
 8102d50:	e01b      	b.n	8102d8a <HAL_GPIO_Init+0x26a>
 8102d52:	bf00      	nop
 8102d54:	580000c0 	.word	0x580000c0
 8102d58:	58024400 	.word	0x58024400
 8102d5c:	58000400 	.word	0x58000400
 8102d60:	58020000 	.word	0x58020000
 8102d64:	58020400 	.word	0x58020400
 8102d68:	58020800 	.word	0x58020800
 8102d6c:	58020c00 	.word	0x58020c00
 8102d70:	58021000 	.word	0x58021000
 8102d74:	58021400 	.word	0x58021400
 8102d78:	58021800 	.word	0x58021800
 8102d7c:	58021c00 	.word	0x58021c00
 8102d80:	58022000 	.word	0x58022000
 8102d84:	58022400 	.word	0x58022400
 8102d88:	2300      	movs	r3, #0
 8102d8a:	69fa      	ldr	r2, [r7, #28]
 8102d8c:	f002 0203 	and.w	r2, r2, #3
 8102d90:	0092      	lsls	r2, r2, #2
 8102d92:	4093      	lsls	r3, r2
 8102d94:	69ba      	ldr	r2, [r7, #24]
 8102d96:	4313      	orrs	r3, r2
 8102d98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102d9a:	4938      	ldr	r1, [pc, #224]	@ (8102e7c <HAL_GPIO_Init+0x35c>)
 8102d9c:	69fb      	ldr	r3, [r7, #28]
 8102d9e:	089b      	lsrs	r3, r3, #2
 8102da0:	3302      	adds	r3, #2
 8102da2:	69ba      	ldr	r2, [r7, #24]
 8102da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102dac:	681b      	ldr	r3, [r3, #0]
 8102dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102db0:	693b      	ldr	r3, [r7, #16]
 8102db2:	43db      	mvns	r3, r3
 8102db4:	69ba      	ldr	r2, [r7, #24]
 8102db6:	4013      	ands	r3, r2
 8102db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102dba:	683b      	ldr	r3, [r7, #0]
 8102dbc:	685b      	ldr	r3, [r3, #4]
 8102dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8102dc2:	2b00      	cmp	r3, #0
 8102dc4:	d003      	beq.n	8102dce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102dc6:	69ba      	ldr	r2, [r7, #24]
 8102dc8:	693b      	ldr	r3, [r7, #16]
 8102dca:	4313      	orrs	r3, r2
 8102dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102dce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102dd2:	69bb      	ldr	r3, [r7, #24]
 8102dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102dda:	685b      	ldr	r3, [r3, #4]
 8102ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102dde:	693b      	ldr	r3, [r7, #16]
 8102de0:	43db      	mvns	r3, r3
 8102de2:	69ba      	ldr	r2, [r7, #24]
 8102de4:	4013      	ands	r3, r2
 8102de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102de8:	683b      	ldr	r3, [r7, #0]
 8102dea:	685b      	ldr	r3, [r3, #4]
 8102dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102df0:	2b00      	cmp	r3, #0
 8102df2:	d003      	beq.n	8102dfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102df4:	69ba      	ldr	r2, [r7, #24]
 8102df6:	693b      	ldr	r3, [r7, #16]
 8102df8:	4313      	orrs	r3, r2
 8102dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102dfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102e00:	69bb      	ldr	r3, [r7, #24]
 8102e02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102e04:	697b      	ldr	r3, [r7, #20]
 8102e06:	685b      	ldr	r3, [r3, #4]
 8102e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102e0a:	693b      	ldr	r3, [r7, #16]
 8102e0c:	43db      	mvns	r3, r3
 8102e0e:	69ba      	ldr	r2, [r7, #24]
 8102e10:	4013      	ands	r3, r2
 8102e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102e14:	683b      	ldr	r3, [r7, #0]
 8102e16:	685b      	ldr	r3, [r3, #4]
 8102e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102e1c:	2b00      	cmp	r3, #0
 8102e1e:	d003      	beq.n	8102e28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102e20:	69ba      	ldr	r2, [r7, #24]
 8102e22:	693b      	ldr	r3, [r7, #16]
 8102e24:	4313      	orrs	r3, r2
 8102e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102e28:	697b      	ldr	r3, [r7, #20]
 8102e2a:	69ba      	ldr	r2, [r7, #24]
 8102e2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102e2e:	697b      	ldr	r3, [r7, #20]
 8102e30:	681b      	ldr	r3, [r3, #0]
 8102e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102e34:	693b      	ldr	r3, [r7, #16]
 8102e36:	43db      	mvns	r3, r3
 8102e38:	69ba      	ldr	r2, [r7, #24]
 8102e3a:	4013      	ands	r3, r2
 8102e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102e3e:	683b      	ldr	r3, [r7, #0]
 8102e40:	685b      	ldr	r3, [r3, #4]
 8102e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102e46:	2b00      	cmp	r3, #0
 8102e48:	d003      	beq.n	8102e52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102e4a:	69ba      	ldr	r2, [r7, #24]
 8102e4c:	693b      	ldr	r3, [r7, #16]
 8102e4e:	4313      	orrs	r3, r2
 8102e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102e52:	697b      	ldr	r3, [r7, #20]
 8102e54:	69ba      	ldr	r2, [r7, #24]
 8102e56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102e58:	69fb      	ldr	r3, [r7, #28]
 8102e5a:	3301      	adds	r3, #1
 8102e5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102e5e:	683b      	ldr	r3, [r7, #0]
 8102e60:	681a      	ldr	r2, [r3, #0]
 8102e62:	69fb      	ldr	r3, [r7, #28]
 8102e64:	fa22 f303 	lsr.w	r3, r2, r3
 8102e68:	2b00      	cmp	r3, #0
 8102e6a:	f47f ae63 	bne.w	8102b34 <HAL_GPIO_Init+0x14>
  }
}
 8102e6e:	bf00      	nop
 8102e70:	bf00      	nop
 8102e72:	3724      	adds	r7, #36	@ 0x24
 8102e74:	46bd      	mov	sp, r7
 8102e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e7a:	4770      	bx	lr
 8102e7c:	58000400 	.word	0x58000400

08102e80 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8102e80:	b480      	push	{r7}
 8102e82:	b083      	sub	sp, #12
 8102e84:	af00      	add	r7, sp, #0
 8102e86:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8102e88:	4a08      	ldr	r2, [pc, #32]	@ (8102eac <HAL_HSEM_FastTake+0x2c>)
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	3320      	adds	r3, #32
 8102e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102e92:	4a07      	ldr	r2, [pc, #28]	@ (8102eb0 <HAL_HSEM_FastTake+0x30>)
 8102e94:	4293      	cmp	r3, r2
 8102e96:	d101      	bne.n	8102e9c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8102e98:	2300      	movs	r3, #0
 8102e9a:	e000      	b.n	8102e9e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8102e9c:	2301      	movs	r3, #1
}
 8102e9e:	4618      	mov	r0, r3
 8102ea0:	370c      	adds	r7, #12
 8102ea2:	46bd      	mov	sp, r7
 8102ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ea8:	4770      	bx	lr
 8102eaa:	bf00      	nop
 8102eac:	58026400 	.word	0x58026400
 8102eb0:	80000100 	.word	0x80000100

08102eb4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8102eb4:	b480      	push	{r7}
 8102eb6:	b083      	sub	sp, #12
 8102eb8:	af00      	add	r7, sp, #0
 8102eba:	6078      	str	r0, [r7, #4]
 8102ebc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8102ebe:	4906      	ldr	r1, [pc, #24]	@ (8102ed8 <HAL_HSEM_Release+0x24>)
 8102ec0:	683b      	ldr	r3, [r7, #0]
 8102ec2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102ec6:	687b      	ldr	r3, [r7, #4]
 8102ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8102ecc:	bf00      	nop
 8102ece:	370c      	adds	r7, #12
 8102ed0:	46bd      	mov	sp, r7
 8102ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ed6:	4770      	bx	lr
 8102ed8:	58026400 	.word	0x58026400

08102edc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102edc:	b480      	push	{r7}
 8102ede:	b083      	sub	sp, #12
 8102ee0:	af00      	add	r7, sp, #0
 8102ee2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102ee4:	4b05      	ldr	r3, [pc, #20]	@ (8102efc <HAL_HSEM_ActivateNotification+0x20>)
 8102ee6:	681a      	ldr	r2, [r3, #0]
 8102ee8:	4904      	ldr	r1, [pc, #16]	@ (8102efc <HAL_HSEM_ActivateNotification+0x20>)
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	4313      	orrs	r3, r2
 8102eee:	600b      	str	r3, [r1, #0]
#endif
}
 8102ef0:	bf00      	nop
 8102ef2:	370c      	adds	r7, #12
 8102ef4:	46bd      	mov	sp, r7
 8102ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102efa:	4770      	bx	lr
 8102efc:	58026510 	.word	0x58026510

08102f00 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102f00:	b580      	push	{r7, lr}
 8102f02:	b084      	sub	sp, #16
 8102f04:	af00      	add	r7, sp, #0
 8102f06:	60f8      	str	r0, [r7, #12]
 8102f08:	460b      	mov	r3, r1
 8102f0a:	607a      	str	r2, [r7, #4]
 8102f0c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102f0e:	4b37      	ldr	r3, [pc, #220]	@ (8102fec <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	f023 0201 	bic.w	r2, r3, #1
 8102f16:	4935      	ldr	r1, [pc, #212]	@ (8102fec <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f18:	68fb      	ldr	r3, [r7, #12]
 8102f1a:	4313      	orrs	r3, r2
 8102f1c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	2b00      	cmp	r3, #0
 8102f22:	d123      	bne.n	8102f6c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102f24:	f7fd fee4 	bl	8100cf0 <HAL_GetCurrentCPUID>
 8102f28:	4603      	mov	r3, r0
 8102f2a:	2b03      	cmp	r3, #3
 8102f2c:	d158      	bne.n	8102fe0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8102fec <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f30:	691b      	ldr	r3, [r3, #16]
 8102f32:	4a2e      	ldr	r2, [pc, #184]	@ (8102fec <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f34:	f023 0301 	bic.w	r3, r3, #1
 8102f38:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8102ff0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f3c:	691b      	ldr	r3, [r3, #16]
 8102f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8102ff0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f40:	f043 0304 	orr.w	r3, r3, #4
 8102f44:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102f46:	f3bf 8f4f 	dsb	sy
}
 8102f4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102f4c:	f3bf 8f6f 	isb	sy
}
 8102f50:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102f52:	7afb      	ldrb	r3, [r7, #11]
 8102f54:	2b01      	cmp	r3, #1
 8102f56:	d101      	bne.n	8102f5c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102f58:	bf30      	wfi
 8102f5a:	e000      	b.n	8102f5e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102f5c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f5e:	4b24      	ldr	r3, [pc, #144]	@ (8102ff0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f60:	691b      	ldr	r3, [r3, #16]
 8102f62:	4a23      	ldr	r2, [pc, #140]	@ (8102ff0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f64:	f023 0304 	bic.w	r3, r3, #4
 8102f68:	6113      	str	r3, [r2, #16]
 8102f6a:	e03c      	b.n	8102fe6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	2b01      	cmp	r3, #1
 8102f70:	d123      	bne.n	8102fba <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102f72:	f7fd febd 	bl	8100cf0 <HAL_GetCurrentCPUID>
 8102f76:	4603      	mov	r3, r0
 8102f78:	2b01      	cmp	r3, #1
 8102f7a:	d133      	bne.n	8102fe4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8102fec <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f7e:	695b      	ldr	r3, [r3, #20]
 8102f80:	4a1a      	ldr	r2, [pc, #104]	@ (8102fec <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f82:	f023 0302 	bic.w	r3, r3, #2
 8102f86:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f88:	4b19      	ldr	r3, [pc, #100]	@ (8102ff0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f8a:	691b      	ldr	r3, [r3, #16]
 8102f8c:	4a18      	ldr	r2, [pc, #96]	@ (8102ff0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f8e:	f043 0304 	orr.w	r3, r3, #4
 8102f92:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102f94:	f3bf 8f4f 	dsb	sy
}
 8102f98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102f9a:	f3bf 8f6f 	isb	sy
}
 8102f9e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102fa0:	7afb      	ldrb	r3, [r7, #11]
 8102fa2:	2b01      	cmp	r3, #1
 8102fa4:	d101      	bne.n	8102faa <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102fa6:	bf30      	wfi
 8102fa8:	e000      	b.n	8102fac <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102faa:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102fac:	4b10      	ldr	r3, [pc, #64]	@ (8102ff0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102fae:	691b      	ldr	r3, [r3, #16]
 8102fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8102ff0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102fb2:	f023 0304 	bic.w	r3, r3, #4
 8102fb6:	6113      	str	r3, [r2, #16]
 8102fb8:	e015      	b.n	8102fe6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102fba:	f7fd fe99 	bl	8100cf0 <HAL_GetCurrentCPUID>
 8102fbe:	4603      	mov	r3, r0
 8102fc0:	2b03      	cmp	r3, #3
 8102fc2:	d106      	bne.n	8102fd2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102fc4:	4b09      	ldr	r3, [pc, #36]	@ (8102fec <HAL_PWREx_EnterSTOPMode+0xec>)
 8102fc6:	691b      	ldr	r3, [r3, #16]
 8102fc8:	4a08      	ldr	r2, [pc, #32]	@ (8102fec <HAL_PWREx_EnterSTOPMode+0xec>)
 8102fca:	f023 0304 	bic.w	r3, r3, #4
 8102fce:	6113      	str	r3, [r2, #16]
 8102fd0:	e009      	b.n	8102fe6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102fd2:	4b06      	ldr	r3, [pc, #24]	@ (8102fec <HAL_PWREx_EnterSTOPMode+0xec>)
 8102fd4:	695b      	ldr	r3, [r3, #20]
 8102fd6:	4a05      	ldr	r2, [pc, #20]	@ (8102fec <HAL_PWREx_EnterSTOPMode+0xec>)
 8102fd8:	f023 0304 	bic.w	r3, r3, #4
 8102fdc:	6153      	str	r3, [r2, #20]
 8102fde:	e002      	b.n	8102fe6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102fe0:	bf00      	nop
 8102fe2:	e000      	b.n	8102fe6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102fe4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102fe6:	3710      	adds	r7, #16
 8102fe8:	46bd      	mov	sp, r7
 8102fea:	bd80      	pop	{r7, pc}
 8102fec:	58024800 	.word	0x58024800
 8102ff0:	e000ed00 	.word	0xe000ed00

08102ff4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102ff4:	b580      	push	{r7, lr}
 8102ff6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102ff8:	f7fd fe7a 	bl	8100cf0 <HAL_GetCurrentCPUID>
 8102ffc:	4603      	mov	r3, r0
 8102ffe:	2b03      	cmp	r3, #3
 8103000:	d101      	bne.n	8103006 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103002:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103004:	e001      	b.n	810300a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103006:	bf40      	sev
    __WFE ();
 8103008:	bf20      	wfe
}
 810300a:	bf00      	nop
 810300c:	bd80      	pop	{r7, pc}
	...

08103010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103010:	b480      	push	{r7}
 8103012:	b089      	sub	sp, #36	@ 0x24
 8103014:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103016:	4bb3      	ldr	r3, [pc, #716]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103018:	691b      	ldr	r3, [r3, #16]
 810301a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810301e:	2b18      	cmp	r3, #24
 8103020:	f200 8155 	bhi.w	81032ce <HAL_RCC_GetSysClockFreq+0x2be>
 8103024:	a201      	add	r2, pc, #4	@ (adr r2, 810302c <HAL_RCC_GetSysClockFreq+0x1c>)
 8103026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810302a:	bf00      	nop
 810302c:	08103091 	.word	0x08103091
 8103030:	081032cf 	.word	0x081032cf
 8103034:	081032cf 	.word	0x081032cf
 8103038:	081032cf 	.word	0x081032cf
 810303c:	081032cf 	.word	0x081032cf
 8103040:	081032cf 	.word	0x081032cf
 8103044:	081032cf 	.word	0x081032cf
 8103048:	081032cf 	.word	0x081032cf
 810304c:	081030b7 	.word	0x081030b7
 8103050:	081032cf 	.word	0x081032cf
 8103054:	081032cf 	.word	0x081032cf
 8103058:	081032cf 	.word	0x081032cf
 810305c:	081032cf 	.word	0x081032cf
 8103060:	081032cf 	.word	0x081032cf
 8103064:	081032cf 	.word	0x081032cf
 8103068:	081032cf 	.word	0x081032cf
 810306c:	081030bd 	.word	0x081030bd
 8103070:	081032cf 	.word	0x081032cf
 8103074:	081032cf 	.word	0x081032cf
 8103078:	081032cf 	.word	0x081032cf
 810307c:	081032cf 	.word	0x081032cf
 8103080:	081032cf 	.word	0x081032cf
 8103084:	081032cf 	.word	0x081032cf
 8103088:	081032cf 	.word	0x081032cf
 810308c:	081030c3 	.word	0x081030c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103090:	4b94      	ldr	r3, [pc, #592]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103092:	681b      	ldr	r3, [r3, #0]
 8103094:	f003 0320 	and.w	r3, r3, #32
 8103098:	2b00      	cmp	r3, #0
 810309a:	d009      	beq.n	81030b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810309c:	4b91      	ldr	r3, [pc, #580]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810309e:	681b      	ldr	r3, [r3, #0]
 81030a0:	08db      	lsrs	r3, r3, #3
 81030a2:	f003 0303 	and.w	r3, r3, #3
 81030a6:	4a90      	ldr	r2, [pc, #576]	@ (81032e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81030a8:	fa22 f303 	lsr.w	r3, r2, r3
 81030ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81030ae:	e111      	b.n	81032d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81030b0:	4b8d      	ldr	r3, [pc, #564]	@ (81032e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81030b2:	61bb      	str	r3, [r7, #24]
      break;
 81030b4:	e10e      	b.n	81032d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81030b6:	4b8d      	ldr	r3, [pc, #564]	@ (81032ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 81030b8:	61bb      	str	r3, [r7, #24]
      break;
 81030ba:	e10b      	b.n	81032d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81030bc:	4b8c      	ldr	r3, [pc, #560]	@ (81032f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81030be:	61bb      	str	r3, [r7, #24]
      break;
 81030c0:	e108      	b.n	81032d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81030c2:	4b88      	ldr	r3, [pc, #544]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81030c6:	f003 0303 	and.w	r3, r3, #3
 81030ca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81030cc:	4b85      	ldr	r3, [pc, #532]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81030d0:	091b      	lsrs	r3, r3, #4
 81030d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81030d6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81030d8:	4b82      	ldr	r3, [pc, #520]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81030dc:	f003 0301 	and.w	r3, r3, #1
 81030e0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81030e2:	4b80      	ldr	r3, [pc, #512]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81030e6:	08db      	lsrs	r3, r3, #3
 81030e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81030ec:	68fa      	ldr	r2, [r7, #12]
 81030ee:	fb02 f303 	mul.w	r3, r2, r3
 81030f2:	ee07 3a90 	vmov	s15, r3
 81030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030fa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81030fe:	693b      	ldr	r3, [r7, #16]
 8103100:	2b00      	cmp	r3, #0
 8103102:	f000 80e1 	beq.w	81032c8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8103106:	697b      	ldr	r3, [r7, #20]
 8103108:	2b02      	cmp	r3, #2
 810310a:	f000 8083 	beq.w	8103214 <HAL_RCC_GetSysClockFreq+0x204>
 810310e:	697b      	ldr	r3, [r7, #20]
 8103110:	2b02      	cmp	r3, #2
 8103112:	f200 80a1 	bhi.w	8103258 <HAL_RCC_GetSysClockFreq+0x248>
 8103116:	697b      	ldr	r3, [r7, #20]
 8103118:	2b00      	cmp	r3, #0
 810311a:	d003      	beq.n	8103124 <HAL_RCC_GetSysClockFreq+0x114>
 810311c:	697b      	ldr	r3, [r7, #20]
 810311e:	2b01      	cmp	r3, #1
 8103120:	d056      	beq.n	81031d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103122:	e099      	b.n	8103258 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103124:	4b6f      	ldr	r3, [pc, #444]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103126:	681b      	ldr	r3, [r3, #0]
 8103128:	f003 0320 	and.w	r3, r3, #32
 810312c:	2b00      	cmp	r3, #0
 810312e:	d02d      	beq.n	810318c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103130:	4b6c      	ldr	r3, [pc, #432]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103132:	681b      	ldr	r3, [r3, #0]
 8103134:	08db      	lsrs	r3, r3, #3
 8103136:	f003 0303 	and.w	r3, r3, #3
 810313a:	4a6b      	ldr	r2, [pc, #428]	@ (81032e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810313c:	fa22 f303 	lsr.w	r3, r2, r3
 8103140:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	ee07 3a90 	vmov	s15, r3
 8103148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810314c:	693b      	ldr	r3, [r7, #16]
 810314e:	ee07 3a90 	vmov	s15, r3
 8103152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810315a:	4b62      	ldr	r3, [pc, #392]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810315e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103162:	ee07 3a90 	vmov	s15, r3
 8103166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810316a:	ed97 6a02 	vldr	s12, [r7, #8]
 810316e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810317a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810317e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103186:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810318a:	e087      	b.n	810329c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810318c:	693b      	ldr	r3, [r7, #16]
 810318e:	ee07 3a90 	vmov	s15, r3
 8103192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103196:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81032f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810319a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810319e:	4b51      	ldr	r3, [pc, #324]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031a6:	ee07 3a90 	vmov	s15, r3
 81031aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031ae:	ed97 6a02 	vldr	s12, [r7, #8]
 81031b2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81031b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81031c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81031ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81031ce:	e065      	b.n	810329c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81031d0:	693b      	ldr	r3, [r7, #16]
 81031d2:	ee07 3a90 	vmov	s15, r3
 81031d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031da:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81032fc <HAL_RCC_GetSysClockFreq+0x2ec>
 81031de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031e2:	4b40      	ldr	r3, [pc, #256]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81031e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031ea:	ee07 3a90 	vmov	s15, r3
 81031ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031f2:	ed97 6a02 	vldr	s12, [r7, #8]
 81031f6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81031fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810320a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810320e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103212:	e043      	b.n	810329c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103214:	693b      	ldr	r3, [r7, #16]
 8103216:	ee07 3a90 	vmov	s15, r3
 810321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810321e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8103300 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103226:	4b2f      	ldr	r3, [pc, #188]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810322a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810322e:	ee07 3a90 	vmov	s15, r3
 8103232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103236:	ed97 6a02 	vldr	s12, [r7, #8]
 810323a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810323e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810324a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810324e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103252:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103256:	e021      	b.n	810329c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103258:	693b      	ldr	r3, [r7, #16]
 810325a:	ee07 3a90 	vmov	s15, r3
 810325e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103262:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81032fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8103266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810326a:	4b1e      	ldr	r3, [pc, #120]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810326e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103272:	ee07 3a90 	vmov	s15, r3
 8103276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810327a:	ed97 6a02 	vldr	s12, [r7, #8]
 810327e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81032f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810328a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810328e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103296:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810329a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810329c:	4b11      	ldr	r3, [pc, #68]	@ (81032e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81032a0:	0a5b      	lsrs	r3, r3, #9
 81032a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81032a6:	3301      	adds	r3, #1
 81032a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81032aa:	683b      	ldr	r3, [r7, #0]
 81032ac:	ee07 3a90 	vmov	s15, r3
 81032b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81032b4:	edd7 6a07 	vldr	s13, [r7, #28]
 81032b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81032bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81032c0:	ee17 3a90 	vmov	r3, s15
 81032c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81032c6:	e005      	b.n	81032d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81032c8:	2300      	movs	r3, #0
 81032ca:	61bb      	str	r3, [r7, #24]
      break;
 81032cc:	e002      	b.n	81032d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81032ce:	4b07      	ldr	r3, [pc, #28]	@ (81032ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 81032d0:	61bb      	str	r3, [r7, #24]
      break;
 81032d2:	bf00      	nop
  }

  return sysclockfreq;
 81032d4:	69bb      	ldr	r3, [r7, #24]
}
 81032d6:	4618      	mov	r0, r3
 81032d8:	3724      	adds	r7, #36	@ 0x24
 81032da:	46bd      	mov	sp, r7
 81032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032e0:	4770      	bx	lr
 81032e2:	bf00      	nop
 81032e4:	58024400 	.word	0x58024400
 81032e8:	03d09000 	.word	0x03d09000
 81032ec:	003d0900 	.word	0x003d0900
 81032f0:	017d7840 	.word	0x017d7840
 81032f4:	46000000 	.word	0x46000000
 81032f8:	4c742400 	.word	0x4c742400
 81032fc:	4a742400 	.word	0x4a742400
 8103300:	4bbebc20 	.word	0x4bbebc20

08103304 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8103304:	b580      	push	{r7, lr}
 8103306:	b084      	sub	sp, #16
 8103308:	af00      	add	r7, sp, #0
 810330a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	2b00      	cmp	r3, #0
 8103310:	d101      	bne.n	8103316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8103312:	2301      	movs	r3, #1
 8103314:	e10f      	b.n	8103536 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	2200      	movs	r2, #0
 810331a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	681b      	ldr	r3, [r3, #0]
 8103320:	4a87      	ldr	r2, [pc, #540]	@ (8103540 <HAL_SPI_Init+0x23c>)
 8103322:	4293      	cmp	r3, r2
 8103324:	d00f      	beq.n	8103346 <HAL_SPI_Init+0x42>
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	4a86      	ldr	r2, [pc, #536]	@ (8103544 <HAL_SPI_Init+0x240>)
 810332c:	4293      	cmp	r3, r2
 810332e:	d00a      	beq.n	8103346 <HAL_SPI_Init+0x42>
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	681b      	ldr	r3, [r3, #0]
 8103334:	4a84      	ldr	r2, [pc, #528]	@ (8103548 <HAL_SPI_Init+0x244>)
 8103336:	4293      	cmp	r3, r2
 8103338:	d005      	beq.n	8103346 <HAL_SPI_Init+0x42>
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	68db      	ldr	r3, [r3, #12]
 810333e:	2b0f      	cmp	r3, #15
 8103340:	d901      	bls.n	8103346 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8103342:	2301      	movs	r3, #1
 8103344:	e0f7      	b.n	8103536 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8103346:	6878      	ldr	r0, [r7, #4]
 8103348:	f000 fbba 	bl	8103ac0 <SPI_GetPacketSize>
 810334c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	681b      	ldr	r3, [r3, #0]
 8103352:	4a7b      	ldr	r2, [pc, #492]	@ (8103540 <HAL_SPI_Init+0x23c>)
 8103354:	4293      	cmp	r3, r2
 8103356:	d00c      	beq.n	8103372 <HAL_SPI_Init+0x6e>
 8103358:	687b      	ldr	r3, [r7, #4]
 810335a:	681b      	ldr	r3, [r3, #0]
 810335c:	4a79      	ldr	r2, [pc, #484]	@ (8103544 <HAL_SPI_Init+0x240>)
 810335e:	4293      	cmp	r3, r2
 8103360:	d007      	beq.n	8103372 <HAL_SPI_Init+0x6e>
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	681b      	ldr	r3, [r3, #0]
 8103366:	4a78      	ldr	r2, [pc, #480]	@ (8103548 <HAL_SPI_Init+0x244>)
 8103368:	4293      	cmp	r3, r2
 810336a:	d002      	beq.n	8103372 <HAL_SPI_Init+0x6e>
 810336c:	68fb      	ldr	r3, [r7, #12]
 810336e:	2b08      	cmp	r3, #8
 8103370:	d811      	bhi.n	8103396 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8103376:	4a72      	ldr	r2, [pc, #456]	@ (8103540 <HAL_SPI_Init+0x23c>)
 8103378:	4293      	cmp	r3, r2
 810337a:	d009      	beq.n	8103390 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	681b      	ldr	r3, [r3, #0]
 8103380:	4a70      	ldr	r2, [pc, #448]	@ (8103544 <HAL_SPI_Init+0x240>)
 8103382:	4293      	cmp	r3, r2
 8103384:	d004      	beq.n	8103390 <HAL_SPI_Init+0x8c>
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	4a6f      	ldr	r2, [pc, #444]	@ (8103548 <HAL_SPI_Init+0x244>)
 810338c:	4293      	cmp	r3, r2
 810338e:	d104      	bne.n	810339a <HAL_SPI_Init+0x96>
 8103390:	68fb      	ldr	r3, [r7, #12]
 8103392:	2b10      	cmp	r3, #16
 8103394:	d901      	bls.n	810339a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8103396:	2301      	movs	r3, #1
 8103398:	e0cd      	b.n	8103536 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81033a0:	b2db      	uxtb	r3, r3
 81033a2:	2b00      	cmp	r3, #0
 81033a4:	d106      	bne.n	81033b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	2200      	movs	r2, #0
 81033aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81033ae:	6878      	ldr	r0, [r7, #4]
 81033b0:	f7fd f958 	bl	8100664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81033b4:	687b      	ldr	r3, [r7, #4]
 81033b6:	2202      	movs	r2, #2
 81033b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81033bc:	687b      	ldr	r3, [r7, #4]
 81033be:	681b      	ldr	r3, [r3, #0]
 81033c0:	681a      	ldr	r2, [r3, #0]
 81033c2:	687b      	ldr	r3, [r7, #4]
 81033c4:	681b      	ldr	r3, [r3, #0]
 81033c6:	f022 0201 	bic.w	r2, r2, #1
 81033ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	681b      	ldr	r3, [r3, #0]
 81033d0:	689b      	ldr	r3, [r3, #8]
 81033d2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 81033d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	699b      	ldr	r3, [r3, #24]
 81033dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81033e0:	d119      	bne.n	8103416 <HAL_SPI_Init+0x112>
 81033e2:	687b      	ldr	r3, [r7, #4]
 81033e4:	685b      	ldr	r3, [r3, #4]
 81033e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81033ea:	d103      	bne.n	81033f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81033f0:	2b00      	cmp	r3, #0
 81033f2:	d008      	beq.n	8103406 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81033f4:	687b      	ldr	r3, [r7, #4]
 81033f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81033f8:	2b00      	cmp	r3, #0
 81033fa:	d10c      	bne.n	8103416 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8103400:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103404:	d107      	bne.n	8103416 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	681b      	ldr	r3, [r3, #0]
 810340a:	681a      	ldr	r2, [r3, #0]
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	681b      	ldr	r3, [r3, #0]
 8103410:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8103414:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	685b      	ldr	r3, [r3, #4]
 810341a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810341e:	2b00      	cmp	r3, #0
 8103420:	d00f      	beq.n	8103442 <HAL_SPI_Init+0x13e>
 8103422:	687b      	ldr	r3, [r7, #4]
 8103424:	68db      	ldr	r3, [r3, #12]
 8103426:	2b06      	cmp	r3, #6
 8103428:	d90b      	bls.n	8103442 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 810342a:	687b      	ldr	r3, [r7, #4]
 810342c:	681b      	ldr	r3, [r3, #0]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8103438:	687b      	ldr	r3, [r7, #4]
 810343a:	681b      	ldr	r3, [r3, #0]
 810343c:	430a      	orrs	r2, r1
 810343e:	601a      	str	r2, [r3, #0]
 8103440:	e007      	b.n	8103452 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8103442:	687b      	ldr	r3, [r7, #4]
 8103444:	681b      	ldr	r3, [r3, #0]
 8103446:	681a      	ldr	r2, [r3, #0]
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103450:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	69da      	ldr	r2, [r3, #28]
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810345a:	431a      	orrs	r2, r3
 810345c:	68bb      	ldr	r3, [r7, #8]
 810345e:	431a      	orrs	r2, r3
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103464:	ea42 0103 	orr.w	r1, r2, r3
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	68da      	ldr	r2, [r3, #12]
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	681b      	ldr	r3, [r3, #0]
 8103470:	430a      	orrs	r2, r1
 8103472:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8103474:	687b      	ldr	r3, [r7, #4]
 8103476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810347c:	431a      	orrs	r2, r3
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103482:	431a      	orrs	r2, r3
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	699b      	ldr	r3, [r3, #24]
 8103488:	431a      	orrs	r2, r3
 810348a:	687b      	ldr	r3, [r7, #4]
 810348c:	691b      	ldr	r3, [r3, #16]
 810348e:	431a      	orrs	r2, r3
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	695b      	ldr	r3, [r3, #20]
 8103494:	431a      	orrs	r2, r3
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	6a1b      	ldr	r3, [r3, #32]
 810349a:	431a      	orrs	r2, r3
 810349c:	687b      	ldr	r3, [r7, #4]
 810349e:	685b      	ldr	r3, [r3, #4]
 81034a0:	431a      	orrs	r2, r3
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81034a6:	431a      	orrs	r2, r3
 81034a8:	687b      	ldr	r3, [r7, #4]
 81034aa:	689b      	ldr	r3, [r3, #8]
 81034ac:	431a      	orrs	r2, r3
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81034b2:	ea42 0103 	orr.w	r1, r2, r3
 81034b6:	687b      	ldr	r3, [r7, #4]
 81034b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81034ba:	687b      	ldr	r3, [r7, #4]
 81034bc:	681b      	ldr	r3, [r3, #0]
 81034be:	430a      	orrs	r2, r1
 81034c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	685b      	ldr	r3, [r3, #4]
 81034c6:	2b00      	cmp	r3, #0
 81034c8:	d113      	bne.n	81034f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81034ca:	687b      	ldr	r3, [r7, #4]
 81034cc:	681b      	ldr	r3, [r3, #0]
 81034ce:	689b      	ldr	r3, [r3, #8]
 81034d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	681b      	ldr	r3, [r3, #0]
 81034d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81034dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	681b      	ldr	r3, [r3, #0]
 81034e2:	689b      	ldr	r3, [r3, #8]
 81034e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 81034f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81034f2:	687b      	ldr	r3, [r7, #4]
 81034f4:	681b      	ldr	r3, [r3, #0]
 81034f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	f022 0201 	bic.w	r2, r2, #1
 8103500:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8103502:	687b      	ldr	r3, [r7, #4]
 8103504:	685b      	ldr	r3, [r3, #4]
 8103506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810350a:	2b00      	cmp	r3, #0
 810350c:	d00a      	beq.n	8103524 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	68db      	ldr	r3, [r3, #12]
 8103514:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	430a      	orrs	r2, r1
 8103522:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8103524:	687b      	ldr	r3, [r7, #4]
 8103526:	2200      	movs	r2, #0
 8103528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	2201      	movs	r2, #1
 8103530:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8103534:	2300      	movs	r3, #0
}
 8103536:	4618      	mov	r0, r3
 8103538:	3710      	adds	r7, #16
 810353a:	46bd      	mov	sp, r7
 810353c:	bd80      	pop	{r7, pc}
 810353e:	bf00      	nop
 8103540:	40013000 	.word	0x40013000
 8103544:	40003800 	.word	0x40003800
 8103548:	40003c00 	.word	0x40003c00

0810354c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810354c:	b580      	push	{r7, lr}
 810354e:	b08a      	sub	sp, #40	@ 0x28
 8103550:	af00      	add	r7, sp, #0
 8103552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	681b      	ldr	r3, [r3, #0]
 8103558:	691b      	ldr	r3, [r3, #16]
 810355a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810355c:	687b      	ldr	r3, [r7, #4]
 810355e:	681b      	ldr	r3, [r3, #0]
 8103560:	695b      	ldr	r3, [r3, #20]
 8103562:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8103564:	6a3a      	ldr	r2, [r7, #32]
 8103566:	69fb      	ldr	r3, [r7, #28]
 8103568:	4013      	ands	r3, r2
 810356a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810356c:	687b      	ldr	r3, [r7, #4]
 810356e:	681b      	ldr	r3, [r3, #0]
 8103570:	689b      	ldr	r3, [r3, #8]
 8103572:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8103574:	2300      	movs	r3, #0
 8103576:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810357e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8103580:	687b      	ldr	r3, [r7, #4]
 8103582:	681b      	ldr	r3, [r3, #0]
 8103584:	3330      	adds	r3, #48	@ 0x30
 8103586:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8103588:	69fb      	ldr	r3, [r7, #28]
 810358a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810358e:	2b00      	cmp	r3, #0
 8103590:	d010      	beq.n	81035b4 <HAL_SPI_IRQHandler+0x68>
 8103592:	6a3b      	ldr	r3, [r7, #32]
 8103594:	f003 0308 	and.w	r3, r3, #8
 8103598:	2b00      	cmp	r3, #0
 810359a:	d00b      	beq.n	81035b4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810359c:	687b      	ldr	r3, [r7, #4]
 810359e:	681b      	ldr	r3, [r3, #0]
 81035a0:	699a      	ldr	r2, [r3, #24]
 81035a2:	687b      	ldr	r3, [r7, #4]
 81035a4:	681b      	ldr	r3, [r3, #0]
 81035a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81035aa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 81035ac:	6878      	ldr	r0, [r7, #4]
 81035ae:	f000 f9c3 	bl	8103938 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 81035b2:	e194      	b.n	81038de <HAL_SPI_IRQHandler+0x392>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 81035b4:	69bb      	ldr	r3, [r7, #24]
 81035b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81035ba:	2b00      	cmp	r3, #0
 81035bc:	d113      	bne.n	81035e6 <HAL_SPI_IRQHandler+0x9a>
 81035be:	69bb      	ldr	r3, [r7, #24]
 81035c0:	f003 0320 	and.w	r3, r3, #32
 81035c4:	2b00      	cmp	r3, #0
 81035c6:	d10e      	bne.n	81035e6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 81035c8:	69bb      	ldr	r3, [r7, #24]
 81035ca:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 81035ce:	2b00      	cmp	r3, #0
 81035d0:	d009      	beq.n	81035e6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 81035d2:	687b      	ldr	r3, [r7, #4]
 81035d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81035d6:	6878      	ldr	r0, [r7, #4]
 81035d8:	4798      	blx	r3
    hspi->RxISR(hspi);
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81035de:	6878      	ldr	r0, [r7, #4]
 81035e0:	4798      	blx	r3
    handled = 1UL;
 81035e2:	2301      	movs	r3, #1
 81035e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 81035e6:	69bb      	ldr	r3, [r7, #24]
 81035e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81035ec:	2b00      	cmp	r3, #0
 81035ee:	d10f      	bne.n	8103610 <HAL_SPI_IRQHandler+0xc4>
 81035f0:	69bb      	ldr	r3, [r7, #24]
 81035f2:	f003 0301 	and.w	r3, r3, #1
 81035f6:	2b00      	cmp	r3, #0
 81035f8:	d00a      	beq.n	8103610 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 81035fa:	69bb      	ldr	r3, [r7, #24]
 81035fc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8103600:	2b00      	cmp	r3, #0
 8103602:	d105      	bne.n	8103610 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103608:	6878      	ldr	r0, [r7, #4]
 810360a:	4798      	blx	r3
    handled = 1UL;
 810360c:	2301      	movs	r3, #1
 810360e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8103610:	69bb      	ldr	r3, [r7, #24]
 8103612:	f003 0320 	and.w	r3, r3, #32
 8103616:	2b00      	cmp	r3, #0
 8103618:	d10f      	bne.n	810363a <HAL_SPI_IRQHandler+0xee>
 810361a:	69bb      	ldr	r3, [r7, #24]
 810361c:	f003 0302 	and.w	r3, r3, #2
 8103620:	2b00      	cmp	r3, #0
 8103622:	d00a      	beq.n	810363a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8103624:	69bb      	ldr	r3, [r7, #24]
 8103626:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 810362a:	2b00      	cmp	r3, #0
 810362c:	d105      	bne.n	810363a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8103632:	6878      	ldr	r0, [r7, #4]
 8103634:	4798      	blx	r3
    handled = 1UL;
 8103636:	2301      	movs	r3, #1
 8103638:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810363c:	2b00      	cmp	r3, #0
 810363e:	f040 8149 	bne.w	81038d4 <HAL_SPI_IRQHandler+0x388>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8103642:	69bb      	ldr	r3, [r7, #24]
 8103644:	f003 0308 	and.w	r3, r3, #8
 8103648:	2b00      	cmp	r3, #0
 810364a:	f000 808b 	beq.w	8103764 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810364e:	687b      	ldr	r3, [r7, #4]
 8103650:	681b      	ldr	r3, [r3, #0]
 8103652:	699a      	ldr	r2, [r3, #24]
 8103654:	687b      	ldr	r3, [r7, #4]
 8103656:	681b      	ldr	r3, [r3, #0]
 8103658:	f042 0208 	orr.w	r2, r2, #8
 810365c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	681b      	ldr	r3, [r3, #0]
 8103662:	699a      	ldr	r2, [r3, #24]
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	681b      	ldr	r3, [r3, #0]
 8103668:	f042 0210 	orr.w	r2, r2, #16
 810366c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810366e:	687b      	ldr	r3, [r7, #4]
 8103670:	681b      	ldr	r3, [r3, #0]
 8103672:	699a      	ldr	r2, [r3, #24]
 8103674:	687b      	ldr	r3, [r7, #4]
 8103676:	681b      	ldr	r3, [r3, #0]
 8103678:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810367c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810367e:	687b      	ldr	r3, [r7, #4]
 8103680:	681b      	ldr	r3, [r3, #0]
 8103682:	691a      	ldr	r2, [r3, #16]
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	f022 0208 	bic.w	r2, r2, #8
 810368c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810368e:	687b      	ldr	r3, [r7, #4]
 8103690:	681b      	ldr	r3, [r3, #0]
 8103692:	689b      	ldr	r3, [r3, #8]
 8103694:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8103698:	2b00      	cmp	r3, #0
 810369a:	d13d      	bne.n	8103718 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 810369c:	e036      	b.n	810370c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	68db      	ldr	r3, [r3, #12]
 81036a2:	2b0f      	cmp	r3, #15
 81036a4:	d90b      	bls.n	81036be <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81036a6:	687b      	ldr	r3, [r7, #4]
 81036a8:	681a      	ldr	r2, [r3, #0]
 81036aa:	687b      	ldr	r3, [r7, #4]
 81036ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81036ae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 81036b0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81036b2:	687b      	ldr	r3, [r7, #4]
 81036b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81036b6:	1d1a      	adds	r2, r3, #4
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	665a      	str	r2, [r3, #100]	@ 0x64
 81036bc:	e01d      	b.n	81036fa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	68db      	ldr	r3, [r3, #12]
 81036c2:	2b07      	cmp	r3, #7
 81036c4:	d90b      	bls.n	81036de <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81036ca:	68fa      	ldr	r2, [r7, #12]
 81036cc:	8812      	ldrh	r2, [r2, #0]
 81036ce:	b292      	uxth	r2, r2
 81036d0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81036d2:	687b      	ldr	r3, [r7, #4]
 81036d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81036d6:	1c9a      	adds	r2, r3, #2
 81036d8:	687b      	ldr	r3, [r7, #4]
 81036da:	665a      	str	r2, [r3, #100]	@ 0x64
 81036dc:	e00d      	b.n	81036fa <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	681b      	ldr	r3, [r3, #0]
 81036e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 81036e6:	687b      	ldr	r3, [r7, #4]
 81036e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81036ea:	7812      	ldrb	r2, [r2, #0]
 81036ec:	b2d2      	uxtb	r2, r2
 81036ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81036f0:	687b      	ldr	r3, [r7, #4]
 81036f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81036f4:	1c5a      	adds	r2, r3, #1
 81036f6:	687b      	ldr	r3, [r7, #4]
 81036f8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 81036fa:	687b      	ldr	r3, [r7, #4]
 81036fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103700:	b29b      	uxth	r3, r3
 8103702:	3b01      	subs	r3, #1
 8103704:	b29a      	uxth	r2, r3
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 810370c:	687b      	ldr	r3, [r7, #4]
 810370e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8103712:	b29b      	uxth	r3, r3
 8103714:	2b00      	cmp	r3, #0
 8103716:	d1c2      	bne.n	810369e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8103718:	6878      	ldr	r0, [r7, #4]
 810371a:	f000 f931 	bl	8103980 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 810371e:	687b      	ldr	r3, [r7, #4]
 8103720:	2201      	movs	r2, #1
 8103722:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8103726:	687b      	ldr	r3, [r7, #4]
 8103728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810372c:	2b00      	cmp	r3, #0
 810372e:	d003      	beq.n	8103738 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8103730:	6878      	ldr	r0, [r7, #4]
 8103732:	f000 f8f7 	bl	8103924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8103736:	e0d2      	b.n	81038de <HAL_SPI_IRQHandler+0x392>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8103738:	7cfb      	ldrb	r3, [r7, #19]
 810373a:	2b05      	cmp	r3, #5
 810373c:	d103      	bne.n	8103746 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810373e:	6878      	ldr	r0, [r7, #4]
 8103740:	f000 f8e6 	bl	8103910 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8103744:	e0c8      	b.n	81038d8 <HAL_SPI_IRQHandler+0x38c>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8103746:	7cfb      	ldrb	r3, [r7, #19]
 8103748:	2b04      	cmp	r3, #4
 810374a:	d103      	bne.n	8103754 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 810374c:	6878      	ldr	r0, [r7, #4]
 810374e:	f000 f8d5 	bl	81038fc <HAL_SPI_RxCpltCallback>
    return;
 8103752:	e0c1      	b.n	81038d8 <HAL_SPI_IRQHandler+0x38c>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8103754:	7cfb      	ldrb	r3, [r7, #19]
 8103756:	2b03      	cmp	r3, #3
 8103758:	f040 80be 	bne.w	81038d8 <HAL_SPI_IRQHandler+0x38c>
      HAL_SPI_TxCpltCallback(hspi);
 810375c:	6878      	ldr	r0, [r7, #4]
 810375e:	f000 f8c3 	bl	81038e8 <HAL_SPI_TxCpltCallback>
    return;
 8103762:	e0b9      	b.n	81038d8 <HAL_SPI_IRQHandler+0x38c>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8103764:	69bb      	ldr	r3, [r7, #24]
 8103766:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 810376a:	2b00      	cmp	r3, #0
 810376c:	f000 80b7 	beq.w	81038de <HAL_SPI_IRQHandler+0x392>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8103770:	69bb      	ldr	r3, [r7, #24]
 8103772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103776:	2b00      	cmp	r3, #0
 8103778:	d00f      	beq.n	810379a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810377a:	687b      	ldr	r3, [r7, #4]
 810377c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103780:	f043 0204 	orr.w	r2, r3, #4
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810378a:	687b      	ldr	r3, [r7, #4]
 810378c:	681b      	ldr	r3, [r3, #0]
 810378e:	699a      	ldr	r2, [r3, #24]
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	681b      	ldr	r3, [r3, #0]
 8103794:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8103798:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810379a:	69bb      	ldr	r3, [r7, #24]
 810379c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81037a0:	2b00      	cmp	r3, #0
 81037a2:	d00f      	beq.n	81037c4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81037a4:	687b      	ldr	r3, [r7, #4]
 81037a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81037aa:	f043 0201 	orr.w	r2, r3, #1
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	681b      	ldr	r3, [r3, #0]
 81037b8:	699a      	ldr	r2, [r3, #24]
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81037c2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 81037c4:	69bb      	ldr	r3, [r7, #24]
 81037c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81037ca:	2b00      	cmp	r3, #0
 81037cc:	d00f      	beq.n	81037ee <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81037d4:	f043 0208 	orr.w	r2, r3, #8
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 81037de:	687b      	ldr	r3, [r7, #4]
 81037e0:	681b      	ldr	r3, [r3, #0]
 81037e2:	699a      	ldr	r2, [r3, #24]
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	681b      	ldr	r3, [r3, #0]
 81037e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 81037ec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 81037ee:	69bb      	ldr	r3, [r7, #24]
 81037f0:	f003 0320 	and.w	r3, r3, #32
 81037f4:	2b00      	cmp	r3, #0
 81037f6:	d00f      	beq.n	8103818 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81037f8:	687b      	ldr	r3, [r7, #4]
 81037fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81037fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	699a      	ldr	r2, [r3, #24]
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	681b      	ldr	r3, [r3, #0]
 8103812:	f042 0220 	orr.w	r2, r2, #32
 8103816:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810381e:	2b00      	cmp	r3, #0
 8103820:	d05c      	beq.n	81038dc <HAL_SPI_IRQHandler+0x390>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	681b      	ldr	r3, [r3, #0]
 8103826:	681a      	ldr	r2, [r3, #0]
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	681b      	ldr	r3, [r3, #0]
 810382c:	f022 0201 	bic.w	r2, r2, #1
 8103830:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	691b      	ldr	r3, [r3, #16]
 8103838:	687a      	ldr	r2, [r7, #4]
 810383a:	6812      	ldr	r2, [r2, #0]
 810383c:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8103840:	f023 0303 	bic.w	r3, r3, #3
 8103844:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8103846:	697b      	ldr	r3, [r7, #20]
 8103848:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 810384c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8103850:	d138      	bne.n	81038c4 <HAL_SPI_IRQHandler+0x378>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8103852:	687b      	ldr	r3, [r7, #4]
 8103854:	681b      	ldr	r3, [r3, #0]
 8103856:	689a      	ldr	r2, [r3, #8]
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	681b      	ldr	r3, [r3, #0]
 810385c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8103860:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103866:	2b00      	cmp	r3, #0
 8103868:	d013      	beq.n	8103892 <HAL_SPI_IRQHandler+0x346>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810386e:	4a1d      	ldr	r2, [pc, #116]	@ (81038e4 <HAL_SPI_IRQHandler+0x398>)
 8103870:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8103872:	687b      	ldr	r3, [r7, #4]
 8103874:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103876:	4618      	mov	r0, r3
 8103878:	f7fd fda6 	bl	81013c8 <HAL_DMA_Abort_IT>
 810387c:	4603      	mov	r3, r0
 810387e:	2b00      	cmp	r3, #0
 8103880:	d007      	beq.n	8103892 <HAL_SPI_IRQHandler+0x346>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103888:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810388c:	687b      	ldr	r3, [r7, #4]
 810388e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8103896:	2b00      	cmp	r3, #0
 8103898:	d020      	beq.n	81038dc <HAL_SPI_IRQHandler+0x390>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810389e:	4a11      	ldr	r2, [pc, #68]	@ (81038e4 <HAL_SPI_IRQHandler+0x398>)
 81038a0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81038a6:	4618      	mov	r0, r3
 81038a8:	f7fd fd8e 	bl	81013c8 <HAL_DMA_Abort_IT>
 81038ac:	4603      	mov	r3, r0
 81038ae:	2b00      	cmp	r3, #0
 81038b0:	d014      	beq.n	81038dc <HAL_SPI_IRQHandler+0x390>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81038b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 81038c2:	e00b      	b.n	81038dc <HAL_SPI_IRQHandler+0x390>
        hspi->State = HAL_SPI_STATE_READY;
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	2201      	movs	r2, #1
 81038c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 81038cc:	6878      	ldr	r0, [r7, #4]
 81038ce:	f000 f829 	bl	8103924 <HAL_SPI_ErrorCallback>
    return;
 81038d2:	e003      	b.n	81038dc <HAL_SPI_IRQHandler+0x390>
    return;
 81038d4:	bf00      	nop
 81038d6:	e002      	b.n	81038de <HAL_SPI_IRQHandler+0x392>
    return;
 81038d8:	bf00      	nop
 81038da:	e000      	b.n	81038de <HAL_SPI_IRQHandler+0x392>
    return;
 81038dc:	bf00      	nop
  }
}
 81038de:	3728      	adds	r7, #40	@ 0x28
 81038e0:	46bd      	mov	sp, r7
 81038e2:	bd80      	pop	{r7, pc}
 81038e4:	0810394d 	.word	0x0810394d

081038e8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 81038e8:	b480      	push	{r7}
 81038ea:	b083      	sub	sp, #12
 81038ec:	af00      	add	r7, sp, #0
 81038ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 81038f0:	bf00      	nop
 81038f2:	370c      	adds	r7, #12
 81038f4:	46bd      	mov	sp, r7
 81038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038fa:	4770      	bx	lr

081038fc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 81038fc:	b480      	push	{r7}
 81038fe:	b083      	sub	sp, #12
 8103900:	af00      	add	r7, sp, #0
 8103902:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8103904:	bf00      	nop
 8103906:	370c      	adds	r7, #12
 8103908:	46bd      	mov	sp, r7
 810390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810390e:	4770      	bx	lr

08103910 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8103910:	b480      	push	{r7}
 8103912:	b083      	sub	sp, #12
 8103914:	af00      	add	r7, sp, #0
 8103916:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8103918:	bf00      	nop
 810391a:	370c      	adds	r7, #12
 810391c:	46bd      	mov	sp, r7
 810391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103922:	4770      	bx	lr

08103924 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8103924:	b480      	push	{r7}
 8103926:	b083      	sub	sp, #12
 8103928:	af00      	add	r7, sp, #0
 810392a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810392c:	bf00      	nop
 810392e:	370c      	adds	r7, #12
 8103930:	46bd      	mov	sp, r7
 8103932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103936:	4770      	bx	lr

08103938 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8103938:	b480      	push	{r7}
 810393a:	b083      	sub	sp, #12
 810393c:	af00      	add	r7, sp, #0
 810393e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8103940:	bf00      	nop
 8103942:	370c      	adds	r7, #12
 8103944:	46bd      	mov	sp, r7
 8103946:	f85d 7b04 	ldr.w	r7, [sp], #4
 810394a:	4770      	bx	lr

0810394c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810394c:	b580      	push	{r7, lr}
 810394e:	b084      	sub	sp, #16
 8103950:	af00      	add	r7, sp, #0
 8103952:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103958:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810395a:	68fb      	ldr	r3, [r7, #12]
 810395c:	2200      	movs	r2, #0
 810395e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8103962:	68fb      	ldr	r3, [r7, #12]
 8103964:	2200      	movs	r2, #0
 8103966:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810396a:	68fb      	ldr	r3, [r7, #12]
 810396c:	2201      	movs	r2, #1
 810396e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8103972:	68f8      	ldr	r0, [r7, #12]
 8103974:	f7ff ffd6 	bl	8103924 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8103978:	bf00      	nop
 810397a:	3710      	adds	r7, #16
 810397c:	46bd      	mov	sp, r7
 810397e:	bd80      	pop	{r7, pc}

08103980 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8103980:	b480      	push	{r7}
 8103982:	b085      	sub	sp, #20
 8103984:	af00      	add	r7, sp, #0
 8103986:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8103988:	687b      	ldr	r3, [r7, #4]
 810398a:	681b      	ldr	r3, [r3, #0]
 810398c:	695b      	ldr	r3, [r3, #20]
 810398e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	699a      	ldr	r2, [r3, #24]
 8103996:	687b      	ldr	r3, [r7, #4]
 8103998:	681b      	ldr	r3, [r3, #0]
 810399a:	f042 0208 	orr.w	r2, r2, #8
 810399e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 81039a0:	687b      	ldr	r3, [r7, #4]
 81039a2:	681b      	ldr	r3, [r3, #0]
 81039a4:	699a      	ldr	r2, [r3, #24]
 81039a6:	687b      	ldr	r3, [r7, #4]
 81039a8:	681b      	ldr	r3, [r3, #0]
 81039aa:	f042 0210 	orr.w	r2, r2, #16
 81039ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81039b0:	687b      	ldr	r3, [r7, #4]
 81039b2:	681b      	ldr	r3, [r3, #0]
 81039b4:	681a      	ldr	r2, [r3, #0]
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	681b      	ldr	r3, [r3, #0]
 81039ba:	f022 0201 	bic.w	r2, r2, #1
 81039be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	691b      	ldr	r3, [r3, #16]
 81039c6:	687a      	ldr	r2, [r7, #4]
 81039c8:	6812      	ldr	r2, [r2, #0]
 81039ca:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 81039ce:	f023 0303 	bic.w	r3, r3, #3
 81039d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	681b      	ldr	r3, [r3, #0]
 81039d8:	689a      	ldr	r2, [r3, #8]
 81039da:	687b      	ldr	r3, [r7, #4]
 81039dc:	681b      	ldr	r3, [r3, #0]
 81039de:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 81039e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81039e4:	687b      	ldr	r3, [r7, #4]
 81039e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81039ea:	b2db      	uxtb	r3, r3
 81039ec:	2b04      	cmp	r3, #4
 81039ee:	d014      	beq.n	8103a1a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 81039f0:	68fb      	ldr	r3, [r7, #12]
 81039f2:	f003 0320 	and.w	r3, r3, #32
 81039f6:	2b00      	cmp	r3, #0
 81039f8:	d00f      	beq.n	8103a1a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81039fa:	687b      	ldr	r3, [r7, #4]
 81039fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103a00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8103a0a:	687b      	ldr	r3, [r7, #4]
 8103a0c:	681b      	ldr	r3, [r3, #0]
 8103a0e:	699a      	ldr	r2, [r3, #24]
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	681b      	ldr	r3, [r3, #0]
 8103a14:	f042 0220 	orr.w	r2, r2, #32
 8103a18:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8103a1a:	687b      	ldr	r3, [r7, #4]
 8103a1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8103a20:	b2db      	uxtb	r3, r3
 8103a22:	2b03      	cmp	r3, #3
 8103a24:	d014      	beq.n	8103a50 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8103a26:	68fb      	ldr	r3, [r7, #12]
 8103a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103a2c:	2b00      	cmp	r3, #0
 8103a2e:	d00f      	beq.n	8103a50 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103a36:	f043 0204 	orr.w	r2, r3, #4
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8103a40:	687b      	ldr	r3, [r7, #4]
 8103a42:	681b      	ldr	r3, [r3, #0]
 8103a44:	699a      	ldr	r2, [r3, #24]
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	681b      	ldr	r3, [r3, #0]
 8103a4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8103a4e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8103a50:	68fb      	ldr	r3, [r7, #12]
 8103a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8103a56:	2b00      	cmp	r3, #0
 8103a58:	d00f      	beq.n	8103a7a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103a60:	f043 0201 	orr.w	r2, r3, #1
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	681b      	ldr	r3, [r3, #0]
 8103a6e:	699a      	ldr	r2, [r3, #24]
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	681b      	ldr	r3, [r3, #0]
 8103a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103a78:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8103a7a:	68fb      	ldr	r3, [r7, #12]
 8103a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103a80:	2b00      	cmp	r3, #0
 8103a82:	d00f      	beq.n	8103aa4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103a8a:	f043 0208 	orr.w	r2, r3, #8
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	681b      	ldr	r3, [r3, #0]
 8103a98:	699a      	ldr	r2, [r3, #24]
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	681b      	ldr	r3, [r3, #0]
 8103a9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103aa2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8103aa4:	687b      	ldr	r3, [r7, #4]
 8103aa6:	2200      	movs	r2, #0
 8103aa8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	2200      	movs	r2, #0
 8103ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8103ab4:	bf00      	nop
 8103ab6:	3714      	adds	r7, #20
 8103ab8:	46bd      	mov	sp, r7
 8103aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103abe:	4770      	bx	lr

08103ac0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8103ac0:	b480      	push	{r7}
 8103ac2:	b085      	sub	sp, #20
 8103ac4:	af00      	add	r7, sp, #0
 8103ac6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103acc:	095b      	lsrs	r3, r3, #5
 8103ace:	3301      	adds	r3, #1
 8103ad0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	68db      	ldr	r3, [r3, #12]
 8103ad6:	3301      	adds	r3, #1
 8103ad8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8103ada:	68bb      	ldr	r3, [r7, #8]
 8103adc:	3307      	adds	r3, #7
 8103ade:	08db      	lsrs	r3, r3, #3
 8103ae0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8103ae2:	68bb      	ldr	r3, [r7, #8]
 8103ae4:	68fa      	ldr	r2, [r7, #12]
 8103ae6:	fb02 f303 	mul.w	r3, r2, r3
}
 8103aea:	4618      	mov	r0, r3
 8103aec:	3714      	adds	r7, #20
 8103aee:	46bd      	mov	sp, r7
 8103af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103af4:	4770      	bx	lr

08103af6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8103af6:	b580      	push	{r7, lr}
 8103af8:	b082      	sub	sp, #8
 8103afa:	af00      	add	r7, sp, #0
 8103afc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	2b00      	cmp	r3, #0
 8103b02:	d101      	bne.n	8103b08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8103b04:	2301      	movs	r3, #1
 8103b06:	e049      	b.n	8103b9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103b08:	687b      	ldr	r3, [r7, #4]
 8103b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8103b0e:	b2db      	uxtb	r3, r3
 8103b10:	2b00      	cmp	r3, #0
 8103b12:	d106      	bne.n	8103b22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103b14:	687b      	ldr	r3, [r7, #4]
 8103b16:	2200      	movs	r2, #0
 8103b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8103b1c:	6878      	ldr	r0, [r7, #4]
 8103b1e:	f7fc fe77 	bl	8100810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	2202      	movs	r2, #2
 8103b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103b2a:	687b      	ldr	r3, [r7, #4]
 8103b2c:	681a      	ldr	r2, [r3, #0]
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	3304      	adds	r3, #4
 8103b32:	4619      	mov	r1, r3
 8103b34:	4610      	mov	r0, r2
 8103b36:	f000 fad5 	bl	81040e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103b3a:	687b      	ldr	r3, [r7, #4]
 8103b3c:	2201      	movs	r2, #1
 8103b3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	2201      	movs	r2, #1
 8103b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	2201      	movs	r2, #1
 8103b4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8103b52:	687b      	ldr	r3, [r7, #4]
 8103b54:	2201      	movs	r2, #1
 8103b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8103b5a:	687b      	ldr	r3, [r7, #4]
 8103b5c:	2201      	movs	r2, #1
 8103b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8103b62:	687b      	ldr	r3, [r7, #4]
 8103b64:	2201      	movs	r2, #1
 8103b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8103b6a:	687b      	ldr	r3, [r7, #4]
 8103b6c:	2201      	movs	r2, #1
 8103b6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	2201      	movs	r2, #1
 8103b76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	2201      	movs	r2, #1
 8103b7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8103b82:	687b      	ldr	r3, [r7, #4]
 8103b84:	2201      	movs	r2, #1
 8103b86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	2201      	movs	r2, #1
 8103b8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	2201      	movs	r2, #1
 8103b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8103b9a:	2300      	movs	r3, #0
}
 8103b9c:	4618      	mov	r0, r3
 8103b9e:	3708      	adds	r7, #8
 8103ba0:	46bd      	mov	sp, r7
 8103ba2:	bd80      	pop	{r7, pc}

08103ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8103ba4:	b480      	push	{r7}
 8103ba6:	b085      	sub	sp, #20
 8103ba8:	af00      	add	r7, sp, #0
 8103baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8103bac:	687b      	ldr	r3, [r7, #4]
 8103bae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8103bb2:	b2db      	uxtb	r3, r3
 8103bb4:	2b01      	cmp	r3, #1
 8103bb6:	d001      	beq.n	8103bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8103bb8:	2301      	movs	r3, #1
 8103bba:	e054      	b.n	8103c66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	2202      	movs	r2, #2
 8103bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	68da      	ldr	r2, [r3, #12]
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	681b      	ldr	r3, [r3, #0]
 8103bce:	f042 0201 	orr.w	r2, r2, #1
 8103bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	681b      	ldr	r3, [r3, #0]
 8103bd8:	4a26      	ldr	r2, [pc, #152]	@ (8103c74 <HAL_TIM_Base_Start_IT+0xd0>)
 8103bda:	4293      	cmp	r3, r2
 8103bdc:	d022      	beq.n	8103c24 <HAL_TIM_Base_Start_IT+0x80>
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	681b      	ldr	r3, [r3, #0]
 8103be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103be6:	d01d      	beq.n	8103c24 <HAL_TIM_Base_Start_IT+0x80>
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	681b      	ldr	r3, [r3, #0]
 8103bec:	4a22      	ldr	r2, [pc, #136]	@ (8103c78 <HAL_TIM_Base_Start_IT+0xd4>)
 8103bee:	4293      	cmp	r3, r2
 8103bf0:	d018      	beq.n	8103c24 <HAL_TIM_Base_Start_IT+0x80>
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	4a21      	ldr	r2, [pc, #132]	@ (8103c7c <HAL_TIM_Base_Start_IT+0xd8>)
 8103bf8:	4293      	cmp	r3, r2
 8103bfa:	d013      	beq.n	8103c24 <HAL_TIM_Base_Start_IT+0x80>
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	681b      	ldr	r3, [r3, #0]
 8103c00:	4a1f      	ldr	r2, [pc, #124]	@ (8103c80 <HAL_TIM_Base_Start_IT+0xdc>)
 8103c02:	4293      	cmp	r3, r2
 8103c04:	d00e      	beq.n	8103c24 <HAL_TIM_Base_Start_IT+0x80>
 8103c06:	687b      	ldr	r3, [r7, #4]
 8103c08:	681b      	ldr	r3, [r3, #0]
 8103c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8103c84 <HAL_TIM_Base_Start_IT+0xe0>)
 8103c0c:	4293      	cmp	r3, r2
 8103c0e:	d009      	beq.n	8103c24 <HAL_TIM_Base_Start_IT+0x80>
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	681b      	ldr	r3, [r3, #0]
 8103c14:	4a1c      	ldr	r2, [pc, #112]	@ (8103c88 <HAL_TIM_Base_Start_IT+0xe4>)
 8103c16:	4293      	cmp	r3, r2
 8103c18:	d004      	beq.n	8103c24 <HAL_TIM_Base_Start_IT+0x80>
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	681b      	ldr	r3, [r3, #0]
 8103c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8103c8c <HAL_TIM_Base_Start_IT+0xe8>)
 8103c20:	4293      	cmp	r3, r2
 8103c22:	d115      	bne.n	8103c50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	689a      	ldr	r2, [r3, #8]
 8103c2a:	4b19      	ldr	r3, [pc, #100]	@ (8103c90 <HAL_TIM_Base_Start_IT+0xec>)
 8103c2c:	4013      	ands	r3, r2
 8103c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103c30:	68fb      	ldr	r3, [r7, #12]
 8103c32:	2b06      	cmp	r3, #6
 8103c34:	d015      	beq.n	8103c62 <HAL_TIM_Base_Start_IT+0xbe>
 8103c36:	68fb      	ldr	r3, [r7, #12]
 8103c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103c3c:	d011      	beq.n	8103c62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	681b      	ldr	r3, [r3, #0]
 8103c42:	681a      	ldr	r2, [r3, #0]
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	681b      	ldr	r3, [r3, #0]
 8103c48:	f042 0201 	orr.w	r2, r2, #1
 8103c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103c4e:	e008      	b.n	8103c62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	681b      	ldr	r3, [r3, #0]
 8103c54:	681a      	ldr	r2, [r3, #0]
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	681b      	ldr	r3, [r3, #0]
 8103c5a:	f042 0201 	orr.w	r2, r2, #1
 8103c5e:	601a      	str	r2, [r3, #0]
 8103c60:	e000      	b.n	8103c64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103c62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8103c64:	2300      	movs	r3, #0
}
 8103c66:	4618      	mov	r0, r3
 8103c68:	3714      	adds	r7, #20
 8103c6a:	46bd      	mov	sp, r7
 8103c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c70:	4770      	bx	lr
 8103c72:	bf00      	nop
 8103c74:	40010000 	.word	0x40010000
 8103c78:	40000400 	.word	0x40000400
 8103c7c:	40000800 	.word	0x40000800
 8103c80:	40000c00 	.word	0x40000c00
 8103c84:	40010400 	.word	0x40010400
 8103c88:	40001800 	.word	0x40001800
 8103c8c:	40014000 	.word	0x40014000
 8103c90:	00010007 	.word	0x00010007

08103c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8103c94:	b580      	push	{r7, lr}
 8103c96:	b084      	sub	sp, #16
 8103c98:	af00      	add	r7, sp, #0
 8103c9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8103c9c:	687b      	ldr	r3, [r7, #4]
 8103c9e:	681b      	ldr	r3, [r3, #0]
 8103ca0:	68db      	ldr	r3, [r3, #12]
 8103ca2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	691b      	ldr	r3, [r3, #16]
 8103caa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8103cac:	68bb      	ldr	r3, [r7, #8]
 8103cae:	f003 0302 	and.w	r3, r3, #2
 8103cb2:	2b00      	cmp	r3, #0
 8103cb4:	d020      	beq.n	8103cf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8103cb6:	68fb      	ldr	r3, [r7, #12]
 8103cb8:	f003 0302 	and.w	r3, r3, #2
 8103cbc:	2b00      	cmp	r3, #0
 8103cbe:	d01b      	beq.n	8103cf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	681b      	ldr	r3, [r3, #0]
 8103cc4:	f06f 0202 	mvn.w	r2, #2
 8103cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	2201      	movs	r2, #1
 8103cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	681b      	ldr	r3, [r3, #0]
 8103cd4:	699b      	ldr	r3, [r3, #24]
 8103cd6:	f003 0303 	and.w	r3, r3, #3
 8103cda:	2b00      	cmp	r3, #0
 8103cdc:	d003      	beq.n	8103ce6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8103cde:	6878      	ldr	r0, [r7, #4]
 8103ce0:	f000 f9e2 	bl	81040a8 <HAL_TIM_IC_CaptureCallback>
 8103ce4:	e005      	b.n	8103cf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8103ce6:	6878      	ldr	r0, [r7, #4]
 8103ce8:	f000 f9d4 	bl	8104094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103cec:	6878      	ldr	r0, [r7, #4]
 8103cee:	f000 f9e5 	bl	81040bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	2200      	movs	r2, #0
 8103cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8103cf8:	68bb      	ldr	r3, [r7, #8]
 8103cfa:	f003 0304 	and.w	r3, r3, #4
 8103cfe:	2b00      	cmp	r3, #0
 8103d00:	d020      	beq.n	8103d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8103d02:	68fb      	ldr	r3, [r7, #12]
 8103d04:	f003 0304 	and.w	r3, r3, #4
 8103d08:	2b00      	cmp	r3, #0
 8103d0a:	d01b      	beq.n	8103d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8103d0c:	687b      	ldr	r3, [r7, #4]
 8103d0e:	681b      	ldr	r3, [r3, #0]
 8103d10:	f06f 0204 	mvn.w	r2, #4
 8103d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8103d16:	687b      	ldr	r3, [r7, #4]
 8103d18:	2202      	movs	r2, #2
 8103d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	681b      	ldr	r3, [r3, #0]
 8103d20:	699b      	ldr	r3, [r3, #24]
 8103d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103d26:	2b00      	cmp	r3, #0
 8103d28:	d003      	beq.n	8103d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103d2a:	6878      	ldr	r0, [r7, #4]
 8103d2c:	f000 f9bc 	bl	81040a8 <HAL_TIM_IC_CaptureCallback>
 8103d30:	e005      	b.n	8103d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103d32:	6878      	ldr	r0, [r7, #4]
 8103d34:	f000 f9ae 	bl	8104094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103d38:	6878      	ldr	r0, [r7, #4]
 8103d3a:	f000 f9bf 	bl	81040bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	2200      	movs	r2, #0
 8103d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8103d44:	68bb      	ldr	r3, [r7, #8]
 8103d46:	f003 0308 	and.w	r3, r3, #8
 8103d4a:	2b00      	cmp	r3, #0
 8103d4c:	d020      	beq.n	8103d90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8103d4e:	68fb      	ldr	r3, [r7, #12]
 8103d50:	f003 0308 	and.w	r3, r3, #8
 8103d54:	2b00      	cmp	r3, #0
 8103d56:	d01b      	beq.n	8103d90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	f06f 0208 	mvn.w	r2, #8
 8103d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	2204      	movs	r2, #4
 8103d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8103d68:	687b      	ldr	r3, [r7, #4]
 8103d6a:	681b      	ldr	r3, [r3, #0]
 8103d6c:	69db      	ldr	r3, [r3, #28]
 8103d6e:	f003 0303 	and.w	r3, r3, #3
 8103d72:	2b00      	cmp	r3, #0
 8103d74:	d003      	beq.n	8103d7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103d76:	6878      	ldr	r0, [r7, #4]
 8103d78:	f000 f996 	bl	81040a8 <HAL_TIM_IC_CaptureCallback>
 8103d7c:	e005      	b.n	8103d8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103d7e:	6878      	ldr	r0, [r7, #4]
 8103d80:	f000 f988 	bl	8104094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103d84:	6878      	ldr	r0, [r7, #4]
 8103d86:	f000 f999 	bl	81040bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103d8a:	687b      	ldr	r3, [r7, #4]
 8103d8c:	2200      	movs	r2, #0
 8103d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8103d90:	68bb      	ldr	r3, [r7, #8]
 8103d92:	f003 0310 	and.w	r3, r3, #16
 8103d96:	2b00      	cmp	r3, #0
 8103d98:	d020      	beq.n	8103ddc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8103d9a:	68fb      	ldr	r3, [r7, #12]
 8103d9c:	f003 0310 	and.w	r3, r3, #16
 8103da0:	2b00      	cmp	r3, #0
 8103da2:	d01b      	beq.n	8103ddc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8103da4:	687b      	ldr	r3, [r7, #4]
 8103da6:	681b      	ldr	r3, [r3, #0]
 8103da8:	f06f 0210 	mvn.w	r2, #16
 8103dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	2208      	movs	r2, #8
 8103db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	681b      	ldr	r3, [r3, #0]
 8103db8:	69db      	ldr	r3, [r3, #28]
 8103dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103dbe:	2b00      	cmp	r3, #0
 8103dc0:	d003      	beq.n	8103dca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103dc2:	6878      	ldr	r0, [r7, #4]
 8103dc4:	f000 f970 	bl	81040a8 <HAL_TIM_IC_CaptureCallback>
 8103dc8:	e005      	b.n	8103dd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103dca:	6878      	ldr	r0, [r7, #4]
 8103dcc:	f000 f962 	bl	8104094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103dd0:	6878      	ldr	r0, [r7, #4]
 8103dd2:	f000 f973 	bl	81040bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	2200      	movs	r2, #0
 8103dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8103ddc:	68bb      	ldr	r3, [r7, #8]
 8103dde:	f003 0301 	and.w	r3, r3, #1
 8103de2:	2b00      	cmp	r3, #0
 8103de4:	d00c      	beq.n	8103e00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8103de6:	68fb      	ldr	r3, [r7, #12]
 8103de8:	f003 0301 	and.w	r3, r3, #1
 8103dec:	2b00      	cmp	r3, #0
 8103dee:	d007      	beq.n	8103e00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8103df0:	687b      	ldr	r3, [r7, #4]
 8103df2:	681b      	ldr	r3, [r3, #0]
 8103df4:	f06f 0201 	mvn.w	r2, #1
 8103df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8103dfa:	6878      	ldr	r0, [r7, #4]
 8103dfc:	f7fc fbea 	bl	81005d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8103e00:	68bb      	ldr	r3, [r7, #8]
 8103e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103e06:	2b00      	cmp	r3, #0
 8103e08:	d104      	bne.n	8103e14 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8103e0a:	68bb      	ldr	r3, [r7, #8]
 8103e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8103e10:	2b00      	cmp	r3, #0
 8103e12:	d00c      	beq.n	8103e2e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8103e14:	68fb      	ldr	r3, [r7, #12]
 8103e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103e1a:	2b00      	cmp	r3, #0
 8103e1c:	d007      	beq.n	8103e2e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	681b      	ldr	r3, [r3, #0]
 8103e22:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8103e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8103e28:	6878      	ldr	r0, [r7, #4]
 8103e2a:	f000 fb2f 	bl	810448c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8103e2e:	68bb      	ldr	r3, [r7, #8]
 8103e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103e34:	2b00      	cmp	r3, #0
 8103e36:	d00c      	beq.n	8103e52 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8103e38:	68fb      	ldr	r3, [r7, #12]
 8103e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103e3e:	2b00      	cmp	r3, #0
 8103e40:	d007      	beq.n	8103e52 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	681b      	ldr	r3, [r3, #0]
 8103e46:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8103e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8103e4c:	6878      	ldr	r0, [r7, #4]
 8103e4e:	f000 fb27 	bl	81044a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8103e52:	68bb      	ldr	r3, [r7, #8]
 8103e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103e58:	2b00      	cmp	r3, #0
 8103e5a:	d00c      	beq.n	8103e76 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103e62:	2b00      	cmp	r3, #0
 8103e64:	d007      	beq.n	8103e76 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8103e66:	687b      	ldr	r3, [r7, #4]
 8103e68:	681b      	ldr	r3, [r3, #0]
 8103e6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8103e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8103e70:	6878      	ldr	r0, [r7, #4]
 8103e72:	f000 f92d 	bl	81040d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8103e76:	68bb      	ldr	r3, [r7, #8]
 8103e78:	f003 0320 	and.w	r3, r3, #32
 8103e7c:	2b00      	cmp	r3, #0
 8103e7e:	d00c      	beq.n	8103e9a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8103e80:	68fb      	ldr	r3, [r7, #12]
 8103e82:	f003 0320 	and.w	r3, r3, #32
 8103e86:	2b00      	cmp	r3, #0
 8103e88:	d007      	beq.n	8103e9a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	681b      	ldr	r3, [r3, #0]
 8103e8e:	f06f 0220 	mvn.w	r2, #32
 8103e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8103e94:	6878      	ldr	r0, [r7, #4]
 8103e96:	f000 faef 	bl	8104478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8103e9a:	bf00      	nop
 8103e9c:	3710      	adds	r7, #16
 8103e9e:	46bd      	mov	sp, r7
 8103ea0:	bd80      	pop	{r7, pc}
	...

08103ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8103ea4:	b580      	push	{r7, lr}
 8103ea6:	b084      	sub	sp, #16
 8103ea8:	af00      	add	r7, sp, #0
 8103eaa:	6078      	str	r0, [r7, #4]
 8103eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8103eae:	2300      	movs	r3, #0
 8103eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8103eb2:	687b      	ldr	r3, [r7, #4]
 8103eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8103eb8:	2b01      	cmp	r3, #1
 8103eba:	d101      	bne.n	8103ec0 <HAL_TIM_ConfigClockSource+0x1c>
 8103ebc:	2302      	movs	r3, #2
 8103ebe:	e0de      	b.n	810407e <HAL_TIM_ConfigClockSource+0x1da>
 8103ec0:	687b      	ldr	r3, [r7, #4]
 8103ec2:	2201      	movs	r2, #1
 8103ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	2202      	movs	r2, #2
 8103ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8103ed0:	687b      	ldr	r3, [r7, #4]
 8103ed2:	681b      	ldr	r3, [r3, #0]
 8103ed4:	689b      	ldr	r3, [r3, #8]
 8103ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8103ed8:	68bb      	ldr	r3, [r7, #8]
 8103eda:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8103ede:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8103ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8103ee4:	68bb      	ldr	r3, [r7, #8]
 8103ee6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8103eec:	687b      	ldr	r3, [r7, #4]
 8103eee:	681b      	ldr	r3, [r3, #0]
 8103ef0:	68ba      	ldr	r2, [r7, #8]
 8103ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8103ef4:	683b      	ldr	r3, [r7, #0]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	4a63      	ldr	r2, [pc, #396]	@ (8104088 <HAL_TIM_ConfigClockSource+0x1e4>)
 8103efa:	4293      	cmp	r3, r2
 8103efc:	f000 80a9 	beq.w	8104052 <HAL_TIM_ConfigClockSource+0x1ae>
 8103f00:	4a61      	ldr	r2, [pc, #388]	@ (8104088 <HAL_TIM_ConfigClockSource+0x1e4>)
 8103f02:	4293      	cmp	r3, r2
 8103f04:	f200 80ae 	bhi.w	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f08:	4a60      	ldr	r2, [pc, #384]	@ (810408c <HAL_TIM_ConfigClockSource+0x1e8>)
 8103f0a:	4293      	cmp	r3, r2
 8103f0c:	f000 80a1 	beq.w	8104052 <HAL_TIM_ConfigClockSource+0x1ae>
 8103f10:	4a5e      	ldr	r2, [pc, #376]	@ (810408c <HAL_TIM_ConfigClockSource+0x1e8>)
 8103f12:	4293      	cmp	r3, r2
 8103f14:	f200 80a6 	bhi.w	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f18:	4a5d      	ldr	r2, [pc, #372]	@ (8104090 <HAL_TIM_ConfigClockSource+0x1ec>)
 8103f1a:	4293      	cmp	r3, r2
 8103f1c:	f000 8099 	beq.w	8104052 <HAL_TIM_ConfigClockSource+0x1ae>
 8103f20:	4a5b      	ldr	r2, [pc, #364]	@ (8104090 <HAL_TIM_ConfigClockSource+0x1ec>)
 8103f22:	4293      	cmp	r3, r2
 8103f24:	f200 809e 	bhi.w	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8103f2c:	f000 8091 	beq.w	8104052 <HAL_TIM_ConfigClockSource+0x1ae>
 8103f30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8103f34:	f200 8096 	bhi.w	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103f3c:	f000 8089 	beq.w	8104052 <HAL_TIM_ConfigClockSource+0x1ae>
 8103f40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103f44:	f200 808e 	bhi.w	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103f4c:	d03e      	beq.n	8103fcc <HAL_TIM_ConfigClockSource+0x128>
 8103f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103f52:	f200 8087 	bhi.w	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103f5a:	f000 8086 	beq.w	810406a <HAL_TIM_ConfigClockSource+0x1c6>
 8103f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103f62:	d87f      	bhi.n	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f64:	2b70      	cmp	r3, #112	@ 0x70
 8103f66:	d01a      	beq.n	8103f9e <HAL_TIM_ConfigClockSource+0xfa>
 8103f68:	2b70      	cmp	r3, #112	@ 0x70
 8103f6a:	d87b      	bhi.n	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f6c:	2b60      	cmp	r3, #96	@ 0x60
 8103f6e:	d050      	beq.n	8104012 <HAL_TIM_ConfigClockSource+0x16e>
 8103f70:	2b60      	cmp	r3, #96	@ 0x60
 8103f72:	d877      	bhi.n	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f74:	2b50      	cmp	r3, #80	@ 0x50
 8103f76:	d03c      	beq.n	8103ff2 <HAL_TIM_ConfigClockSource+0x14e>
 8103f78:	2b50      	cmp	r3, #80	@ 0x50
 8103f7a:	d873      	bhi.n	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f7c:	2b40      	cmp	r3, #64	@ 0x40
 8103f7e:	d058      	beq.n	8104032 <HAL_TIM_ConfigClockSource+0x18e>
 8103f80:	2b40      	cmp	r3, #64	@ 0x40
 8103f82:	d86f      	bhi.n	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f84:	2b30      	cmp	r3, #48	@ 0x30
 8103f86:	d064      	beq.n	8104052 <HAL_TIM_ConfigClockSource+0x1ae>
 8103f88:	2b30      	cmp	r3, #48	@ 0x30
 8103f8a:	d86b      	bhi.n	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f8c:	2b20      	cmp	r3, #32
 8103f8e:	d060      	beq.n	8104052 <HAL_TIM_ConfigClockSource+0x1ae>
 8103f90:	2b20      	cmp	r3, #32
 8103f92:	d867      	bhi.n	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
 8103f94:	2b00      	cmp	r3, #0
 8103f96:	d05c      	beq.n	8104052 <HAL_TIM_ConfigClockSource+0x1ae>
 8103f98:	2b10      	cmp	r3, #16
 8103f9a:	d05a      	beq.n	8104052 <HAL_TIM_ConfigClockSource+0x1ae>
 8103f9c:	e062      	b.n	8104064 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8103fa2:	683b      	ldr	r3, [r7, #0]
 8103fa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8103fa6:	683b      	ldr	r3, [r7, #0]
 8103fa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8103faa:	683b      	ldr	r3, [r7, #0]
 8103fac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8103fae:	f000 f9b5 	bl	810431c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	681b      	ldr	r3, [r3, #0]
 8103fb6:	689b      	ldr	r3, [r3, #8]
 8103fb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8103fba:	68bb      	ldr	r3, [r7, #8]
 8103fbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8103fc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8103fc2:	687b      	ldr	r3, [r7, #4]
 8103fc4:	681b      	ldr	r3, [r3, #0]
 8103fc6:	68ba      	ldr	r2, [r7, #8]
 8103fc8:	609a      	str	r2, [r3, #8]
      break;
 8103fca:	e04f      	b.n	810406c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8103fd0:	683b      	ldr	r3, [r7, #0]
 8103fd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8103fd4:	683b      	ldr	r3, [r7, #0]
 8103fd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8103fd8:	683b      	ldr	r3, [r7, #0]
 8103fda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8103fdc:	f000 f99e 	bl	810431c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8103fe0:	687b      	ldr	r3, [r7, #4]
 8103fe2:	681b      	ldr	r3, [r3, #0]
 8103fe4:	689a      	ldr	r2, [r3, #8]
 8103fe6:	687b      	ldr	r3, [r7, #4]
 8103fe8:	681b      	ldr	r3, [r3, #0]
 8103fea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8103fee:	609a      	str	r2, [r3, #8]
      break;
 8103ff0:	e03c      	b.n	810406c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8103ff6:	683b      	ldr	r3, [r7, #0]
 8103ff8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8103ffa:	683b      	ldr	r3, [r7, #0]
 8103ffc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8103ffe:	461a      	mov	r2, r3
 8104000:	f000 f910 	bl	8104224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8104004:	687b      	ldr	r3, [r7, #4]
 8104006:	681b      	ldr	r3, [r3, #0]
 8104008:	2150      	movs	r1, #80	@ 0x50
 810400a:	4618      	mov	r0, r3
 810400c:	f000 f969 	bl	81042e2 <TIM_ITRx_SetConfig>
      break;
 8104010:	e02c      	b.n	810406c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8104012:	687b      	ldr	r3, [r7, #4]
 8104014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8104016:	683b      	ldr	r3, [r7, #0]
 8104018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810401a:	683b      	ldr	r3, [r7, #0]
 810401c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810401e:	461a      	mov	r2, r3
 8104020:	f000 f92f 	bl	8104282 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	2160      	movs	r1, #96	@ 0x60
 810402a:	4618      	mov	r0, r3
 810402c:	f000 f959 	bl	81042e2 <TIM_ITRx_SetConfig>
      break;
 8104030:	e01c      	b.n	810406c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8104036:	683b      	ldr	r3, [r7, #0]
 8104038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810403a:	683b      	ldr	r3, [r7, #0]
 810403c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810403e:	461a      	mov	r2, r3
 8104040:	f000 f8f0 	bl	8104224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8104044:	687b      	ldr	r3, [r7, #4]
 8104046:	681b      	ldr	r3, [r3, #0]
 8104048:	2140      	movs	r1, #64	@ 0x40
 810404a:	4618      	mov	r0, r3
 810404c:	f000 f949 	bl	81042e2 <TIM_ITRx_SetConfig>
      break;
 8104050:	e00c      	b.n	810406c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8104052:	687b      	ldr	r3, [r7, #4]
 8104054:	681a      	ldr	r2, [r3, #0]
 8104056:	683b      	ldr	r3, [r7, #0]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	4619      	mov	r1, r3
 810405c:	4610      	mov	r0, r2
 810405e:	f000 f940 	bl	81042e2 <TIM_ITRx_SetConfig>
      break;
 8104062:	e003      	b.n	810406c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8104064:	2301      	movs	r3, #1
 8104066:	73fb      	strb	r3, [r7, #15]
      break;
 8104068:	e000      	b.n	810406c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810406a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	2201      	movs	r2, #1
 8104070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8104074:	687b      	ldr	r3, [r7, #4]
 8104076:	2200      	movs	r2, #0
 8104078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810407c:	7bfb      	ldrb	r3, [r7, #15]
}
 810407e:	4618      	mov	r0, r3
 8104080:	3710      	adds	r7, #16
 8104082:	46bd      	mov	sp, r7
 8104084:	bd80      	pop	{r7, pc}
 8104086:	bf00      	nop
 8104088:	00100040 	.word	0x00100040
 810408c:	00100030 	.word	0x00100030
 8104090:	00100020 	.word	0x00100020

08104094 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8104094:	b480      	push	{r7}
 8104096:	b083      	sub	sp, #12
 8104098:	af00      	add	r7, sp, #0
 810409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810409c:	bf00      	nop
 810409e:	370c      	adds	r7, #12
 81040a0:	46bd      	mov	sp, r7
 81040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040a6:	4770      	bx	lr

081040a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81040a8:	b480      	push	{r7}
 81040aa:	b083      	sub	sp, #12
 81040ac:	af00      	add	r7, sp, #0
 81040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81040b0:	bf00      	nop
 81040b2:	370c      	adds	r7, #12
 81040b4:	46bd      	mov	sp, r7
 81040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040ba:	4770      	bx	lr

081040bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81040bc:	b480      	push	{r7}
 81040be:	b083      	sub	sp, #12
 81040c0:	af00      	add	r7, sp, #0
 81040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81040c4:	bf00      	nop
 81040c6:	370c      	adds	r7, #12
 81040c8:	46bd      	mov	sp, r7
 81040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040ce:	4770      	bx	lr

081040d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81040d0:	b480      	push	{r7}
 81040d2:	b083      	sub	sp, #12
 81040d4:	af00      	add	r7, sp, #0
 81040d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81040d8:	bf00      	nop
 81040da:	370c      	adds	r7, #12
 81040dc:	46bd      	mov	sp, r7
 81040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040e2:	4770      	bx	lr

081040e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81040e4:	b480      	push	{r7}
 81040e6:	b085      	sub	sp, #20
 81040e8:	af00      	add	r7, sp, #0
 81040ea:	6078      	str	r0, [r7, #4]
 81040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81040ee:	687b      	ldr	r3, [r7, #4]
 81040f0:	681b      	ldr	r3, [r3, #0]
 81040f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81040f4:	687b      	ldr	r3, [r7, #4]
 81040f6:	4a43      	ldr	r2, [pc, #268]	@ (8104204 <TIM_Base_SetConfig+0x120>)
 81040f8:	4293      	cmp	r3, r2
 81040fa:	d013      	beq.n	8104124 <TIM_Base_SetConfig+0x40>
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104102:	d00f      	beq.n	8104124 <TIM_Base_SetConfig+0x40>
 8104104:	687b      	ldr	r3, [r7, #4]
 8104106:	4a40      	ldr	r2, [pc, #256]	@ (8104208 <TIM_Base_SetConfig+0x124>)
 8104108:	4293      	cmp	r3, r2
 810410a:	d00b      	beq.n	8104124 <TIM_Base_SetConfig+0x40>
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	4a3f      	ldr	r2, [pc, #252]	@ (810420c <TIM_Base_SetConfig+0x128>)
 8104110:	4293      	cmp	r3, r2
 8104112:	d007      	beq.n	8104124 <TIM_Base_SetConfig+0x40>
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	4a3e      	ldr	r2, [pc, #248]	@ (8104210 <TIM_Base_SetConfig+0x12c>)
 8104118:	4293      	cmp	r3, r2
 810411a:	d003      	beq.n	8104124 <TIM_Base_SetConfig+0x40>
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	4a3d      	ldr	r2, [pc, #244]	@ (8104214 <TIM_Base_SetConfig+0x130>)
 8104120:	4293      	cmp	r3, r2
 8104122:	d108      	bne.n	8104136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8104124:	68fb      	ldr	r3, [r7, #12]
 8104126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810412a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810412c:	683b      	ldr	r3, [r7, #0]
 810412e:	685b      	ldr	r3, [r3, #4]
 8104130:	68fa      	ldr	r2, [r7, #12]
 8104132:	4313      	orrs	r3, r2
 8104134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8104136:	687b      	ldr	r3, [r7, #4]
 8104138:	4a32      	ldr	r2, [pc, #200]	@ (8104204 <TIM_Base_SetConfig+0x120>)
 810413a:	4293      	cmp	r3, r2
 810413c:	d01f      	beq.n	810417e <TIM_Base_SetConfig+0x9a>
 810413e:	687b      	ldr	r3, [r7, #4]
 8104140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104144:	d01b      	beq.n	810417e <TIM_Base_SetConfig+0x9a>
 8104146:	687b      	ldr	r3, [r7, #4]
 8104148:	4a2f      	ldr	r2, [pc, #188]	@ (8104208 <TIM_Base_SetConfig+0x124>)
 810414a:	4293      	cmp	r3, r2
 810414c:	d017      	beq.n	810417e <TIM_Base_SetConfig+0x9a>
 810414e:	687b      	ldr	r3, [r7, #4]
 8104150:	4a2e      	ldr	r2, [pc, #184]	@ (810420c <TIM_Base_SetConfig+0x128>)
 8104152:	4293      	cmp	r3, r2
 8104154:	d013      	beq.n	810417e <TIM_Base_SetConfig+0x9a>
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	4a2d      	ldr	r2, [pc, #180]	@ (8104210 <TIM_Base_SetConfig+0x12c>)
 810415a:	4293      	cmp	r3, r2
 810415c:	d00f      	beq.n	810417e <TIM_Base_SetConfig+0x9a>
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	4a2c      	ldr	r2, [pc, #176]	@ (8104214 <TIM_Base_SetConfig+0x130>)
 8104162:	4293      	cmp	r3, r2
 8104164:	d00b      	beq.n	810417e <TIM_Base_SetConfig+0x9a>
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	4a2b      	ldr	r2, [pc, #172]	@ (8104218 <TIM_Base_SetConfig+0x134>)
 810416a:	4293      	cmp	r3, r2
 810416c:	d007      	beq.n	810417e <TIM_Base_SetConfig+0x9a>
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	4a2a      	ldr	r2, [pc, #168]	@ (810421c <TIM_Base_SetConfig+0x138>)
 8104172:	4293      	cmp	r3, r2
 8104174:	d003      	beq.n	810417e <TIM_Base_SetConfig+0x9a>
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	4a29      	ldr	r2, [pc, #164]	@ (8104220 <TIM_Base_SetConfig+0x13c>)
 810417a:	4293      	cmp	r3, r2
 810417c:	d108      	bne.n	8104190 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810417e:	68fb      	ldr	r3, [r7, #12]
 8104180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8104184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8104186:	683b      	ldr	r3, [r7, #0]
 8104188:	68db      	ldr	r3, [r3, #12]
 810418a:	68fa      	ldr	r2, [r7, #12]
 810418c:	4313      	orrs	r3, r2
 810418e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8104196:	683b      	ldr	r3, [r7, #0]
 8104198:	695b      	ldr	r3, [r3, #20]
 810419a:	4313      	orrs	r3, r2
 810419c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810419e:	683b      	ldr	r3, [r7, #0]
 81041a0:	689a      	ldr	r2, [r3, #8]
 81041a2:	687b      	ldr	r3, [r7, #4]
 81041a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81041a6:	683b      	ldr	r3, [r7, #0]
 81041a8:	681a      	ldr	r2, [r3, #0]
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81041ae:	687b      	ldr	r3, [r7, #4]
 81041b0:	4a14      	ldr	r2, [pc, #80]	@ (8104204 <TIM_Base_SetConfig+0x120>)
 81041b2:	4293      	cmp	r3, r2
 81041b4:	d00f      	beq.n	81041d6 <TIM_Base_SetConfig+0xf2>
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	4a16      	ldr	r2, [pc, #88]	@ (8104214 <TIM_Base_SetConfig+0x130>)
 81041ba:	4293      	cmp	r3, r2
 81041bc:	d00b      	beq.n	81041d6 <TIM_Base_SetConfig+0xf2>
 81041be:	687b      	ldr	r3, [r7, #4]
 81041c0:	4a15      	ldr	r2, [pc, #84]	@ (8104218 <TIM_Base_SetConfig+0x134>)
 81041c2:	4293      	cmp	r3, r2
 81041c4:	d007      	beq.n	81041d6 <TIM_Base_SetConfig+0xf2>
 81041c6:	687b      	ldr	r3, [r7, #4]
 81041c8:	4a14      	ldr	r2, [pc, #80]	@ (810421c <TIM_Base_SetConfig+0x138>)
 81041ca:	4293      	cmp	r3, r2
 81041cc:	d003      	beq.n	81041d6 <TIM_Base_SetConfig+0xf2>
 81041ce:	687b      	ldr	r3, [r7, #4]
 81041d0:	4a13      	ldr	r2, [pc, #76]	@ (8104220 <TIM_Base_SetConfig+0x13c>)
 81041d2:	4293      	cmp	r3, r2
 81041d4:	d103      	bne.n	81041de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81041d6:	683b      	ldr	r3, [r7, #0]
 81041d8:	691a      	ldr	r2, [r3, #16]
 81041da:	687b      	ldr	r3, [r7, #4]
 81041dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 81041de:	687b      	ldr	r3, [r7, #4]
 81041e0:	681b      	ldr	r3, [r3, #0]
 81041e2:	f043 0204 	orr.w	r2, r3, #4
 81041e6:	687b      	ldr	r3, [r7, #4]
 81041e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	2201      	movs	r2, #1
 81041ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	68fa      	ldr	r2, [r7, #12]
 81041f4:	601a      	str	r2, [r3, #0]
}
 81041f6:	bf00      	nop
 81041f8:	3714      	adds	r7, #20
 81041fa:	46bd      	mov	sp, r7
 81041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104200:	4770      	bx	lr
 8104202:	bf00      	nop
 8104204:	40010000 	.word	0x40010000
 8104208:	40000400 	.word	0x40000400
 810420c:	40000800 	.word	0x40000800
 8104210:	40000c00 	.word	0x40000c00
 8104214:	40010400 	.word	0x40010400
 8104218:	40014000 	.word	0x40014000
 810421c:	40014400 	.word	0x40014400
 8104220:	40014800 	.word	0x40014800

08104224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8104224:	b480      	push	{r7}
 8104226:	b087      	sub	sp, #28
 8104228:	af00      	add	r7, sp, #0
 810422a:	60f8      	str	r0, [r7, #12]
 810422c:	60b9      	str	r1, [r7, #8]
 810422e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8104230:	68fb      	ldr	r3, [r7, #12]
 8104232:	6a1b      	ldr	r3, [r3, #32]
 8104234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8104236:	68fb      	ldr	r3, [r7, #12]
 8104238:	6a1b      	ldr	r3, [r3, #32]
 810423a:	f023 0201 	bic.w	r2, r3, #1
 810423e:	68fb      	ldr	r3, [r7, #12]
 8104240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8104242:	68fb      	ldr	r3, [r7, #12]
 8104244:	699b      	ldr	r3, [r3, #24]
 8104246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8104248:	693b      	ldr	r3, [r7, #16]
 810424a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810424e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	011b      	lsls	r3, r3, #4
 8104254:	693a      	ldr	r2, [r7, #16]
 8104256:	4313      	orrs	r3, r2
 8104258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810425a:	697b      	ldr	r3, [r7, #20]
 810425c:	f023 030a 	bic.w	r3, r3, #10
 8104260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8104262:	697a      	ldr	r2, [r7, #20]
 8104264:	68bb      	ldr	r3, [r7, #8]
 8104266:	4313      	orrs	r3, r2
 8104268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810426a:	68fb      	ldr	r3, [r7, #12]
 810426c:	693a      	ldr	r2, [r7, #16]
 810426e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8104270:	68fb      	ldr	r3, [r7, #12]
 8104272:	697a      	ldr	r2, [r7, #20]
 8104274:	621a      	str	r2, [r3, #32]
}
 8104276:	bf00      	nop
 8104278:	371c      	adds	r7, #28
 810427a:	46bd      	mov	sp, r7
 810427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104280:	4770      	bx	lr

08104282 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8104282:	b480      	push	{r7}
 8104284:	b087      	sub	sp, #28
 8104286:	af00      	add	r7, sp, #0
 8104288:	60f8      	str	r0, [r7, #12]
 810428a:	60b9      	str	r1, [r7, #8]
 810428c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810428e:	68fb      	ldr	r3, [r7, #12]
 8104290:	6a1b      	ldr	r3, [r3, #32]
 8104292:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8104294:	68fb      	ldr	r3, [r7, #12]
 8104296:	6a1b      	ldr	r3, [r3, #32]
 8104298:	f023 0210 	bic.w	r2, r3, #16
 810429c:	68fb      	ldr	r3, [r7, #12]
 810429e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81042a0:	68fb      	ldr	r3, [r7, #12]
 81042a2:	699b      	ldr	r3, [r3, #24]
 81042a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81042a6:	693b      	ldr	r3, [r7, #16]
 81042a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 81042ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 81042ae:	687b      	ldr	r3, [r7, #4]
 81042b0:	031b      	lsls	r3, r3, #12
 81042b2:	693a      	ldr	r2, [r7, #16]
 81042b4:	4313      	orrs	r3, r2
 81042b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81042b8:	697b      	ldr	r3, [r7, #20]
 81042ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 81042be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 81042c0:	68bb      	ldr	r3, [r7, #8]
 81042c2:	011b      	lsls	r3, r3, #4
 81042c4:	697a      	ldr	r2, [r7, #20]
 81042c6:	4313      	orrs	r3, r2
 81042c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81042ca:	68fb      	ldr	r3, [r7, #12]
 81042cc:	693a      	ldr	r2, [r7, #16]
 81042ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81042d0:	68fb      	ldr	r3, [r7, #12]
 81042d2:	697a      	ldr	r2, [r7, #20]
 81042d4:	621a      	str	r2, [r3, #32]
}
 81042d6:	bf00      	nop
 81042d8:	371c      	adds	r7, #28
 81042da:	46bd      	mov	sp, r7
 81042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042e0:	4770      	bx	lr

081042e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 81042e2:	b480      	push	{r7}
 81042e4:	b085      	sub	sp, #20
 81042e6:	af00      	add	r7, sp, #0
 81042e8:	6078      	str	r0, [r7, #4]
 81042ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	689b      	ldr	r3, [r3, #8]
 81042f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81042f2:	68fb      	ldr	r3, [r7, #12]
 81042f4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 81042f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 81042fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81042fe:	683a      	ldr	r2, [r7, #0]
 8104300:	68fb      	ldr	r3, [r7, #12]
 8104302:	4313      	orrs	r3, r2
 8104304:	f043 0307 	orr.w	r3, r3, #7
 8104308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810430a:	687b      	ldr	r3, [r7, #4]
 810430c:	68fa      	ldr	r2, [r7, #12]
 810430e:	609a      	str	r2, [r3, #8]
}
 8104310:	bf00      	nop
 8104312:	3714      	adds	r7, #20
 8104314:	46bd      	mov	sp, r7
 8104316:	f85d 7b04 	ldr.w	r7, [sp], #4
 810431a:	4770      	bx	lr

0810431c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810431c:	b480      	push	{r7}
 810431e:	b087      	sub	sp, #28
 8104320:	af00      	add	r7, sp, #0
 8104322:	60f8      	str	r0, [r7, #12]
 8104324:	60b9      	str	r1, [r7, #8]
 8104326:	607a      	str	r2, [r7, #4]
 8104328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810432a:	68fb      	ldr	r3, [r7, #12]
 810432c:	689b      	ldr	r3, [r3, #8]
 810432e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8104330:	697b      	ldr	r3, [r7, #20]
 8104332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8104338:	683b      	ldr	r3, [r7, #0]
 810433a:	021a      	lsls	r2, r3, #8
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	431a      	orrs	r2, r3
 8104340:	68bb      	ldr	r3, [r7, #8]
 8104342:	4313      	orrs	r3, r2
 8104344:	697a      	ldr	r2, [r7, #20]
 8104346:	4313      	orrs	r3, r2
 8104348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810434a:	68fb      	ldr	r3, [r7, #12]
 810434c:	697a      	ldr	r2, [r7, #20]
 810434e:	609a      	str	r2, [r3, #8]
}
 8104350:	bf00      	nop
 8104352:	371c      	adds	r7, #28
 8104354:	46bd      	mov	sp, r7
 8104356:	f85d 7b04 	ldr.w	r7, [sp], #4
 810435a:	4770      	bx	lr

0810435c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810435c:	b480      	push	{r7}
 810435e:	b085      	sub	sp, #20
 8104360:	af00      	add	r7, sp, #0
 8104362:	6078      	str	r0, [r7, #4]
 8104364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810436c:	2b01      	cmp	r3, #1
 810436e:	d101      	bne.n	8104374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8104370:	2302      	movs	r3, #2
 8104372:	e06d      	b.n	8104450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	2201      	movs	r2, #1
 8104378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810437c:	687b      	ldr	r3, [r7, #4]
 810437e:	2202      	movs	r2, #2
 8104380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	685b      	ldr	r3, [r3, #4]
 810438a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	681b      	ldr	r3, [r3, #0]
 8104390:	689b      	ldr	r3, [r3, #8]
 8104392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8104394:	687b      	ldr	r3, [r7, #4]
 8104396:	681b      	ldr	r3, [r3, #0]
 8104398:	4a30      	ldr	r2, [pc, #192]	@ (810445c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810439a:	4293      	cmp	r3, r2
 810439c:	d004      	beq.n	81043a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	681b      	ldr	r3, [r3, #0]
 81043a2:	4a2f      	ldr	r2, [pc, #188]	@ (8104460 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81043a4:	4293      	cmp	r3, r2
 81043a6:	d108      	bne.n	81043ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81043a8:	68fb      	ldr	r3, [r7, #12]
 81043aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 81043ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81043b0:	683b      	ldr	r3, [r7, #0]
 81043b2:	685b      	ldr	r3, [r3, #4]
 81043b4:	68fa      	ldr	r2, [r7, #12]
 81043b6:	4313      	orrs	r3, r2
 81043b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81043ba:	68fb      	ldr	r3, [r7, #12]
 81043bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 81043c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81043c2:	683b      	ldr	r3, [r7, #0]
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	68fa      	ldr	r2, [r7, #12]
 81043c8:	4313      	orrs	r3, r2
 81043ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	68fa      	ldr	r2, [r7, #12]
 81043d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	4a20      	ldr	r2, [pc, #128]	@ (810445c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81043da:	4293      	cmp	r3, r2
 81043dc:	d022      	beq.n	8104424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81043de:	687b      	ldr	r3, [r7, #4]
 81043e0:	681b      	ldr	r3, [r3, #0]
 81043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81043e6:	d01d      	beq.n	8104424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	681b      	ldr	r3, [r3, #0]
 81043ec:	4a1d      	ldr	r2, [pc, #116]	@ (8104464 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81043ee:	4293      	cmp	r3, r2
 81043f0:	d018      	beq.n	8104424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	4a1c      	ldr	r2, [pc, #112]	@ (8104468 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81043f8:	4293      	cmp	r3, r2
 81043fa:	d013      	beq.n	8104424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	4a1a      	ldr	r2, [pc, #104]	@ (810446c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8104402:	4293      	cmp	r3, r2
 8104404:	d00e      	beq.n	8104424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	681b      	ldr	r3, [r3, #0]
 810440a:	4a15      	ldr	r2, [pc, #84]	@ (8104460 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810440c:	4293      	cmp	r3, r2
 810440e:	d009      	beq.n	8104424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	4a16      	ldr	r2, [pc, #88]	@ (8104470 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8104416:	4293      	cmp	r3, r2
 8104418:	d004      	beq.n	8104424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810441a:	687b      	ldr	r3, [r7, #4]
 810441c:	681b      	ldr	r3, [r3, #0]
 810441e:	4a15      	ldr	r2, [pc, #84]	@ (8104474 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8104420:	4293      	cmp	r3, r2
 8104422:	d10c      	bne.n	810443e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8104424:	68bb      	ldr	r3, [r7, #8]
 8104426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810442a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810442c:	683b      	ldr	r3, [r7, #0]
 810442e:	689b      	ldr	r3, [r3, #8]
 8104430:	68ba      	ldr	r2, [r7, #8]
 8104432:	4313      	orrs	r3, r2
 8104434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8104436:	687b      	ldr	r3, [r7, #4]
 8104438:	681b      	ldr	r3, [r3, #0]
 810443a:	68ba      	ldr	r2, [r7, #8]
 810443c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	2201      	movs	r2, #1
 8104442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8104446:	687b      	ldr	r3, [r7, #4]
 8104448:	2200      	movs	r2, #0
 810444a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810444e:	2300      	movs	r3, #0
}
 8104450:	4618      	mov	r0, r3
 8104452:	3714      	adds	r7, #20
 8104454:	46bd      	mov	sp, r7
 8104456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810445a:	4770      	bx	lr
 810445c:	40010000 	.word	0x40010000
 8104460:	40010400 	.word	0x40010400
 8104464:	40000400 	.word	0x40000400
 8104468:	40000800 	.word	0x40000800
 810446c:	40000c00 	.word	0x40000c00
 8104470:	40001800 	.word	0x40001800
 8104474:	40014000 	.word	0x40014000

08104478 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8104478:	b480      	push	{r7}
 810447a:	b083      	sub	sp, #12
 810447c:	af00      	add	r7, sp, #0
 810447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8104480:	bf00      	nop
 8104482:	370c      	adds	r7, #12
 8104484:	46bd      	mov	sp, r7
 8104486:	f85d 7b04 	ldr.w	r7, [sp], #4
 810448a:	4770      	bx	lr

0810448c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810448c:	b480      	push	{r7}
 810448e:	b083      	sub	sp, #12
 8104490:	af00      	add	r7, sp, #0
 8104492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8104494:	bf00      	nop
 8104496:	370c      	adds	r7, #12
 8104498:	46bd      	mov	sp, r7
 810449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810449e:	4770      	bx	lr

081044a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81044a0:	b480      	push	{r7}
 81044a2:	b083      	sub	sp, #12
 81044a4:	af00      	add	r7, sp, #0
 81044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81044a8:	bf00      	nop
 81044aa:	370c      	adds	r7, #12
 81044ac:	46bd      	mov	sp, r7
 81044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044b2:	4770      	bx	lr

081044b4 <__libc_init_array>:
 81044b4:	b570      	push	{r4, r5, r6, lr}
 81044b6:	4d0d      	ldr	r5, [pc, #52]	@ (81044ec <__libc_init_array+0x38>)
 81044b8:	4c0d      	ldr	r4, [pc, #52]	@ (81044f0 <__libc_init_array+0x3c>)
 81044ba:	1b64      	subs	r4, r4, r5
 81044bc:	10a4      	asrs	r4, r4, #2
 81044be:	2600      	movs	r6, #0
 81044c0:	42a6      	cmp	r6, r4
 81044c2:	d109      	bne.n	81044d8 <__libc_init_array+0x24>
 81044c4:	4d0b      	ldr	r5, [pc, #44]	@ (81044f4 <__libc_init_array+0x40>)
 81044c6:	4c0c      	ldr	r4, [pc, #48]	@ (81044f8 <__libc_init_array+0x44>)
 81044c8:	f000 f818 	bl	81044fc <_init>
 81044cc:	1b64      	subs	r4, r4, r5
 81044ce:	10a4      	asrs	r4, r4, #2
 81044d0:	2600      	movs	r6, #0
 81044d2:	42a6      	cmp	r6, r4
 81044d4:	d105      	bne.n	81044e2 <__libc_init_array+0x2e>
 81044d6:	bd70      	pop	{r4, r5, r6, pc}
 81044d8:	f855 3b04 	ldr.w	r3, [r5], #4
 81044dc:	4798      	blx	r3
 81044de:	3601      	adds	r6, #1
 81044e0:	e7ee      	b.n	81044c0 <__libc_init_array+0xc>
 81044e2:	f855 3b04 	ldr.w	r3, [r5], #4
 81044e6:	4798      	blx	r3
 81044e8:	3601      	adds	r6, #1
 81044ea:	e7f2      	b.n	81044d2 <__libc_init_array+0x1e>
 81044ec:	0810452c 	.word	0x0810452c
 81044f0:	0810452c 	.word	0x0810452c
 81044f4:	0810452c 	.word	0x0810452c
 81044f8:	08104530 	.word	0x08104530

081044fc <_init>:
 81044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81044fe:	bf00      	nop
 8104500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104502:	bc08      	pop	{r3}
 8104504:	469e      	mov	lr, r3
 8104506:	4770      	bx	lr

08104508 <_fini>:
 8104508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810450a:	bf00      	nop
 810450c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810450e:	bc08      	pop	{r3}
 8104510:	469e      	mov	lr, r3
 8104512:	4770      	bx	lr
